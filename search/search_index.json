{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastStockAPI - Comprehensive Financial Data API","text":"<p>Welcome to FastStockAPI, a powerful and comprehensive FastAPI-based financial data service that provides real-time and historical data for stocks, cryptocurrencies, options, indices, and forex markets.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Stock Data: Indian (NSE) and US stock prices with historical data</li> <li>Cryptocurrency: Live crypto prices and historical data from multiple exchanges</li> <li>Options Trading: Complete options chain data, analytics, and historical options data</li> <li>Market Indices: US and BSE index data with historical trends</li> <li>Forex Data: Real-time forex rates and historical data</li> <li>Advanced Analytics: PCR, Max Pain, Open Interest analysis</li> <li>High Performance: Async FastAPI with automatic OpenAPI documentation</li> <li>Production Ready: CORS enabled, health checks, error handling</li> </ul>"},{"location":"#api-endpoints-overview","title":"API Endpoints Overview","text":""},{"location":"#stocks","title":"Stocks","text":"<ul> <li>Indian Stocks: <code>/stocks/IND/{symbol}</code> - Individual NSE stock data</li> <li>US Stocks: <code>/stocks/US/{symbol}</code> - Individual US stock data</li> <li>Bulk Quotes: <code>/stocks/IND/quote?symbols=RELIANCE,TCS</code> - Multiple stocks</li> <li>Historical Data: <code>/stocks/historical/IND/{symbol}?period=1mo</code> - Historical prices</li> </ul>"},{"location":"#cryptocurrency","title":"Cryptocurrency","text":"<ul> <li>Price Data: <code>/crypto/quote/{symbol}</code> - BTC, ETH, ADA, etc.</li> <li>Historical Data: <code>/crypto/historical/{symbol}?period=1d</code> - Historical crypto data</li> <li>Symbol List: <code>/crypto/list</code> - Available cryptocurrencies</li> </ul>"},{"location":"#options-derivatives","title":"Options &amp; Derivatives","text":"<ul> <li>Index Prices: <code>/options/index-price?index=NIFTY</code> - NIFTY, BANKNIFTY prices</li> <li>Available Expiries: <code>/options/expiries?index=NIFTY</code> - Option expiries</li> <li>Option Chains: <code>/options/direct-data?index=NIFTY&amp;expiry=160925</code> - Complete option data</li> <li>Strike Data: <code>/options/strike-data?index=NIFTY&amp;strike=24000&amp;expiry=160925</code> - Specific strike data</li> <li>Historical Options: <code>/options/historical/NIFTY?strike=24000&amp;expiry=160925&amp;option_type=CE</code> - Historical option prices</li> </ul>"},{"location":"#market-indices","title":"Market Indices","text":"<ul> <li>US Indices: <code>/stocks/index/US/{symbol}</code> - DJI, SPX, IXIC</li> <li>BSE Indices: <code>/stocks/index/BSE/{symbol}</code> - SENSEX, BSE100</li> <li>Historical Indices: <code>/stocks/index/US/{symbol}/historical?period=1mo</code></li> </ul>"},{"location":"#forex","title":"Forex","text":"<ul> <li>Exchange Rates: <code>/forex/quote?from=USD&amp;to=INR</code> - Currency conversion</li> <li>Multiple Rates: <code>/forex/quotes?base=USD&amp;symbols=EUR,GBP,JPY</code> - Bulk forex rates</li> <li>Historical Forex: <code>/forex/historical?from=USD&amp;to=INR&amp;period=1mo</code> - Historical rates</li> </ul>"},{"location":"#analytics","title":"Analytics","text":"<ul> <li>Put-Call Ratio: <code>/analytics/pcr?index=NIFTY&amp;expiry=160925</code> - PCR calculation</li> <li>Max Pain: <code>/analytics/max-pain?index=NIFTY&amp;expiry=160925</code> - Max pain analysis</li> <li>Top OI: <code>/analytics/top-oi?index=NIFTY&amp;expiry=160925</code> - Top open interest</li> <li>Summary: <code>/analytics/summary?index=NIFTY&amp;expiry=160925</code> - Complete analytics</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000  (local development)\nhttps://your-domain.com  (production)\n</code></pre>"},{"location":"#health-check","title":"Health Check","text":"<pre><code>curl http://localhost:8000/health\n</code></pre>"},{"location":"#get-stock-price","title":"Get Stock Price","text":"<pre><code># Indian Stock\ncurl \"http://localhost:8000/stocks/IND/RELIANCE\"\n\n# US Stock\ncurl \"http://localhost:8000/stocks/US/AAPL\"\n</code></pre>"},{"location":"#get-crypto-price","title":"Get Crypto Price","text":"<pre><code>curl \"http://localhost:8000/crypto/quote/BTC\"\n</code></pre>"},{"location":"#get-option-data","title":"Get Option Data","text":"<pre><code># Index Price\ncurl \"http://localhost:8000/options/index-price?index=NIFTY\"\n\n# Option Chain\ncurl \"http://localhost:8000/options/direct-data?index=NIFTY&amp;expiry=160925&amp;num_strikes=10\"\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started: Installation and setup guide</li> <li>API Reference: Complete endpoint documentation</li> <li>Stock API</li> <li>Crypto API</li> <li>Options API</li> <li>Analytics API</li> <li>Symbol Reference: Available symbols and tickers</li> <li>Examples: Code examples in Python, JavaScript, cURL</li> <li>Deployment: Production deployment guide</li> </ul>"},{"location":"#interactive-documentation","title":"Interactive Documentation","text":"<p>Visit <code>/docs</code> for interactive Swagger UI documentation with live API testing.</p>"},{"location":"#supported-markets","title":"Supported Markets","text":""},{"location":"#indian-markets-nse","title":"Indian Markets (NSE)","text":"<ul> <li>Stocks: RELIANCE, TCS, HDFC, ICICIBANK, INFY, etc.</li> <li>Indices: NIFTY, BANKNIFTY, NIFTYIT, NIFTYPHARMA, etc.</li> </ul>"},{"location":"#us-markets","title":"US Markets","text":"<ul> <li>Stocks: AAPL, GOOGL, MSFT, TSLA, AMZN, etc.</li> <li>Indices: DJI (Dow Jones), SPX (S&amp;P 500), IXIC (Nasdaq)</li> </ul>"},{"location":"#cryptocurrency_1","title":"Cryptocurrency","text":"<ul> <li>Major Coins: BTC, ETH, ADA, SOL, DOT, etc.</li> <li>Exchanges: Binance, Coinbase, Kraken integration</li> </ul>"},{"location":"#forex_1","title":"Forex","text":"<ul> <li>Major Pairs: USD/INR, EUR/USD, GBP/USD, USD/JPY, etc.</li> <li>Real-time Rates: Updated every minute</li> </ul>"},{"location":"#deployment","title":"Deployment","text":""},{"location":"#local-development","title":"Local Development","text":"<pre><code>git clone &lt;repository-url&gt;\ncd FastAPI\npip install -r requirements.txt\nuvicorn app.main:app --reload\n</code></pre>"},{"location":"#docker-deployment","title":"Docker Deployment","text":"<pre><code>docker build -t faststockapi .\ndocker run -p 8000:8000 faststockapi\n</code></pre>"},{"location":"#cloud-deployment","title":"Cloud Deployment","text":"<ul> <li>Railway: Connect GitHub repo for automatic deployment</li> <li>Render: Deploy from GitHub with Docker support</li> <li>Heroku: Traditional PaaS deployment</li> <li>AWS/GCP/Azure: Container orchestration with Kubernetes</li> </ul>"},{"location":"#data-sources","title":"Data Sources","text":"<ul> <li>Indian Stocks: NSE via nsepython library</li> <li>US Stocks: Yahoo Finance (yfinance)</li> <li>Cryptocurrency: Binance API and other exchanges</li> <li>Options Data: NSE option chains</li> <li>Forex: Real-time forex APIs</li> <li>Indices: Yahoo Finance and NSE data</li> </ul>"},{"location":"#technical-stack","title":"Technical Stack","text":"<ul> <li>Framework: FastAPI (Python async web framework)</li> <li>Data Processing: Pandas for data manipulation</li> <li>Caching: Redis for performance optimization</li> <li>Rate Limiting: SlowAPI for request throttling</li> <li>Documentation: MkDocs with Material theme</li> <li>Containerization: Docker for easy deployment</li> </ul>"},{"location":"#performance-features","title":"Performance Features","text":"<ul> <li>Async Operations: Non-blocking I/O for high concurrency</li> <li>Data Caching: Redis caching for frequently requested data</li> <li>Rate Limiting: Prevents API abuse and ensures fair usage</li> <li>Error Handling: Comprehensive error responses with helpful messages</li> <li>Health Monitoring: Built-in health checks and metrics</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Add tests if applicable</li> <li>Submit a pull request</li> </ol>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#support","title":"Support","text":"<p>For support and questions: - \ud83d\udce7 Email: support@faststockapi.com - \ud83d\udcac GitHub Issues: Create an issue - \ud83d\udcd6 Documentation: Full API Docs</p> <p>FastStockAPI - Your comprehensive solution for financial market data! - 200+ NSE stocks with <code>.NS</code> suffix - Major indices: NIFTY, BANKNIFTY - Options data and analytics</p>"},{"location":"#cryptocurrency-binance","title":"Cryptocurrency (Binance)","text":"<ul> <li>30+ major cryptocurrencies</li> <li>Real-time prices and 24h statistics</li> <li>Historical data with multiple intervals</li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend: FastAPI (Python)</li> <li>Data Sources: NSE (nsepython), Binance API, Yahoo Finance</li> <li>Database: SQLAlchemy with SQLite/PostgreSQL</li> <li>Deployment: Render.com</li> <li>Documentation: MkDocs with Material theme</li> </ul>"},{"location":"#support_1","title":"Support","text":"<ul> <li>GitHub: OMCHOKSI108/FastAPI-Stock-data-</li> <li>API Base URL: <code>https://fastapi-stock-data.onrender.com</code></li> <li>Interactive Docs: API Documentation</li> </ul> <p>Production Deployment</p> <p>This API is deployed on Render.com and available 24/7. Check the deployment guide for details.</p>"},{"location":"deployment/","title":"FastStockAPI Deployment Guide","text":"<p>This comprehensive guide covers multiple deployment options for FastStockAPI, from local development to production environments.</p>"},{"location":"deployment/#quick-deployment-options","title":"Quick Deployment Options","text":""},{"location":"deployment/#option-1-railway-recommended-for-beginners","title":"Option 1: Railway (Recommended for Beginners)","text":"<pre><code># 1. Connect your GitHub repository to Railway\n# 2. Railway auto-detects FastAPI and deploys automatically\n# 3. Your API will be live at: https://your-project.railway.app\n</code></pre>"},{"location":"deployment/#option-2-render","title":"Option 2: Render","text":"<pre><code># 1. Connect GitHub repo to Render\n# 2. Set build command: `pip install -r requirements.txt`\n# 3. Set start command: `uvicorn app.main:app --host 0.0.0.0 --port $PORT`\n</code></pre>"},{"location":"deployment/#option-3-heroku","title":"Option 3: Heroku","text":"<pre><code># 1. Create Heroku app\n# 2. Set buildpack to Python\n# 3. Deploy via Git or GitHub integration\n</code></pre>"},{"location":"deployment/#docker-deployment","title":"\ud83d\udc33 Docker Deployment","text":""},{"location":"deployment/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements and install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN useradd --create-home --shell /bin/bash app \\\n    &amp;&amp; chown -R app:app /app\nUSER app\n\n# Expose port\nEXPOSE 8000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\n# Start application\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--workers\", \"4\"]\n</code></pre>"},{"location":"deployment/#docker-compose-full-stack","title":"Docker Compose (Full Stack)","text":"<pre><code>version: '3.8'\n\nservices:\n  fastapi:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - ENVIRONMENT=production\n      - REDIS_URL=redis://redis:6379\n      - DATABASE_URL=postgresql://user:password@postgres:5432/fastapi\n    depends_on:\n      - redis\n      - postgres\n    volumes:\n      - ./data:/app/data\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      - POSTGRES_DB=fastapi\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/ssl/certs\n    depends_on:\n      - fastapi\n    restart: unless-stopped\n\nvolumes:\n  redis_data:\n  postgres_data:\n</code></pre>"},{"location":"deployment/#build-and-run","title":"Build and Run","text":"<pre><code># Build the image\ndocker build -t faststockapi .\n\n# Run locally\ndocker run -p 8000:8000 faststockapi\n\n# Or use docker-compose\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/#cloud-platform-deployments","title":"\u2601\ufe0f Cloud Platform Deployments","text":""},{"location":"deployment/#railway-deployment","title":"Railway Deployment","text":"<ol> <li>Connect Repository</li> <li>Go to Railway.app</li> <li>Connect your GitHub repository</li> <li> <p>Railway auto-detects FastAPI</p> </li> <li> <p>Environment Variables <pre><code>ENVIRONMENT=production\nREDIS_URL=${{ REDIS_URL }}\nDATABASE_URL=${{ DATABASE_URL }}\n</code></pre></p> </li> <li> <p>Domain Setup</p> </li> <li>Railway provides a <code>.railway.app</code> domain</li> <li>Add custom domain in settings</li> </ol>"},{"location":"deployment/#render-deployment","title":"Render Deployment","text":"<ol> <li>Create Web Service</li> <li>Connect GitHub repository</li> <li> <p>Set runtime to Python 3</p> </li> <li> <p>Build Settings <pre><code>Build Command: pip install -r requirements.txt\nStart Command: uvicorn app.main:app --host 0.0.0.0 --port $PORT --workers 2\n</code></pre></p> </li> <li> <p>Environment <pre><code>PYTHON_VERSION=3.11.0\nENVIRONMENT=production\n</code></pre></p> </li> </ol>"},{"location":"deployment/#heroku-deployment","title":"Heroku Deployment","text":"<ol> <li> <p>Create App <pre><code>heroku create your-fastapi-app\n</code></pre></p> </li> <li> <p>Set Buildpack <pre><code>heroku buildpacks:set heroku/python\n</code></pre></p> </li> <li> <p>Environment Variables <pre><code>heroku config:set ENVIRONMENT=production\n</code></pre></p> </li> <li> <p>Deploy <pre><code>git push heroku main\n</code></pre></p> </li> </ol>"},{"location":"deployment/#aws-ec2-deployment","title":"AWS EC2 Deployment","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Python and pip\nsudo apt install python3 python3-pip python3-venv -y\n\n# Clone repository\ngit clone https://github.com/your-username/fastapi-project.git\ncd fastapi-project\n\n# Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Install Gunicorn\npip install gunicorn\n\n# Create systemd service\nsudo nano /etc/systemd/system/fastapi.service\n</code></pre> <p>Service File: <pre><code>[Unit]\nDescription=FastAPI Application\nAfter=network.target\n\n[Service]\nUser=ubuntu\nGroup=ubuntu\nWorkingDirectory=/home/ubuntu/fastapi-project\nEnvironment=\"PATH=/home/ubuntu/fastapi-project/venv/bin\"\nExecStart=/home/ubuntu/fastapi-project/venv/bin/gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <pre><code># Enable and start service\nsudo systemctl enable fastapi\nsudo systemctl start fastapi\n\n# Check status\nsudo systemctl status fastapi\n</code></pre>"},{"location":"deployment/#google-cloud-run","title":"Google Cloud Run","text":"<pre><code># cloudbuild.yaml\nsteps:\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['build', '-t', 'gcr.io/$PROJECT_ID/fastapi', '.']\n\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['push', 'gcr.io/$PROJECT_ID/fastapi']\n\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: gcloud\n    args:\n      - run\n      - deploy\n      - fastapi-service\n      - --image=gcr.io/$PROJECT_ID/fastapi\n      - --platform=managed\n      - --port=8000\n      - --memory=1Gi\n      - --cpu=1\n      - --max-instances=10\n      - --concurrency=80\n</code></pre>"},{"location":"deployment/#azure-container-instances","title":"Azure Container Instances","text":"<pre><code># Build and push to Azure Container Registry\naz acr build --registry myregistry --image fastapi:v1 .\n\n# Deploy to ACI\naz container create \\\n  --resource-group myResourceGroup \\\n  --name fastapi-container \\\n  --image myregistry.azurecr.io/fastapi:v1 \\\n  --cpu 1 \\\n  --memory 1 \\\n  --registry-login-server myregistry.azurecr.io \\\n  --registry-username myregistry \\\n  --registry-password $REGISTRY_PASSWORD \\\n  --ip-address public \\\n  --ports 8000 \\\n  --environment-variables ENVIRONMENT=production\n</code></pre>"},{"location":"deployment/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/#environment-variables","title":"Environment Variables","text":"<pre><code># Application\nENVIRONMENT=production\nDEBUG=false\nSECRET_KEY=your-secret-key-here\n\n# Database\nDATABASE_URL=postgresql://user:password@localhost:5432/fastapi\n\n# Redis (Caching)\nREDIS_URL=redis://localhost:6379\n\n# External APIs\nALPHA_VANTAGE_API_KEY=your-key\nFINNHUB_API_KEY=your-key\nBINANCE_API_KEY=your-key\n\n# Email (Optional)\nSMTP_SERVER=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=your-email@gmail.com\nSMTP_PASSWORD=your-app-password\n\n# Logging\nLOG_LEVEL=INFO\nLOG_FORMAT=json\n</code></pre>"},{"location":"deployment/#configuration-management","title":"Configuration Management","text":"<pre><code># config.py\nimport os\nfrom typing import Optional\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    environment: str = os.getenv(\"ENVIRONMENT\", \"development\")\n    debug: bool = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n    secret_key: str = os.getenv(\"SECRET_KEY\", \"your-secret-key\")\n\n    # Database\n    database_url: str = os.getenv(\"DATABASE_URL\", \"sqlite:///./fastapi.db\")\n\n    # Redis\n    redis_url: str = os.getenv(\"REDIS_URL\", \"redis://localhost:6379\")\n\n    # API Keys\n    alpha_vantage_key: Optional[str] = os.getenv(\"ALPHA_VANTAGE_API_KEY\")\n    finnhub_key: Optional[str] = os.getenv(\"FINNHUB_API_KEY\")\n    binance_key: Optional[str] = os.getenv(\"BINANCE_API_KEY\")\n\n    # Rate Limiting\n    rate_limit_requests: int = int(os.getenv(\"RATE_LIMIT_REQUESTS\", \"100\"))\n    rate_limit_window: int = int(os.getenv(\"RATE_LIMIT_WINDOW\", \"60\"))\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>"},{"location":"deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"deployment/#application-monitoring","title":"Application Monitoring","text":"<pre><code># monitoring.py\nimport time\nimport psutil\nfrom fastapi import Request, Response\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nclass MonitoringMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        start_time = time.time()\n\n        response = await call_next(request)\n\n        process_time = time.time() - start_time\n\n        # Log request details\n        print(f\"{request.method} {request.url.path} - {response.status_code} - {process_time:.3f}s\")\n\n        # Add custom headers\n        response.headers[\"X-Process-Time\"] = str(process_time)\n        response.headers[\"X-Server-Memory\"] = str(psutil.virtual_memory().percent)\n\n        return response\n</code></pre>"},{"location":"deployment/#health-checks","title":"Health Checks","text":"<pre><code># health.py\nfrom fastapi import APIRouter\nimport psutil\nimport time\n\nrouter = APIRouter()\n\n@router.get(\"/health\")\nasync def health_check():\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": time.time(),\n        \"memory_usage\": psutil.virtual_memory().percent,\n        \"cpu_usage\": psutil.cpu_percent(),\n        \"disk_usage\": psutil.disk_usage('/').percent\n    }\n\n@router.get(\"/health/detailed\")\nasync def detailed_health():\n    return {\n        \"status\": \"healthy\",\n        \"version\": \"1.0.0\",\n        \"uptime\": time.time() - psutil.boot_time(),\n        \"memory\": {\n            \"total\": psutil.virtual_memory().total,\n            \"available\": psutil.virtual_memory().available,\n            \"percent\": psutil.virtual_memory().percent\n        },\n        \"cpu\": {\n            \"cores\": psutil.cpu_count(),\n            \"usage_percent\": psutil.cpu_percent(percpu=True)\n        },\n        \"disk\": {\n            \"total\": psutil.disk_usage('/').total,\n            \"free\": psutil.disk_usage('/').free,\n            \"percent\": psutil.disk_usage('/').percent\n        }\n    }\n</code></pre>"},{"location":"deployment/#logging-configuration","title":"Logging Configuration","text":"<pre><code># logging_config.py\nimport logging\nimport sys\nfrom pythonjsonlogger import jsonlogger\n\ndef setup_logging():\n    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n\n    # JSON formatter for production\n    json_formatter = jsonlogger.JsonFormatter(\n        \"%(asctime)s %(name)s %(levelname)s %(message)s\"\n    )\n\n    # Console handler\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.setFormatter(json_formatter)\n    logger.addHandler(console_handler)\n\n    # File handler\n    file_handler = logging.FileHandler(\"app.log\")\n    file_handler.setFormatter(json_formatter)\n    logger.addHandler(file_handler)\n\n    return logger\n</code></pre>"},{"location":"deployment/#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":""},{"location":"deployment/#https-configuration","title":"HTTPS Configuration","text":"<pre><code># nginx.conf\nserver {\n    listen 80;\n    server_name your-domain.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name your-domain.com;\n\n    ssl_certificate /etc/ssl/certs/your-domain.crt;\n    ssl_certificate_key /etc/ssl/private/your-domain.key;\n\n    location / {\n        proxy_pass http://localhost:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"deployment/#cors-configuration","title":"CORS Configuration","text":"<pre><code># cors.py\nfrom fastapi.middleware.cors import CORSMiddleware\n\ndef setup_cors(app):\n    origins = [\n        \"http://localhost:3000\",    # React dev\n        \"http://localhost:5173\",    # Vite dev\n        \"https://your-frontend.com\", # Production frontend\n    ]\n\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=origins,\n        allow_credentials=True,\n        allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n        allow_headers=[\"*\"],\n    )\n</code></pre>"},{"location":"deployment/#rate-limiting","title":"Rate Limiting","text":"<pre><code># rate_limiting.py\nfrom slowapi import Limiter, _rate_limit_exceeded_handler\nfrom slowapi.util import get_remote_address\nfrom slowapi.middleware import SlowAPIMiddleware\nfrom slowapi.errors import RateLimitExceeded\n\nlimiter = Limiter(key_func=get_remote_address)\n\ndef setup_rate_limiting(app):\n    app.state.limiter = limiter\n    app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n    app.add_middleware(SlowAPIMiddleware)\n</code></pre>"},{"location":"deployment/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/#gunicorn-configuration","title":"Gunicorn Configuration","text":"<pre><code># gunicorn.conf.py\nimport multiprocessing\n\n# Server socket\nbind = \"0.0.0.0:8000\"\nbacklog = 2048\n\n# Worker processes\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"uvicorn.workers.UvicornWorker\"\nworker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 50\n\n# Logging\nloglevel = \"info\"\naccesslog = \"-\"\nerrorlog = \"-\"\n\n# Process naming\nproc_name = \"fastapi\"\n\n# Server mechanics\ndaemon = False\npidfile = \"/var/run/gunicorn.pid\"\nuser = \"www-data\"\ngroup = \"www-data\"\ntmp_upload_dir = None\n</code></pre>"},{"location":"deployment/#database-optimization","title":"Database Optimization","text":"<pre><code># database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nimport os\n\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"sqlite:///./fastapi.db\")\n\n# Production database configuration\nif DATABASE_URL.startswith(\"postgresql\"):\n    engine = create_engine(\n        DATABASE_URL,\n        pool_size=10,\n        max_overflow=20,\n        pool_timeout=30,\n        pool_recycle=1800,\n        echo=False\n    )\nelse:\n    engine = create_engine(\n        DATABASE_URL,\n        connect_args={\"check_same_thread\": False}\n    )\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"deployment/#caching-strategy","title":"Caching Strategy","text":"<pre><code># caching.py\nfrom redis import Redis\nimport json\nimport os\nfrom typing import Optional, Any\n\nclass Cache:\n    def __init__(self):\n        self.redis_url = os.getenv(\"REDIS_URL\", \"redis://localhost:6379\")\n        self.redis = Redis.from_url(self.redis_url, decode_responses=True)\n\n    def get(self, key: str) -&gt; Optional[Any]:\n        try:\n            data = self.redis.get(key)\n            return json.loads(data) if data else None\n        except:\n            return None\n\n    def set(self, key: str, value: Any, ttl: int = 300) -&gt; bool:\n        try:\n            return self.redis.setex(key, ttl, json.dumps(value))\n        except:\n            return False\n\n    def delete(self, key: str) -&gt; bool:\n        try:\n            return bool(self.redis.delete(key))\n        except:\n            return False\n\ncache = Cache()\n</code></pre>"},{"location":"deployment/#cicd-pipeline","title":"\ud83d\udd04 CI/CD Pipeline","text":""},{"location":"deployment/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          python -m pytest\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Deploy to Railway\n        run: |\n          # Railway deployment commands\n          curl -fsSL https://railway.app/install.sh | sh\n          railway login --token ${{ secrets.RAILWAY_TOKEN }}\n          railway deploy\n</code></pre>"},{"location":"deployment/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"deployment/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code># metrics.py\nfrom prometheus_client import Counter, Histogram, Gauge, generate_latest\nfrom fastapi import Response\n\n# Metrics\nREQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status'])\nREQUEST_LATENCY = Histogram('http_request_duration_seconds', 'HTTP request latency', ['method', 'endpoint'])\nACTIVE_CONNECTIONS = Gauge('active_connections', 'Number of active connections')\n\n@app.middleware(\"http\")\nasync def metrics_middleware(request, call_next):\n    start_time = time.time()\n\n    response = await call_next(request)\n\n    REQUEST_COUNT.labels(\n        method=request.method,\n        endpoint=request.url.path,\n        status=response.status_code\n    ).inc()\n\n    REQUEST_LATENCY.labels(\n        method=request.method,\n        endpoint=request.url.path\n    ).observe(time.time() - start_time)\n\n    return response\n\n@app.get(\"/metrics\")\nasync def metrics():\n    return Response(generate_latest(), media_type=\"text/plain\")\n</code></pre>"},{"location":"deployment/#error-tracking","title":"Error Tracking","text":"<pre><code># error_tracking.py\nimport sentry_sdk\nfrom sentry_sdk.integrations.fastapi import FastAPIIntegration\nfrom sentry_sdk.integrations.redis import RedisIntegration\n\ndef setup_error_tracking():\n    sentry_sdk.init(\n        dsn=os.getenv(\"SENTRY_DSN\"),\n        integrations=[\n            FastAPIIntegration(),\n            RedisIntegration(),\n        ],\n        environment=os.getenv(\"ENVIRONMENT\", \"development\"),\n        traces_sample_rate=1.0,\n    )\n</code></pre>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#common-deployment-issues","title":"Common Deployment Issues","text":"<ol> <li> <p>Port Binding <pre><code># Ensure your app binds to 0.0.0.0, not 127.0.0.1\nuvicorn app.main:app --host 0.0.0.0 --port $PORT\n</code></pre></p> </li> <li> <p>Static Files <pre><code># For serving static files in production\nfrom fastapi.staticfiles import StaticFiles\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n</code></pre></p> </li> <li> <p>Database Connection <pre><code># Test database connection\npython -c \"from app.database import engine; print('DB connected' if engine else 'DB failed')\"\n</code></pre></p> </li> <li> <p>Memory Issues <pre><code># Monitor memory usage\ndocker stats\n# or\nhtop\n</code></pre></p> </li> </ol>"},{"location":"deployment/#performance-tuning","title":"Performance Tuning","text":"<ol> <li> <p>Worker Processes <pre><code># Use multiple workers for better performance\ngunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app\n</code></pre></p> </li> <li> <p>Connection Pooling <pre><code># Configure database connection pooling\nengine = create_engine(\n    DATABASE_URL,\n    pool_size=10,\n    max_overflow=20,\n    pool_timeout=30,\n)\n</code></pre></p> </li> <li> <p>Caching <pre><code># Implement Redis caching for frequently accessed data\n@app.get(\"/api/data\")\n@cache(expire=300)\nasync def get_data():\n    return expensive_operation()\n</code></pre></p> </li> </ol> <p>This deployment guide covers everything from simple deployments to enterprise-grade production setups. Choose the deployment method that best fits your needs and scale as your application grows.</p>"},{"location":"deployment/#dependencies","title":"Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"deployment/#local-development-setup","title":"\ud83c\udfd7\ufe0f Local Development Setup","text":""},{"location":"deployment/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/OMCHOKSI108/FastAPI-Stock-data-.git\ncd FastAPI-Stock-data-\n</code></pre>"},{"location":"deployment/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"deployment/#3-environment-variables","title":"3. Environment Variables","text":"<p>Create <code>.env</code> file:</p> <pre><code># .env\nPROVIDER=YFINANCE\nDEBUG=True\nDATABASE_URL=sqlite:///./app.db\n\n# Optional: Binance API keys (for crypto endpoints)\nBINANCE_API_KEY=your_api_key\nBINANCE_API_SECRET=your_api_secret\n</code></pre>"},{"location":"deployment/#4-run-locally","title":"4. Run Locally","text":"<pre><code># Development server\nuvicorn app.main:app --reload\n\n# Or with custom host/port\nuvicorn app.main:app --host 0.0.0.0 --port 8000 --reload\n</code></pre>"},{"location":"deployment/#5-test-endpoints","title":"5. Test Endpoints","text":"<pre><code># Health check\ncurl http://localhost:8000/health\n\n# API docs\nopen http://localhost:8000/docs\n\n# Stock price\ncurl \"http://localhost:8000/api/v1/market/price/stock?symbol=RELIANCE.NS\"\n\n# Crypto price\ncurl \"http://localhost:8000/crypto-price/BTCUSDT\"\n</code></pre>"},{"location":"deployment/#production-deployment-options","title":"Production Deployment Options","text":""},{"location":"deployment/#option-1-rendercom-current","title":"Option 1: Render.com (Current)","text":""},{"location":"deployment/#1-connect-repository","title":"1. Connect Repository","text":"<ol> <li>Go to Render.com</li> <li>Connect your GitHub repository</li> <li>Select \"Web Service\"</li> </ol>"},{"location":"deployment/#2-configure-service","title":"2. Configure Service","text":"<pre><code># render.yaml\nservices:\n  - type: web\n    name: fastapi-stock-data\n    env: python\n    buildCommand: pip install -r requirements.txt\n    startCommand: uvicorn app.main:app --host 0.0.0.0 --port $PORT\n    envVars:\n      - key: PROVIDER\n        value: YFINANCE\n      - key: DEBUG\n        value: False\n      - key: DATABASE_URL\n        value: sqlite:///./app.db\n</code></pre>"},{"location":"deployment/#3-environment-variables_1","title":"3. Environment Variables","text":"<p>Set these in Render dashboard:</p> <ul> <li><code>PROVIDER=YFINANCE</code></li> <li><code>DEBUG=False</code></li> <li><code>DATABASE_URL=sqlite:///./app.db</code></li> <li><code>BINANCE_API_KEY</code> (optional)</li> <li><code>BINANCE_API_SECRET</code> (optional)</li> </ul>"},{"location":"deployment/#4-deploy","title":"4. Deploy","text":"<pre><code>git add .\ngit commit -m \"Ready for deployment\"\ngit push origin main\n</code></pre> <p>Render will automatically deploy on push.</p>"},{"location":"deployment/#option-2-heroku","title":"Option 2: Heroku","text":""},{"location":"deployment/#1-create-heroku-app","title":"1. Create Heroku App","text":"<pre><code>heroku create your-app-name\n</code></pre>"},{"location":"deployment/#2-set-environment-variables","title":"2. Set Environment Variables","text":"<pre><code>heroku config:set PROVIDER=YFINANCE\nheroku config:set DEBUG=False\nheroku config:set DATABASE_URL=sqlite:///./app.db\n</code></pre>"},{"location":"deployment/#3-deploy","title":"3. Deploy","text":"<pre><code>git push heroku main\n</code></pre>"},{"location":"deployment/#option-3-aws-ec2","title":"Option 3: AWS EC2","text":""},{"location":"deployment/#1-launch-ec2-instance","title":"1. Launch EC2 Instance","text":"<ul> <li>AMI: Ubuntu 20.04 LTS</li> <li>Instance Type: t2.micro (free tier)</li> <li>Security Group: Allow SSH (22) and HTTP (80), HTTPS (443)</li> </ul>"},{"location":"deployment/#2-connect-and-setup","title":"2. Connect and Setup","text":"<pre><code># Connect to instance\nssh -i your-key.pem ubuntu@your-instance-ip\n\n# Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Python\nsudo apt install python3 python3-pip python3-venv -y\n\n# Install Git\nsudo apt install git -y\n</code></pre>"},{"location":"deployment/#3-deploy-application","title":"3. Deploy Application","text":"<pre><code># Clone repository\ngit clone https://github.com/OMCHOKSI108/FastAPI-Stock-data-.git\ncd FastAPI-Stock-data-\n\n# Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Set environment variables\nexport PROVIDER=YFINANCE\nexport DEBUG=False\nexport DATABASE_URL=sqlite:///./app.db\n</code></pre>"},{"location":"deployment/#4-run-with-gunicorn","title":"4. Run with Gunicorn","text":"<pre><code># Install Gunicorn\npip install gunicorn\n\n# Run application\ngunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000\n</code></pre>"},{"location":"deployment/#5-setup-nginx-optional","title":"5. Setup Nginx (Optional)","text":"<pre><code># Install Nginx\nsudo apt install nginx -y\n\n# Create Nginx config\nsudo nano /etc/nginx/sites-available/fastapi\n\n# Add this content:\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n</code></pre>"},{"location":"deployment/#option-4-docker-deployment","title":"Option 4: Docker Deployment","text":""},{"location":"deployment/#1-create-dockerfile","title":"1. Create Dockerfile","text":"<pre><code>FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"deployment/#2-create-docker-composeyml","title":"2. Create docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  fastapi:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - PROVIDER=YFINANCE\n      - DEBUG=False\n      - DATABASE_URL=sqlite:///./app.db\n    volumes:\n      - ./app.db:/app/app.db\n</code></pre>"},{"location":"deployment/#3-deploy-with-docker","title":"3. Deploy with Docker","text":"<pre><code># Build and run\ndocker-compose up -d\n\n# Or with Docker directly\ndocker build -t fastapi-stock-data .\ndocker run -p 8000:8000 -e PROVIDER=YFINANCE fastapi-stock-data\n</code></pre>"},{"location":"deployment/#environment-configuration_1","title":"Environment Configuration","text":""},{"location":"deployment/#environment-variables_1","title":"Environment Variables","text":"Variable Description Default Required <code>PROVIDER</code> Data provider (YFINANCE, ALPHA_VANTAGE, etc.) YFINANCE No <code>DEBUG</code> Debug mode False No <code>DATABASE_URL</code> Database connection string sqlite:///./app.db No <code>BINANCE_API_KEY</code> Binance API key - No <code>BINANCE_API_SECRET</code> Binance API secret - No"},{"location":"deployment/#provider-configuration","title":"Provider Configuration","text":"<pre><code># app/main.py\nPROVIDER = os.getenv(\"PROVIDER\", \"YFINANCE\").upper()\n\nPROVIDER_MAP = {\n    \"YFINANCE\": yfinance_provider,\n    \"ALPHA_VANTAGE\": alphavantage_provider,\n    \"BINANCE\": binance_provider,\n}\n</code></pre>"},{"location":"deployment/#database-setup","title":"Database Setup","text":""},{"location":"deployment/#sqlite-development","title":"SQLite (Development)","text":"<pre><code># Default configuration\nDATABASE_URL=sqlite:///./app.db\n</code></pre>"},{"location":"deployment/#postgresql-production","title":"PostgreSQL (Production)","text":"<pre><code># Install PostgreSQL\npip install psycopg2-binary\n\n# Set environment variable\nDATABASE_URL=postgresql://user:password@localhost/dbname\n</code></pre>"},{"location":"deployment/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"deployment/#api-keys","title":"API Keys","text":"<ul> <li>Store API keys in environment variables</li> <li>Never commit keys to version control</li> <li>Use different keys for development/production</li> </ul>"},{"location":"deployment/#https","title":"HTTPS","text":"<ul> <li>Always use HTTPS in production</li> <li>Render.com provides automatic HTTPS</li> <li>For custom domains, configure SSL certificates</li> </ul>"},{"location":"deployment/#rate-limiting_1","title":"Rate Limiting","text":"<pre><code># Add rate limiting (optional)\nfrom slowapi import Limiter, _rate_limit_exceeded_handler\nfrom slowapi.util import get_remote_address\nfrom slowapi.middleware import SlowAPIMiddleware\n\nlimiter = Limiter(key_func=get_remote_address)\napp.state.limiter = limiter\napp.add_exception_handler(_rate_limit_exceeded_handler)\napp.add_middleware(SlowAPIMiddleware)\n</code></pre>"},{"location":"deployment/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"deployment/#application-logs","title":"Application Logs","text":"<pre><code># app/main.py\nimport logging\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\nlogger = logging.getLogger(__name__)\n</code></pre>"},{"location":"deployment/#health-checks_1","title":"Health Checks","text":"<pre><code># Health endpoint\n@app.get(\"/health\")\nasync def health():\n    return {\n        \"status\": \"ok\",\n        \"timestamp\": datetime.utcnow().isoformat(),\n        \"version\": \"1.0.0\"\n    }\n</code></pre>"},{"location":"deployment/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Middleware for request timing\n@app.middleware(\"http\")\nasync def add_process_time_header(request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre>"},{"location":"deployment/#cicd-pipeline_1","title":"CI/CD Pipeline","text":""},{"location":"deployment/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Render\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run tests\n      run: |\n        python -m pytest\n\n    - name: Deploy to Render\n      run: |\n        curl -X POST https://api.render.com/deploy/srv-xxxxx\n        -H \"Authorization: Bearer ${{ secrets.RENDER_API_KEY }}\"\n</code></pre>"},{"location":"deployment/#troubleshooting_1","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"deployment/#common-issues","title":"Common Issues","text":""},{"location":"deployment/#1-port-binding","title":"1. Port Binding","text":"<p>Error: <code>Port already in use</code></p> <p>Solution: <pre><code># Find process using port\nlsof -i :8000\n\n# Kill process\nkill -9 &lt;PID&gt;\n\n# Or use different port\nuvicorn app.main:app --port 8001\n</code></pre></p>"},{"location":"deployment/#2-import-errors","title":"2. Import Errors","text":"<p>Error: <code>ModuleNotFoundError</code></p> <p>Solution: <pre><code># Install missing dependencies\npip install -r requirements.txt\n\n# Check Python path\npython -c \"import sys; print(sys.path)\"\n</code></pre></p>"},{"location":"deployment/#3-database-connection","title":"3. Database Connection","text":"<p>Error: <code>Database connection failed</code></p> <p>Solution: <pre><code># Check DATABASE_URL\necho $DATABASE_URL\n\n# Test connection\npython -c \"from sqlalchemy import create_engine; engine = create_engine('$DATABASE_URL'); engine.connect()\"\n</code></pre></p>"},{"location":"deployment/#4-memory-issues","title":"4. Memory Issues","text":"<p>Error: <code>Memory limit exceeded</code></p> <p>Solution: <pre><code># Increase memory limit (Render)\n# Go to Render dashboard &gt; Service &gt; Settings &gt; Memory\n\n# Or optimize code\n# Use streaming responses for large data\n# Implement pagination\n</code></pre></p>"},{"location":"deployment/#debug-commands","title":"Debug Commands","text":"<pre><code># Check running processes\nps aux | grep uvicorn\n\n# Check logs\ntail -f /var/log/application.log\n\n# Test API endpoints\ncurl -v http://localhost:8000/health\n\n# Check Python version\npython --version\n\n# List installed packages\npip list\n</code></pre>"},{"location":"deployment/#support","title":"Support","text":"<ul> <li>GitHub Issues: Report bugs</li> <li>Documentation: MkDocs site</li> <li>API Status: Check <code>/health</code> endpoint</li> </ul>"},{"location":"deployment/#updates-maintenance","title":"\ud83d\udd04 Updates &amp; Maintenance","text":""},{"location":"deployment/#regular-maintenance","title":"Regular Maintenance","text":"<ol> <li> <p>Update Dependencies <pre><code>pip install --upgrade -r requirements.txt\n</code></pre></p> </li> <li> <p>Database Backup <pre><code>cp app.db app.db.backup\n</code></pre></p> </li> <li> <p>Log Rotation <pre><code># Configure log rotation in production\n</code></pre></p> </li> <li> <p>Security Updates <pre><code># Regularly update base images and dependencies\npip install --upgrade pip\npip install --upgrade -r requirements.txt\n</code></pre></p> </li> </ol>"},{"location":"deployment/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Horizontal Scaling: Use load balancer with multiple instances</li> <li>Database Scaling: Migrate from SQLite to PostgreSQL</li> <li>Caching: Implement Redis for frequently accessed data</li> <li>CDN: Use CDN for static assets (if any)</li> </ul> <p>This deployment guide covers all major deployment scenarios and best practices for production use.</p>"},{"location":"examples/","title":"FastStockAPI Code Examples","text":"<p>This comprehensive guide provides practical code examples for using FastStockAPI in various programming languages and frameworks. All examples use the current API structure and include error handling, best practices, and real-world use cases.</p>"},{"location":"examples/#python-examples","title":"Python Examples","text":""},{"location":"examples/#basic-setup","title":"Basic Setup","text":"<pre><code>import requests\nimport json\nimport time\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\n\n# Configuration\nBASE_URL = \"http://localhost:8000\"  # Change to your deployed URL\nREQUEST_TIMEOUT = 30\nRATE_LIMIT_DELAY = 1  # seconds between requests\n\nclass FastStockAPI:\n    def __init__(self, base_url: str = BASE_URL):\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.last_request_time = 0\n\n    def _rate_limit_wait(self):\n        \"\"\"Implement rate limiting\"\"\"\n        elapsed = time.time() - self.last_request_time\n        if elapsed &lt; RATE_LIMIT_DELAY:\n            time.sleep(RATE_LIMIT_DELAY - elapsed)\n        self.last_request_time = time.time()\n\n    def _make_request(self, endpoint: str, params: Dict = None) -&gt; Optional[Dict]:\n        \"\"\"Make API request with error handling\"\"\"\n        self._rate_limit_wait()\n\n        try:\n            url = f\"{self.base_url}{endpoint}\"\n            response = self.session.get(url, params=params, timeout=REQUEST_TIMEOUT)\n\n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f\"API Error: {response.status_code} - {response.text}\")\n                return None\n\n        except requests.exceptions.RequestException as e:\n            print(f\"Request failed: {e}\")\n            return None\n\n# Initialize API client\napi = FastStockAPI()\n</code></pre>"},{"location":"examples/#stock-market-examples","title":"Stock Market Examples","text":""},{"location":"examples/#1-get-individual-stock-prices","title":"1. Get Individual Stock Prices","text":"<pre><code>def get_stock_price(symbol: str, market: str = \"IND\") -&gt; Optional[Dict]:\n    \"\"\"Get current price for a specific stock\"\"\"\n    endpoint = f\"/stocks/{market}/{symbol}\"\n    data = api._make_request(endpoint)\n\n    if data:\n        print(f\" {data['symbol']}: \u20b9{data['lastPrice']}\")\n        print(f\"   Change: {data['pChange']}% (\u20b9{data['change']})\")\n        print(f\"   Company: {data['companyName']}\")\n        return data\n    return None\n\n# Usage\nreliance_data = get_stock_price(\"RELIANCE\")\napple_data = get_stock_price(\"AAPL\", \"US\")\n</code></pre>"},{"location":"examples/#2-get-historical-stock-data","title":"2. Get Historical Stock Data","text":"<pre><code>def get_historical_stock_data(symbol: str, market: str = \"IND\", period: str = \"1mo\") -&gt; Optional[Dict]:\n    \"\"\"Get historical price data for a stock\"\"\"\n    endpoint = f\"/stocks/historical/{market}/{symbol}\"\n    params = {\"period\": period}\n    data = api._make_request(endpoint, params)\n\n    if data and 'data' in data:\n        prices = data['data']\n        print(f\" {symbol} Historical Data ({len(prices)} points)\")\n        print(f\"   Period: {data['period']}\")\n\n        if prices:\n            latest = prices[-1]\n            oldest = prices[0]\n            change = ((latest['close'] - oldest['close']) / oldest['close']) * 100\n            print(\".2f\")\n            print(\".2f\")\n\n        return data\n    return None\n\n# Usage\nhistorical_data = get_historical_stock_data(\"TCS\", \"IND\", \"3mo\")\n</code></pre>"},{"location":"examples/#3-get-market-index-data","title":"3. Get Market Index Data","text":"<pre><code>def get_market_index(symbol: str, market: str = \"BSE\") -&gt; Optional[Dict]:\n    \"\"\"Get market index data\"\"\"\n    endpoint = f\"/stocks/index/{market}/{symbol}\"\n    data = api._make_request(endpoint)\n\n    if data:\n        print(f\" {data['symbol']}: {data['lastPrice']}\")\n        print(f\"   Change: {data['pChange']}% (\u20b9{data['change']})\")\n        return data\n    return None\n\n# Usage\nnifty_data = get_market_index(\"SENSEX\", \"BSE\")\ndow_data = get_market_index(\"DJI\", \"US\")\n</code></pre>"},{"location":"examples/#4-portfolio-tracking","title":"4. Portfolio Tracking","text":"<pre><code>class PortfolioTracker:\n    def __init__(self):\n        self.api = FastStockAPI()\n        self.portfolio = {}\n\n    def add_stock(self, symbol: str, quantity: int, market: str = \"IND\"):\n        \"\"\"Add stock to portfolio\"\"\"\n        self.portfolio[symbol] = {\n            'quantity': quantity,\n            'market': market,\n            'added_at': datetime.now()\n        }\n\n    def get_portfolio_value(self) -&gt; Dict:\n        \"\"\"Calculate current portfolio value\"\"\"\n        total_value = 0\n        positions = []\n\n        for symbol, position in self.portfolio.items():\n            try:\n                if position['market'] == 'IND':\n                    data = self.api._make_request(f\"/stocks/IND/{symbol}\")\n                elif position['market'] == 'US':\n                    data = self.api._make_request(f\"/stocks/US/{symbol}\")\n\n                if data:\n                    value = data['lastPrice'] * position['quantity']\n                    total_value += value\n\n                    positions.append({\n                        'symbol': symbol,\n                        'quantity': position['quantity'],\n                        'price': data['lastPrice'],\n                        'value': value,\n                        'change': data['pChange']\n                    })\n\n            except Exception as e:\n                print(f\"Error getting data for {symbol}: {e}\")\n\n        return {\n            'total_value': total_value,\n            'positions': positions,\n            'timestamp': datetime.now()\n        }\n\n    def print_portfolio_summary(self):\n        \"\"\"Print portfolio summary\"\"\"\n        portfolio_data = self.get_portfolio_value()\n\n        print(f\"\\n Portfolio Summary - {portfolio_data['timestamp']}\")\n        print(f\"\ud83d\udcb0 Total Value: \u20b9{portfolio_data['total_value']:,.2f}\")\n        print(\"-\" * 50)\n\n        for position in portfolio_data['positions']:\n            change_symbol = \"\" if position['change'] &gt;= 0 else \"\"\n            print(f\"{position['symbol']}: {position['quantity']} shares @ \u20b9{position['price']}\")\n            print(f\"  Value: \u20b9{position['value']:,.2f} {change_symbol} {position['change']}%\")\n\n# Usage\ntracker = PortfolioTracker()\ntracker.add_stock(\"RELIANCE\", 100)\ntracker.add_stock(\"TCS\", 50)\ntracker.add_stock(\"AAPL\", 10, \"US\")\ntracker.print_portfolio_summary()\n</code></pre>"},{"location":"examples/#cryptocurrency-examples","title":"Cryptocurrency Examples","text":""},{"location":"examples/#1-get-crypto-prices","title":"1. Get Crypto Prices","text":"<pre><code>def get_crypto_price(symbol: str) -&gt; Optional[Dict]:\n    \"\"\"Get current cryptocurrency price\"\"\"\n    endpoint = f\"/crypto/quote/{symbol}\"\n    data = api._make_request(endpoint)\n\n    if data:\n        print(f\" {data['symbol']} ({data['name']}): ${data['price']:,.2f}\")\n        print(f\"   24h Change: {data['changePercent24h']}%\")\n        print(f\"   Market Cap: ${data['marketCap']:,.0f}\")\n        print(f\"   Volume 24h: ${data['volume24h']:,.0f}\")\n        return data\n    return None\n\ndef get_multiple_crypto_prices(symbols: List[str]) -&gt; List[Dict]:\n    \"\"\"Get multiple cryptocurrency prices\"\"\"\n    results = []\n    for symbol in symbols:\n        data = get_crypto_price(symbol)\n        if data:\n            results.append(data)\n        time.sleep(0.5)  # Rate limiting\n    return results\n\n# Usage\nbtc_data = get_crypto_price(\"BTC\")\ncrypto_portfolio = get_multiple_crypto_prices([\"BTC\", \"ETH\", \"ADA\", \"SOL\"])\n</code></pre>"},{"location":"examples/#2-crypto-historical-analysis","title":"2. Crypto Historical Analysis","text":"<pre><code>def analyze_crypto_performance(symbol: str, period: str = \"1mo\") -&gt; Optional[Dict]:\n    \"\"\"Analyze cryptocurrency performance over a period\"\"\"\n    endpoint = f\"/crypto/historical/{symbol}\"\n    params = {\"period\": period}\n    data = api._make_request(endpoint, params)\n\n    if data and 'data' in data:\n        prices = data['data']\n        if len(prices) &lt; 2:\n            return None\n\n        # Calculate performance metrics\n        start_price = prices[0]['close']\n        end_price = prices[-1]['close']\n        total_return = ((end_price - start_price) / start_price) * 100\n\n        # Calculate volatility (standard deviation of returns)\n        returns = []\n        for i in range(1, len(prices)):\n            daily_return = ((prices[i]['close'] - prices[i-1]['close']) / prices[i-1]['close']) * 100\n            returns.append(daily_return)\n\n        volatility = sum((r - sum(returns)/len(returns))**2 for r in returns) / len(returns)\n        volatility = volatility ** 0.5\n\n        # Find highest and lowest prices\n        high_price = max(p['high'] for p in prices)\n        low_price = min(p['low'] for p in prices)\n\n        analysis = {\n            'symbol': symbol,\n            'period': period,\n            'start_price': start_price,\n            'end_price': end_price,\n            'total_return': total_return,\n            'volatility': volatility,\n            'highest_price': high_price,\n            'lowest_price': low_price,\n            'data_points': len(prices)\n        }\n\n        print(f\" {symbol} Performance Analysis ({period})\")\n        print(f\"   Total Return: {total_return:.2f}%\")\n        print(f\"   Volatility: {volatility:.2f}%\")\n        print(f\"   Price Range: ${low_price:.2f} - ${high_price:.2f}\")\n\n        return analysis\n    return None\n\n# Usage\nbtc_analysis = analyze_crypto_performance(\"BTC\", \"3mo\")\neth_analysis = analyze_crypto_performance(\"ETH\", \"1mo\")\n</code></pre>"},{"location":"examples/#options-trading-examples","title":"Options Trading Examples","text":""},{"location":"examples/#1-options-chain-analysis","title":"1. Options Chain Analysis","text":"<pre><code>def analyze_options_chain(index: str, expiry: str, num_strikes: int = 10) -&gt; Optional[Dict]:\n    \"\"\"Analyze complete options chain\"\"\"\n    endpoint = \"/options/direct-data\"\n    params = {\n        \"index\": index,\n        \"expiry\": expiry,\n        \"num_strikes\": num_strikes\n    }\n    data = api._make_request(endpoint, params)\n\n    if data:\n        print(f\" {index} Options Chain - Expiry: {data['expiry']}\")\n        print(f\"   Underlying: \u20b9{data['underlying_value']}\")\n        print(f\"   Strikes Available: {len(data['options'])}\")\n\n        # Analyze call/put ratio\n        total_calls = sum(1 for opt in data['options'] if 'CE' in opt and opt['CE'].get('lastPrice'))\n        total_puts = sum(1 for opt in data['options'] if 'PE' in opt and opt['PE'].get('lastPrice'))\n\n        print(f\"   Calls: {total_calls}, Puts: {total_puts}\")\n\n        # Find ATM strike\n        atm_strike = min(data['options'],\n                        key=lambda x: abs(x['strikePrice'] - data['underlying_value']))\n        print(f\"   ATM Strike: \u20b9{atm_strike['strikePrice']}\")\n\n        return data\n    return None\n\n# Usage\nnifty_options = analyze_options_chain(\"NIFTY\", \"160925\", 15)\n</code></pre>"},{"location":"examples/#2-strike-specific-analysis","title":"2. Strike-Specific Analysis","text":"<pre><code>def analyze_specific_strike(index: str, strike: float, expiry: str) -&gt; Optional[Dict]:\n    \"\"\"Analyze specific strike price\"\"\"\n    endpoint = \"/options/strike-data\"\n    params = {\n        \"index\": index,\n        \"strike\": strike,\n        \"expiry\": expiry,\n        \"option_type\": \"BOTH\"\n    }\n    data = api._make_request(endpoint, params)\n\n    if data:\n        print(f\" {index} {strike} Strike Analysis\")\n        print(f\"   Expiry: {data['expiry']}\")\n        print(f\"   Underlying: \u20b9{data['underlying_value']}\")\n\n        if data.get('ce_data'):\n            ce = data['ce_data']\n            print(f\"   CE: \u20b9{ce.get('lastPrice', 'N/A')} (OI: {ce.get('openInterest', 'N/A')})\")\n\n        if data.get('pe_data'):\n            pe = data['pe_data']\n            print(f\"   PE: \u20b9{pe.get('lastPrice', 'N/A')} (OI: {pe.get('openInterest', 'N/A')})\")\n\n        return data\n    return None\n\n# Usage\nstrike_analysis = analyze_specific_strike(\"NIFTY\", 24000, \"160925\")\n</code></pre>"},{"location":"examples/#3-fetch-options-data-json-response","title":"3. Fetch Options Data (JSON Response)","text":"<pre><code>def fetch_options_json(index: str, num_strikes: int = 25) -&gt; Optional[Dict]:\n    \"\"\"Fetch options data and return JSON directly (no CSV saving)\"\"\"\n    import requests\n\n    url = f\"{BASE_URL}/options/fetch/json\"\n    payload = {\n        \"index\": index,\n        \"num_strikes\": num_strikes\n    }\n\n    try:\n        response = requests.post(url, json=payload)\n        if response.status_code == 200:\n            data = response.json()\n            print(f\" Fetched {len(data['options'])} strikes for {data['index']} expiry {data['expiry']}\")\n            print(f\"   Underlying: \u20b9{data['underlying_value']}\")\n            return data\n        else:\n            print(f\"Error: {response.status_code} - {response.text}\")\n            return None\n    except Exception as e:\n        print(f\"Request failed: {e}\")\n        return None\n\ndef fetch_options_expiry_json(index: str, expiry: str, num_strikes: int = 25) -&gt; Optional[Dict]:\n    \"\"\"Fetch options data for specific expiry and return JSON directly\"\"\"\n    import requests\n\n    url = f\"{BASE_URL}/options/fetch/expiry/json\"\n    payload = {\n        \"index\": index,\n        \"expiry\": expiry,\n        \"num_strikes\": num_strikes\n    }\n\n    try:\n        response = requests.post(url, json=payload)\n        if response.status_code == 200:\n            data = response.json()\n            print(f\" Fetched {len(data['options'])} strikes for {data['index']} expiry {data['expiry']}\")\n            print(f\"   Underlying: \u20b9{data['underlying_value']}\")\n            return data\n        else:\n            print(f\"Error: {response.status_code} - {response.text}\")\n            return None\n    except Exception as e:\n        print(f\"Request failed: {e}\")\n        return None\n\n# Usage\n# Fetch nearest expiry options\nnifty_options = fetch_options_json(\"NIFTY\", 25)\n\n# Fetch specific expiry options\nnifty_expiry_options = fetch_options_expiry_json(\"NIFTY\", \"160925\", 25)\n</code></pre>"},{"location":"examples/#4-options-analytics-dashboard","title":"4. Options Analytics Dashboard","text":"<pre><code>def create_options_analytics_dashboard(index: str, expiry: str) -&gt; Dict:\n    \"\"\"Create comprehensive options analytics dashboard\"\"\"\n    dashboard = {\n        'index': index,\n        'expiry': expiry,\n        'timestamp': datetime.now(),\n        'analytics': {}\n    }\n\n    # Get PCR\n    pcr_data = api._make_request(\"/analytics/pcr\", {\"index\": index, \"expiry\": expiry})\n    if pcr_data:\n        dashboard['analytics']['pcr'] = pcr_data\n        print(f\" PCR: {pcr_data['pcr']:.2f}\")\n\n    # Get Max Pain\n    max_pain_data = api._make_request(\"/analytics/max-pain\", {\"index\": index, \"expiry\": expiry})\n    if max_pain_data:\n        dashboard['analytics']['max_pain'] = max_pain_data\n        print(f\" Max Pain: \u20b9{max_pain_data['max_pain_strike']}\")\n\n    # Get Top OI\n    top_oi_data = api._make_request(\"/analytics/top-oi\", {\"index\": index, \"expiry\": expiry, \"top_n\": 5})\n    if top_oi_data:\n        dashboard['analytics']['top_oi'] = top_oi_data\n        print(\" Top OI Strikes:\")\n        for strike in top_oi_data.get('top_strikes', []):\n            print(f\"   \u20b9{strike['strike']}: {strike['total_oi']:,} contracts\")\n\n    # Get complete summary\n    summary_data = api._make_request(\"/analytics/summary\", {\"index\": index, \"expiry\": expiry})\n    if summary_data:\n        dashboard['analytics']['summary'] = summary_data\n\n    return dashboard\n\n# Usage\ndashboard = create_options_analytics_dashboard(\"NIFTY\", \"160925\")\n</code></pre>"},{"location":"examples/#forex-examples","title":"Forex Examples","text":""},{"location":"examples/#1-currency-exchange-rates","title":"1. Currency Exchange Rates","text":"<pre><code>def get_exchange_rate(from_currency: str, to_currency: str) -&gt; Optional[Dict]:\n    \"\"\"Get currency exchange rate\"\"\"\n    endpoint = \"/forex/quote\"\n    params = {\"from\": from_currency, \"to\": to_currency}\n    data = api._make_request(endpoint, params)\n\n    if data:\n        print(f\" {from_currency} to {to_currency}: {data.get('rate', 'N/A')}\")\n        return data\n    return None\n\ndef get_multiple_exchange_rates(base_currency: str, target_currencies: List[str]) -&gt; Optional[Dict]:\n    \"\"\"Get multiple exchange rates\"\"\"\n    endpoint = \"/forex/quotes\"\n    params = {\"base\": base_currency, \"symbols\": \",\".join(target_currencies)}\n    data = api._make_request(endpoint, params)\n\n    if data:\n        print(f\" {base_currency} Exchange Rates:\")\n        for currency, rate in data.get('rates', {}).items():\n            print(f\"   {base_currency}/{currency}: {rate}\")\n        return data\n    return None\n\n# Usage\nusd_inr = get_exchange_rate(\"USD\", \"INR\")\nmultiple_rates = get_multiple_exchange_rates(\"USD\", [\"EUR\", \"GBP\", \"JPY\", \"CAD\"])\n</code></pre>"},{"location":"examples/#javascript-examples","title":"JavaScript Examples","text":""},{"location":"examples/#nodejs-api-client","title":"Node.js API Client","text":"<pre><code>const axios = require('axios');\n\nclass FastStockAPIClient {\n    constructor(baseURL = 'http://localhost:8000') {\n        this.baseURL = baseURL;\n        this.client = axios.create({\n            baseURL: this.baseURL,\n            timeout: 30000,\n        });\n\n        // Add response interceptor for error handling\n        this.client.interceptors.response.use(\n            response =&gt; response,\n            error =&gt; {\n                console.error('API Error:', error.response?.status, error.response?.data);\n                return Promise.reject(error);\n            }\n        );\n    }\n\n    async getStockPrice(symbol, market = 'IND') {\n        try {\n            const response = await this.client.get(`/stocks/${market}/${symbol}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching ${symbol}:`, error.message);\n            return null;\n        }\n    }\n\n    async getCryptoPrice(symbol) {\n        try {\n            const response = await this.client.get(`/crypto/quote/${symbol}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching ${symbol}:`, error.message);\n            return null;\n        }\n    }\n\n    async getOptionsAnalytics(index, expiry) {\n        try {\n            const [pcrRes, maxPainRes] = await Promise.all([\n                this.client.get('/analytics/pcr', { params: { index, expiry } }),\n                this.client.get('/analytics/max-pain', { params: { index, expiry } })\n            ]);\n\n            return {\n                pcr: pcrRes.data,\n                maxPain: maxPainRes.data\n            };\n        } catch (error) {\n            console.error('Error fetching analytics:', error.message);\n            return null;\n        }\n    }\n\n    async getPortfolioValue(stocks) {\n        const portfolio = [];\n        let totalValue = 0;\n\n        for (const stock of stocks) {\n            const data = await this.getStockPrice(stock.symbol, stock.market);\n            if (data) {\n                const value = data.lastPrice * stock.quantity;\n                totalValue += value;\n                portfolio.push({\n                    ...stock,\n                    currentPrice: data.lastPrice,\n                    value: value,\n                    change: data.pChange\n                });\n            }\n        }\n\n        return {\n            totalValue,\n            positions: portfolio,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n\n// Usage\nasync function main() {\n    const api = new FastStockAPIClient();\n\n    // Get individual prices\n    const reliance = await api.getStockPrice('RELIANCE');\n    const btc = await api.getCryptoPrice('BTC');\n\n    console.log('RELIANCE:', reliance);\n    console.log('BTC:', btc);\n\n    // Get analytics\n    const analytics = await api.getOptionsAnalytics('NIFTY', '160925');\n    console.log('Analytics:', analytics);\n\n    // Portfolio tracking\n    const portfolio = await api.getPortfolioValue([\n        { symbol: 'RELIANCE', quantity: 100, market: 'IND' },\n        { symbol: 'TCS', quantity: 50, market: 'IND' },\n        { symbol: 'AAPL', quantity: 10, market: 'US' }\n    ]);\n\n    console.log('Portfolio Value:', portfolio.totalValue);\n}\n\nmain().catch(console.error);\n</code></pre>"},{"location":"examples/#browser-javascript-frontend-integration","title":"Browser JavaScript (Frontend Integration)","text":"<pre><code>// api-client.js\nclass FastStockAPI {\n    constructor(baseURL = 'http://localhost:8000') {\n        this.baseURL = baseURL;\n    }\n\n    async makeRequest(endpoint, params = {}) {\n        const url = new URL(`${this.baseURL}${endpoint}`);\n\n        // Add query parameters\n        Object.keys(params).forEach(key =&gt; {\n            if (params[key] !== null &amp;&amp; params[key] !== undefined) {\n                url.searchParams.append(key, params[key]);\n            }\n        });\n\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('API request failed:', error);\n            throw error;\n        }\n    }\n\n    // Stock methods\n    async getStockPrice(symbol, market = 'IND') {\n        return this.makeRequest(`/stocks/${market}/${symbol}`);\n    }\n\n    async getHistoricalStockData(symbol, market = 'IND', period = '1mo') {\n        return this.makeRequest(`/stocks/historical/${market}/${symbol}`, { period });\n    }\n\n    // Crypto methods\n    async getCryptoPrice(symbol) {\n        return this.makeRequest(`/crypto/quote/${symbol}`);\n    }\n\n    async getHistoricalCryptoData(symbol, period = '1mo') {\n        return this.makeRequest(`/crypto/historical/${symbol}`, { period });\n    }\n\n    // Options methods\n    async getOptionsChain(index, expiry, numStrikes = 10) {\n        return this.makeRequest('/options/direct-data', {\n            index,\n            expiry,\n            num_strikes: numStrikes\n        });\n    }\n\n    async getOptionsAnalytics(index, expiry) {\n        const [pcr, maxPain, topOi] = await Promise.all([\n            this.makeRequest('/analytics/pcr', { index, expiry }),\n            this.makeRequest('/analytics/max-pain', { index, expiry }),\n            this.makeRequest('/analytics/top-oi', { index, expiry, top_n: 5 })\n        ]);\n\n        return { pcr, maxPain, topOi };\n    }\n\n    // Forex methods\n    async getExchangeRate(fromCurrency, toCurrency) {\n        return this.makeRequest('/forex/quote', { from: fromCurrency, to: toCurrency });\n    }\n}\n\n// Initialize API client\nconst api = new FastStockAPI();\n\n// React component example\nfunction StockDashboard() {\n    const [stocks, setStocks] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const loadStockData = async () =&gt; {\n        setLoading(true);\n        try {\n            const [reliance, tcs, aapl] = await Promise.all([\n                api.getStockPrice('RELIANCE'),\n                api.getStockPrice('TCS'),\n                api.getStockPrice('AAPL', 'US')\n            ]);\n\n            setStocks([reliance, tcs, aapl].filter(Boolean));\n        } catch (error) {\n            console.error('Error loading stock data:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() =&gt; {\n        loadStockData();\n        // Refresh every 30 seconds\n        const interval = setInterval(loadStockData, 30000);\n        return () =&gt; clearInterval(interval);\n    }, []);\n\n    return (\n        &lt;div className=\"stock-dashboard\"&gt;\n            &lt;h2&gt;Stock Dashboard&lt;/h2&gt;\n            {loading ? (\n                &lt;p&gt;Loading...&lt;/p&gt;\n            ) : (\n                &lt;div className=\"stock-grid\"&gt;\n                    {stocks.map(stock =&gt; (\n                        &lt;div key={stock.symbol} className=\"stock-card\"&gt;\n                            &lt;h3&gt;{stock.symbol}&lt;/h3&gt;\n                            &lt;p className=\"price\"&gt;\u20b9{stock.lastPrice}&lt;/p&gt;\n                            &lt;p className={`change ${stock.pChange &gt;= 0 ? 'positive' : 'negative'}`}&gt;\n                                {stock.pChange}% ({stock.change &gt;= 0 ? '+' : ''}{stock.change})\n                            &lt;/p&gt;\n                        &lt;/div&gt;\n                    ))}\n                &lt;/div&gt;\n            )}\n        &lt;/div&gt;\n    );\n}\n\n// Vue.js component example\nconst StockDashboard = {\n    template: `\n        &lt;div class=\"stock-dashboard\"&gt;\n            &lt;h2&gt;Stock Dashboard&lt;/h2&gt;\n            &lt;div v-if=\"loading\" class=\"loading\"&gt;Loading...&lt;/div&gt;\n            &lt;div v-else class=\"stock-grid\"&gt;\n                &lt;div v-for=\"stock in stocks\" :key=\"stock.symbol\" class=\"stock-card\"&gt;\n                    &lt;h3&gt;{{ stock.symbol }}&lt;/h3&gt;\n                    &lt;p class=\"price\"&gt;\u20b9{{ stock.lastPrice }}&lt;/p&gt;\n                    &lt;p :class=\"['change', stock.pChange &gt;= 0 ? 'positive' : 'negative']\"&gt;\n                        {{ stock.pChange }}% ({{ stock.change &gt;= 0 ? '+' : '' }}{{ stock.change }})\n                    &lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    `,\n    data() {\n        return {\n            stocks: [],\n            loading: false\n        };\n    },\n    async created() {\n        await this.loadStockData();\n        // Auto-refresh every 30 seconds\n        setInterval(this.loadStockData, 30000);\n    },\n    methods: {\n        async loadStockData() {\n            this.loading = true;\n            try {\n                const [reliance, tcs] = await Promise.all([\n                    api.getStockPrice('RELIANCE'),\n                    api.getStockPrice('TCS')\n                ]);\n                this.stocks = [reliance, tcs].filter(Boolean);\n            } catch (error) {\n                console.error('Error loading stock data:', error);\n            } finally {\n                this.loading = false;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"examples/#mobile-app-examples","title":"Mobile App Examples","text":""},{"location":"examples/#react-native","title":"React Native","text":"<pre><code>import React, { useState, useEffect } from 'react';\nimport { View, Text, FlatList, StyleSheet, RefreshControl } from 'react-native';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst StockList = () =&gt; {\n    const [stocks, setStocks] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [refreshing, setRefreshing] = useState(false);\n\n    const fetchStocks = async () =&gt; {\n        setLoading(true);\n        try {\n            const stockSymbols = ['RELIANCE', 'TCS', 'HDFC', 'ICICIBANK'];\n            const promises = stockSymbols.map(symbol =&gt;\n                fetch(`${API_BASE_URL}/stocks/IND/${symbol}`)\n                    .then(res =&gt; res.json())\n            );\n\n            const results = await Promise.all(promises);\n            setStocks(results.filter(stock =&gt; stock.symbol));\n        } catch (error) {\n            console.error('Error fetching stocks:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const onRefresh = async () =&gt; {\n        setRefreshing(true);\n        await fetchStocks();\n        setRefreshing(false);\n    };\n\n    useEffect(() =&gt; {\n        fetchStocks();\n    }, []);\n\n    const renderStock = ({ item }) =&gt; (\n        &lt;View style={styles.stockCard}&gt;\n            &lt;Text style={styles.symbol}&gt;{item.symbol}&lt;/Text&gt;\n            &lt;Text style={styles.price}&gt;\u20b9{item.lastPrice}&lt;/Text&gt;\n            &lt;Text style={[\n                styles.change,\n                item.pChange &gt;= 0 ? styles.positive : styles.negative\n            ]}&gt;\n                {item.pChange}% ({item.change &gt;= 0 ? '+' : ''}{item.change})\n            &lt;/Text&gt;\n        &lt;/View&gt;\n    );\n\n    return (\n        &lt;View style={styles.container}&gt;\n            &lt;Text style={styles.title}&gt;Indian Stocks&lt;/Text&gt;\n            &lt;FlatList\n                data={stocks}\n                renderItem={renderStock}\n                keyExtractor={item =&gt; item.symbol}\n                refreshControl={\n                    &lt;RefreshControl refreshing={refreshing} onRefresh={onRefresh} /&gt;\n                }\n                ListEmptyComponent={\n                    &lt;Text style={styles.empty}&gt;No stocks loaded&lt;/Text&gt;\n                }\n            /&gt;\n        &lt;/View&gt;\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        padding: 20,\n        backgroundColor: '#f5f5f5',\n    },\n    title: {\n        fontSize: 24,\n        fontWeight: 'bold',\n        marginBottom: 20,\n        textAlign: 'center',\n    },\n    stockCard: {\n        backgroundColor: 'white',\n        padding: 15,\n        marginVertical: 5,\n        borderRadius: 8,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 4,\n        elevation: 3,\n    },\n    symbol: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        color: '#333',\n    },\n    price: {\n        fontSize: 16,\n        color: '#666',\n        marginTop: 5,\n    },\n    change: {\n        fontSize: 14,\n        marginTop: 5,\n    },\n    positive: {\n        color: '#4CAF50',\n    },\n    negative: {\n        color: '#F44336',\n    },\n    empty: {\n        textAlign: 'center',\n        fontSize: 16,\n        color: '#666',\n        marginTop: 50,\n    },\n});\n\nexport default StockList;\n</code></pre>"},{"location":"examples/#flutter-dart","title":"Flutter (Dart)","text":"<pre><code>import 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n\nvoid main() {\n    runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n    @override\n    Widget build(BuildContext context) {\n        return MaterialApp(\n            title: 'FastStockAPI Demo',\n            theme: ThemeData(primarySwatch: Colors.blue),\n            home: StockDashboard(),\n        );\n    }\n}\n\nclass StockDashboard extends StatefulWidget {\n    @override\n    _StockDashboardState createState() =&gt; _StockDashboardState();\n}\n\nclass _StockDashboardState extends State&lt;StockDashboard&gt; {\n    List&lt;dynamic&gt; stocks = [];\n    bool loading = false;\n\n    @override\n    void initState() {\n        super.initState();\n        fetchStocks();\n    }\n\n    Future&lt;void&gt; fetchStocks() async {\n        setState(() =&gt; loading = true);\n\n        try {\n            final stockSymbols = ['RELIANCE', 'TCS', 'HDFC'];\n            final futures = stockSymbols.map((symbol) =&gt;\n                http.get(Uri.parse('http://localhost:8000/stocks/IND/$symbol'))\n            );\n\n            final responses = await Future.wait(futures);\n            final results = responses\n                .where((response) =&gt; response.statusCode == 200)\n                .map((response) =&gt; json.decode(response.body))\n                .toList();\n\n            setState(() =&gt; stocks = results);\n        } catch (e) {\n            print('Error fetching stocks: $e');\n        } finally {\n            setState(() =&gt; loading = false);\n        }\n    }\n\n    @override\n    Widget build(BuildContext context) {\n        return Scaffold(\n            appBar: AppBar(\n                title: Text('Stock Dashboard'),\n                actions: [\n                    IconButton(\n                        icon: Icon(Icons.refresh),\n                        onPressed: fetchStocks,\n                    )\n                ],\n            ),\n            body: loading\n                ? Center(child: CircularProgressIndicator())\n                : ListView.builder(\n                    itemCount: stocks.length,\n                    itemBuilder: (context, index) {\n                        final stock = stocks[index];\n                        final isPositive = stock['pChange'] &gt;= 0;\n\n                        return Card(\n                            margin: EdgeInsets.all(8),\n                            child: ListTile(\n                                title: Text(\n                                    stock['symbol'],\n                                    style: TextStyle(fontWeight: FontWeight.bold),\n                                ),\n                                subtitle: Text(stock['companyName']),\n                                trailing: Column(\n                                    crossAxisAlignment: CrossAxisAlignment.end,\n                                    children: [\n                                        Text(\n                                            '\u20b9${stock['lastPrice']}',\n                                            style: TextStyle(\n                                                fontSize: 18,\n                                                fontWeight: FontWeight.bold,\n                                            ),\n                                        ),\n                                        Text(\n                                            '${stock['pChange']}% (${stock['change'] &gt;= 0 ? '+' : ''}${stock['change']})',\n                                            style: TextStyle(\n                                                color: isPositive ? Colors.green : Colors.red,\n                                                fontWeight: FontWeight.w500,\n                                            ),\n                                        ),\n                                    ],\n                                ),\n                            ),\n                        );\n                    },\n                ),\n        );\n    }\n}\n</code></pre>"},{"location":"examples/#desktop-application-examples","title":"Desktop Application Examples","text":""},{"location":"examples/#electron-javascript","title":"Electron (JavaScript)","text":"<pre><code>// main.js\nconst { app, BrowserWindow, ipcMain } = require('electron');\nconst axios = require('axios');\n\nlet mainWindow;\n\nfunction createWindow() {\n    mainWindow = new BrowserWindow({\n        width: 1200,\n        height: 800,\n        webPreferences: {\n            nodeIntegration: true,\n            contextIsolation: false,\n        },\n    });\n\n    mainWindow.loadFile('index.html');\n}\n\napp.whenReady().then(createWindow);\n\n// API handlers\nipcMain.handle('get-stock-price', async (event, symbol, market = 'IND') =&gt; {\n    try {\n        const response = await axios.get(`http://localhost:8000/stocks/${market}/${symbol}`);\n        return response.data;\n    } catch (error) {\n        throw new Error(`Failed to fetch ${symbol}: ${error.message}`);\n    }\n});\n\nipcMain.handle('get-portfolio-value', async (event, stocks) =&gt; {\n    try {\n        const promises = stocks.map(stock =&gt;\n            axios.get(`http://localhost:8000/stocks/${stock.market}/${stock.symbol}`)\n        );\n\n        const responses = await Promise.all(promises);\n        const portfolio = responses.map((response, index) =&gt; ({\n            ...stocks[index],\n            ...response.data,\n            value: response.data.lastPrice * stocks[index].quantity\n        }));\n\n        const totalValue = portfolio.reduce((sum, stock) =&gt; sum + stock.value, 0);\n\n        return { portfolio, totalValue };\n    } catch (error) {\n        throw new Error(`Failed to fetch portfolio: ${error.message}`);\n    }\n});\n</code></pre> <pre><code>&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;FastStockAPI Desktop&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .stock-card { border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 5px; }\n        .positive { color: green; }\n        .negative { color: red; }\n        .portfolio-summary { background: #f0f0f0; padding: 20px; border-radius: 5px; margin: 20px 0; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Stock Portfolio Tracker&lt;/h1&gt;\n\n    &lt;div class=\"portfolio-summary\"&gt;\n        &lt;h2&gt;Portfolio Summary&lt;/h2&gt;\n        &lt;p id=\"total-value\"&gt;Loading...&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"stocks-container\"&gt;\n        &lt;!-- Stock cards will be inserted here --&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        const { ipcRenderer } = require('electron');\n\n        // Sample portfolio\n        const portfolio = [\n            { symbol: 'RELIANCE', quantity: 100, market: 'IND' },\n            { symbol: 'TCS', quantity: 50, market: 'IND' },\n            { symbol: 'AAPL', quantity: 10, market: 'US' }\n        ];\n\n        async function loadPortfolio() {\n            try {\n                const result = await ipcRenderer.invoke('get-portfolio-value', portfolio);\n\n                // Update total value\n                document.getElementById('total-value').textContent =\n                    `Total Value: \u20b9${result.totalValue.toLocaleString()}`;\n\n                // Update stock cards\n                const container = document.getElementById('stocks-container');\n                container.innerHTML = result.portfolio.map(stock =&gt; `\n                    &lt;div class=\"stock-card\"&gt;\n                        &lt;h3&gt;${stock.symbol}&lt;/h3&gt;\n                        &lt;p&gt;Quantity: ${stock.quantity}&lt;/p&gt;\n                        &lt;p&gt;Price: \u20b9${stock.lastPrice}&lt;/p&gt;\n                        &lt;p class=\"${stock.pChange &gt;= 0 ? 'positive' : 'negative'}\"&gt;\n                            Change: ${stock.pChange}% (\u20b9${stock.change})\n                        &lt;/p&gt;\n                        &lt;p&gt;Value: \u20b9${stock.value.toLocaleString()}&lt;/p&gt;\n                    &lt;/div&gt;\n                `).join('');\n\n            } catch (error) {\n                console.error('Error loading portfolio:', error);\n                document.getElementById('total-value').textContent = 'Error loading portfolio';\n            }\n        }\n\n        // Load portfolio on startup\n        loadPortfolio();\n\n        // Refresh every 30 seconds\n        setInterval(loadPortfolio, 30000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/#advanced-integration-patterns","title":"Advanced Integration Patterns","text":""},{"location":"examples/#webhook-integration","title":"Webhook Integration","text":"<pre><code>from flask import Flask, request, jsonify\nimport requests\n\napp = Flask(__name__)\n\nFASTSTOCK_API_URL = \"http://localhost:8000\"\n\n@app.route('/webhook/stock-alert', methods=['POST'])\ndef stock_alert_webhook():\n    \"\"\"Handle stock price alerts\"\"\"\n    data = request.json\n\n    # Extract alert data\n    symbol = data.get('symbol')\n    threshold = data.get('threshold')\n    condition = data.get('condition')  # 'above' or 'below'\n\n    # Get current price\n    response = requests.get(f\"{FASTSTOCK_API_URL}/stocks/IND/{symbol}\")\n    current_price = response.json()['lastPrice']\n\n    # Check condition\n    if condition == 'above' and current_price &gt; threshold:\n        send_alert(f\"{symbol} is above \u20b9{threshold}: \u20b9{current_price}\")\n    elif condition == 'below' and current_price &lt; threshold:\n        send_alert(f\"{symbol} is below \u20b9{threshold}: \u20b9{current_price}\")\n\n    return jsonify({\"status\": \"processed\"})\n\ndef send_alert(message):\n    \"\"\"Send alert notification\"\"\"\n    print(f\" ALERT: {message}\")\n    # Implement your notification logic here\n    # (email, SMS, push notification, etc.)\n\nif __name__ == '__main__':\n    app.run(port=5000)\n</code></pre>"},{"location":"examples/#database-integration","title":"Database Integration","text":"<pre><code>import sqlite3\nfrom datetime import datetime\nimport requests\n\nclass StockDatabase:\n    def __init__(self, db_path='stocks.db'):\n        self.db_path = db_path\n        self.init_db()\n\n    def init_db(self):\n        \"\"\"Initialize database tables\"\"\"\n        with sqlite3.connect(self.db_path) as conn:\n            conn.execute('''\n                CREATE TABLE IF NOT EXISTS stocks (\n                    symbol TEXT PRIMARY KEY,\n                    name TEXT,\n                    price REAL,\n                    change REAL,\n                    change_percent REAL,\n                    last_updated TEXT\n                )\n            ''')\n\n            conn.execute('''\n                CREATE TABLE IF NOT EXISTS price_history (\n                    id INTEGER PRIMARY KEY,\n                    symbol TEXT,\n                    price REAL,\n                    timestamp TEXT,\n                    FOREIGN KEY (symbol) REFERENCES stocks(symbol)\n                )\n            ''')\n\n    def update_stock_price(self, symbol):\n        \"\"\"Update stock price in database\"\"\"\n        # Get current price from API\n        response = requests.get(f\"http://localhost:8000/stocks/IND/{symbol}\")\n        data = response.json()\n\n        with sqlite3.connect(self.db_path) as conn:\n            # Update current price\n            conn.execute('''\n                INSERT OR REPLACE INTO stocks\n                (symbol, name, price, change, change_percent, last_updated)\n                VALUES (?, ?, ?, ?, ?, ?)\n            ''', (\n                data['symbol'],\n                data['companyName'],\n                data['lastPrice'],\n                data['change'],\n                data['pChange'],\n                datetime.now().isoformat()\n            ))\n\n            # Add to price history\n            conn.execute('''\n                INSERT INTO price_history (symbol, price, timestamp)\n                VALUES (?, ?, ?)\n            ''', (symbol, data['lastPrice'], datetime.now().isoformat()))\n\n    def get_stock_history(self, symbol, days=30):\n        \"\"\"Get price history for a stock\"\"\"\n        with sqlite3.connect(self.db_path) as conn:\n            cursor = conn.execute('''\n                SELECT price, timestamp\n                FROM price_history\n                WHERE symbol = ?\n                AND timestamp &gt;= datetime('now', '-{} days')\n                ORDER BY timestamp DESC\n            '''.format(days), (symbol,))\n\n            return cursor.fetchall()\n\n# Usage\ndb = StockDatabase()\n\n# Update stock prices\ndb.update_stock_price('RELIANCE')\ndb.update_stock_price('TCS')\n\n# Get price history\nhistory = db.get_stock_history('RELIANCE', days=7)\nfor price, timestamp in history:\n    print(f\"RELIANCE: \u20b9{price} at {timestamp}\")\n</code></pre> <p>These examples demonstrate how to integrate FastStockAPI into various applications and use cases. The API is designed to be flexible and can be adapted to different programming languages and frameworks. Remember to handle errors appropriately and implement rate limiting in production applications.</p> <pre><code>if response.status_code == 200:\n    data = response.json()\n    print(f\"Requested: {data['symbols_requested']}\")\n    print(f\"Found: {data['symbols_found']}\")\n\n    for symbol, price_data in data['data'].items():\n        print(f\"{symbol}: ${price_data['price']}\")\n    return data\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")\n    return None\n</code></pre>"},{"location":"examples/#usage-examples","title":"Usage examples","text":"<p>if name == \"main\":     print(\"=== Stock Price Example ===\")     get_stock_price(\"RELIANCE.NS\")</p> <pre><code>print(\"\\n=== Crypto Price Example ===\")\nget_crypto_price(\"BTCUSDT\")\n\nprint(\"\\n=== Multiple Crypto Prices Example ===\")\nget_multiple_crypto_prices([\"BTCUSDT\", \"ETHUSDT\", \"ADAUSDT\"])\n</code></pre> <p>``` </p>"},{"location":"examples/#advanced-python-class","title":"Advanced Python Class","text":"<p>```python import requests import json import time from typing import List, Dict, Optional from datetime import datetime, timedelta  class StockCryptoAPI:     def init(self, base_url: str = \"https://fastapi-stock-data.onrender.com\"):         self.base_url = base_url         self.session = requests.Session()      def get_stock_price(self, symbol: str) -&gt; Optional[Dict]:         \"\"\"Get stock price with error handling\"\"\"         try:             url = f\"{self.base_url}/api/v1/market/price/stock?symbol={symbol}\"             response = self.session.get(url, timeout=10)             response.raise_for_status()             return response.json()         except requests.exceptions.RequestException as e:             print(f\"Error fetching stock price for {symbol}: {e}\")             return None      def get_crypto_price(self, symbol: str) -&gt; Optional[Dict]:         \"\"\"Get crypto price with error handling\"\"\"         try:             url = f\"{self.base_url}/crypto-price/{symbol}\"             response = self.session.get(url, timeout=10)             response.raise_for_status()             return response.json()         except requests.exceptions.RequestException as e:             print(f\"Error fetching crypto price for {symbol}: {e}\")             return None      def get_crypto_stats(self, symbol: str) -&gt; Optional[Dict]:         \"\"\"Get 24h crypto statistics\"\"\"         try:             url = f\"{self.base_url}/crypto-stats/{symbol}\"             response = self.session.get(url, timeout=10)             response.raise_for_status()             return response.json()         except requests.exceptions.RequestException as e:             print(f\"Error fetching crypto stats for {symbol}: {e}\")             return None      def get_historical_data(self, symbol: str, period: str = \"1mo\", interval: str = \"1d\") -&gt; Optional[List]:         \"\"\"Get historical data\"\"\"         try:             if symbol.endswith('.NS') or symbol.startswith('^'):                 # Stock or index                 url = f\"{self.base_url}/historical/{symbol}?period={period}&amp;interval={interval}\"             else:                 # Crypto                 url = f\"{self.base_url}/crypto-historical/{symbol}?interval={interval}&amp;limit=100\"              response = self.session.get(url, timeout=15)             response.raise_for_status()             return response.json()         except requests.exceptions.RequestException as e:             print(f\"Error fetching historical data for {symbol}: {e}\")             return None      def monitor_prices(self, symbols: List[str], interval_seconds: int = 30):         \"\"\"Monitor prices continuously\"\"\"         print(f\"Starting price monitor for {symbols} (interval: {interval_seconds}s)\")         print(\"Press Ctrl+C to stop...\")          try:             while True:                 print(f\"\\n--- Price Update at {datetime.now().strftime('%H:%M:%S')} ---\")                  for symbol in symbols:                     if symbol.endswith('.NS'):                         data = self.get_stock_price(symbol)                         if data:                             print(f\"{data['symbol']}: \u20b9{data['lastPrice']} ({data['pChange']}%)\")                     else:                         data = self.get_crypto_price(symbol)                         if data:                             print(f\"{data['symbol']}: ${data['price']}\")                  time.sleep(interval_seconds)          except KeyboardInterrupt:             print(\"\\nMonitoring stopped.\") </p>"},{"location":"examples/#usage","title":"Usage","text":"<p>api = StockCryptoAPI() </p>"},{"location":"examples/#get-individual-prices","title":"Get individual prices","text":"<p>stock_data = api.get_stock_price(\"RELIANCE.NS\") crypto_data = api.get_crypto_price(\"BTCUSDT\") </p>"},{"location":"examples/#get-crypto-statistics","title":"Get crypto statistics","text":"<p>stats = api.get_crypto_stats(\"BTCUSDT\") if stats:     print(f\"BTC 24h Change: {stats['price_change_percent']}%\") </p>"},{"location":"examples/#get-historical-data","title":"Get historical data","text":"<p>history = api.get_historical_data(\"BTCUSDT\", interval=\"1d\") if history:     print(f\"Historical data points: {len(history.get('data', []))}\") </p>"},{"location":"examples/#monitor-prices","title":"Monitor prices","text":""},{"location":"examples/#apimonitor_pricesreliancens-btcusdt-ethusdt","title":"api.monitor_prices([\"RELIANCE.NS\", \"BTCUSDT\", \"ETHUSDT\"])","text":"<p>```</p>"},{"location":"examples/#async-python-with-httpx","title":"Async Python with httpx","text":"<pre><code>import httpx\nimport asyncio\nfrom typing import List, Dict, Optional\nimport json\n\nclass AsyncStockCryptoAPI:\n    def __init__(self, base_url: str = \"https://fastapi-stock-data.onrender.com\"):\n        self.base_url = base_url\n\n    async def get_stock_price(self, symbol: str) -&gt; Optional[Dict]:\n        \"\"\"Async get stock price\"\"\"\n        async with httpx.AsyncClient(timeout=10) as client:\n            try:\n                url = f\"{self.base_url}/api/v1/market/price/stock?symbol={symbol}\"\n                response = await client.get(url)\n                response.raise_for_status()\n                return response.json()\n            except Exception as e:\n                print(f\"Error: {e}\")\n                return None\n\n    async def get_multiple_crypto_prices(self, symbols: List[str]) -&gt; Optional[Dict]:\n        \"\"\"Async get multiple crypto prices\"\"\"\n        async with httpx.AsyncClient(timeout=10) as client:\n            try:\n                symbol_str = \",\".join(symbols)\n                url = f\"{self.base_url}/crypto-multiple?symbols={symbol_str}\"\n                response = await client.get(url)\n                response.raise_for_status()\n                return response.json()\n            except Exception as e:\n                print(f\"Error: {e}\")\n                return None\n\n    async def batch_requests(self, symbols: List[str]):\n        \"\"\"Batch multiple requests concurrently\"\"\"\n        async with httpx.AsyncClient(timeout=10) as client:\n            tasks = []\n\n            for symbol in symbols:\n                if symbol.endswith('.NS'):\n                    url = f\"{self.base_url}/api/v1/market/price/stock?symbol={symbol}\"\n                else:\n                    url = f\"{self.base_url}/crypto-price/{symbol}\"\n\n                tasks.append(client.get(url))\n\n            responses = await asyncio.gather(*tasks, return_exceptions=True)\n\n            results = {}\n            for i, response in enumerate(responses):\n                symbol = symbols[i]\n                if isinstance(response, Exception):\n                    results[symbol] = {\"error\": str(response)}\n                elif response.status_code == 200:\n                    results[symbol] = response.json()\n                else:\n                    results[symbol] = {\"error\": f\"HTTP {response.status_code}\"}\n\n            return results\n\n# Usage\nasync def main():\n    api = AsyncStockCryptoAPI()\n\n    # Single requests\n    stock_price = await api.get_stock_price(\"TCS.NS\")\n    print(f\"TCS: \u20b9{stock_price['lastPrice']}\")\n\n    # Multiple crypto prices\n    crypto_prices = await api.get_multiple_crypto_prices([\"BTCUSDT\", \"ETHUSDT\"])\n    print(f\"Found {crypto_prices['symbols_found']} symbols\")\n\n    # Batch requests\n    symbols = [\"RELIANCE.NS\", \"TCS.NS\", \"BTCUSDT\", \"ETHUSDT\"]\n    batch_results = await api.batch_requests(symbols)\n\n    for symbol, data in batch_results.items():\n        if \"error\" in data:\n            print(f\"{symbol}: Error - {data['error']}\")\n        else:\n            if symbol.endswith('.NS'):\n                print(f\"{symbol}: \u20b9{data.get('lastPrice', 'N/A')}\")\n            else:\n                print(f\"{symbol}: ${data.get('price', 'N/A')}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/#javascript-examples_1","title":"JavaScript Examples","text":""},{"location":"examples/#browser-javascript-es6","title":"Browser JavaScript (ES6+)","text":"<pre><code>// api-client.js\nclass StockCryptoAPI {\n    constructor(baseURL = 'https://fastapi-stock-data.onrender.com') {\n        this.baseURL = baseURL;\n    }\n\n    async getStockPrice(symbol) {\n        try {\n            const response = await fetch(`${this.baseURL}/api/v1/market/price/stock?symbol=${symbol}`);\n            if (!response.ok) throw new Error(`HTTP ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error(`Error fetching stock price for ${symbol}:`, error);\n            return null;\n        }\n    }\n\n    async getCryptoPrice(symbol) {\n        try {\n            const response = await fetch(`${this.baseURL}/crypto-price/${symbol}`);\n            if (!response.ok) throw new Error(`HTTP ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error(`Error fetching crypto price for ${symbol}:`, error);\n            return null;\n        }\n    }\n\n    async getMultipleCryptoPrices(symbols) {\n        try {\n            const symbolStr = symbols.join(',');\n            const response = await fetch(`${this.baseURL}/crypto-multiple?symbols=${symbolStr}`);\n            if (!response.ok) throw new Error(`HTTP ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching multiple crypto prices:', error);\n            return null;\n        }\n    }\n\n    async getCryptoStats(symbol) {\n        try {\n            const response = await fetch(`${this.baseURL}/crypto-stats/${symbol}`);\n            if (!response.ok) throw new Error(`HTTP ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error(`Error fetching crypto stats for ${symbol}:`, error);\n            return null;\n        }\n    }\n\n    async getHistoricalData(symbol, period = '1mo', interval = '1d') {\n        try {\n            let url;\n            if (symbol.endsWith('.NS') || symbol.startsWith('^')) {\n                // Stock or index\n                url = `${this.baseURL}/historical/${symbol}?period=${period}&amp;interval=${interval}`;\n            } else {\n                // Crypto\n                url = `${this.baseURL}/crypto-historical/${symbol}?interval=${interval}&amp;limit=100`;\n            }\n\n            const response = await fetch(url);\n            if (!response.ok) throw new Error(`HTTP ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error(`Error fetching historical data for ${symbol}:`, error);\n            return null;\n        }\n    }\n}\n\n// Usage in browser\nconst api = new StockCryptoAPI();\n\n// Get stock price\napi.getStockPrice('RELIANCE.NS').then(data =&gt; {\n    if (data) {\n        document.getElementById('stock-price').textContent =\n            `${data.companyName}: \u20b9${data.lastPrice} (${data.pChange}%)`;\n    }\n});\n\n// Get crypto price\napi.getCryptoPrice('BTCUSDT').then(data =&gt; {\n    if (data) {\n        document.getElementById('crypto-price').textContent =\n            `BTC: $${data.price}`;\n    }\n});\n\n// Get multiple crypto prices\napi.getMultipleCryptoPrices(['BTCUSDT', 'ETHUSDT', 'ADAUSDT']).then(data =&gt; {\n    if (data) {\n        const container = document.getElementById('crypto-list');\n        container.innerHTML = '';\n\n        Object.entries(data.data).forEach(([symbol, priceData]) =&gt; {\n            const div = document.createElement('div');\n            div.textContent = `${symbol}: $${priceData.price}`;\n            container.appendChild(div);\n        });\n    }\n});\n\n// Get crypto statistics\napi.getCryptoStats('BTCUSDT').then(stats =&gt; {\n    if (stats) {\n        const changeClass = stats.price_change_percent &gt;= 0 ? 'positive' : 'negative';\n        document.getElementById('crypto-stats').innerHTML = `\n            &lt;div class=\"stat\"&gt;\n                &lt;strong&gt;BTC 24h Change:&lt;/strong&gt;\n                &lt;span class=\"${changeClass}\"&gt;${stats.price_change_percent.toFixed(2)}%&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat\"&gt;\n                &lt;strong&gt;Volume:&lt;/strong&gt; ${stats.volume.toLocaleString()}\n            &lt;/div&gt;\n            &lt;div class=\"stat\"&gt;\n                &lt;strong&gt;High:&lt;/strong&gt; $${stats.high_price}\n            &lt;/div&gt;\n            &lt;div class=\"stat\"&gt;\n                &lt;strong&gt;Low:&lt;/strong&gt; $${stats.low_price}\n            &lt;/div&gt;\n        `;\n    }\n});\n</code></pre>"},{"location":"examples/#nodejs-with-axios","title":"Node.js with axios","text":"<pre><code>const axios = require('axios');\n\nclass StockCryptoAPI {\n    constructor(baseURL = 'https://fastapi-stock-data.onrender.com') {\n        this.baseURL = baseURL;\n        this.client = axios.create({\n            baseURL: this.baseURL,\n            timeout: 10000,\n        });\n    }\n\n    async getStockPrice(symbol) {\n        try {\n            const response = await this.client.get(`/api/v1/market/price/stock?symbol=${symbol}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching stock price for ${symbol}:`, error.message);\n            return null;\n        }\n    }\n\n    async getCryptoPrice(symbol) {\n        try {\n            const response = await this.client.get(`/crypto-price/${symbol}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching crypto price for ${symbol}:`, error.message);\n            return null;\n        }\n    }\n\n    async getMultipleCryptoPrices(symbols) {\n        try {\n            const symbolStr = symbols.join(',');\n            const response = await this.client.get(`/crypto-multiple?symbols=${symbolStr}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching multiple crypto prices:', error.message);\n            return null;\n        }\n    }\n\n    async getHistoricalData(symbol, params = {}) {\n        try {\n            let endpoint;\n            if (symbol.endsWith('.NS') || symbol.startsWith('^')) {\n                endpoint = `/historical/${symbol}`;\n            } else {\n                endpoint = `/crypto-historical/${symbol}`;\n            }\n\n            const response = await this.client.get(endpoint, { params });\n            return response.data;\n        } catch (error) {\n            console.error(`Error fetching historical data for ${symbol}:`, error.message);\n            return null;\n        }\n    }\n\n    async monitorPrices(symbols, intervalMs = 30000) {\n        console.log(`Starting price monitor for ${symbols.join(', ')}`);\n\n        const monitor = async () =&gt; {\n            console.log(`\\n--- Price Update at ${new Date().toLocaleTimeString()} ---`);\n\n            for (const symbol of symbols) {\n                try {\n                    let data;\n                    if (symbol.endsWith('.NS')) {\n                        data = await this.getStockPrice(symbol);\n                        if (data) {\n                            console.log(`${data.symbol}: \u20b9${data.lastPrice} (${data.pChange}%)`);\n                        }\n                    } else {\n                        data = await this.getCryptoPrice(symbol);\n                        if (data) {\n                            console.log(`${data.symbol}: $${data.price}`);\n                        }\n                    }\n                } catch (error) {\n                    console.error(`Error monitoring ${symbol}:`, error.message);\n                }\n            }\n        };\n\n        // Initial call\n        await monitor();\n\n        // Set up interval\n        return setInterval(monitor, intervalMs);\n    }\n}\n\n// Usage\nasync function main() {\n    const api = new StockCryptoAPI();\n\n    // Get individual prices\n    const stockData = await api.getStockPrice('RELIANCE.NS');\n    const cryptoData = await api.getCryptoPrice('BTCUSDT');\n\n    console.log('Stock:', stockData);\n    console.log('Crypto:', cryptoData);\n\n    // Get multiple crypto prices\n    const multiCrypto = await api.getMultipleCryptoPrices(['BTCUSDT', 'ETHUSDT', 'ADAUSDT']);\n    console.log('Multiple crypto:', multiCrypto);\n\n    // Get historical data\n    const history = await api.getHistoricalData('BTCUSDT', { interval: '1d', limit: 30 });\n    console.log('Historical data points:', history ? history.data.length : 0);\n\n    // Start monitoring (commented out to avoid infinite loop)\n    // const monitorId = api.monitorPrices(['RELIANCE.NS', 'BTCUSDT'], 30000);\n\n    // Stop monitoring after some time\n    // setTimeout(() =&gt; clearInterval(monitorId), 300000); // 5 minutes\n}\n\nif (require.main === module) {\n    main().catch(console.error);\n}\n\nmodule.exports = StockCryptoAPI;\n</code></pre>"},{"location":"examples/#react-example","title":"\ud83d\udcf1 React Example","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\nfunction CryptoDashboard() {\n    const [prices, setPrices] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const BASE_URL = 'https://fastapi-stock-data.onrender.com';\n\n    useEffect(() =&gt; {\n        fetchPrices();\n        // Set up auto-refresh every 30 seconds\n        const interval = setInterval(fetchPrices, 30000);\n        return () =&gt; clearInterval(interval);\n    }, []);\n\n    const fetchPrices = async () =&gt; {\n        try {\n            setLoading(true);\n            const symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT'];\n            const symbolStr = symbols.join(',');\n\n            const response = await fetch(`${BASE_URL}/crypto-multiple?symbols=${symbolStr}`);\n            if (!response.ok) throw new Error(`HTTP ${response.status}`);\n\n            const data = await response.json();\n            setPrices(data.data);\n            setError(null);\n        } catch (err) {\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    if (loading &amp;&amp; Object.keys(prices).length === 0) {\n        return &lt;div className=\"loading\"&gt;Loading cryptocurrency prices...&lt;/div&gt;;\n    }\n\n    if (error) {\n        return &lt;div className=\"error\"&gt;Error: {error}&lt;/div&gt;;\n    }\n\n    return (\n        &lt;div className=\"crypto-dashboard\"&gt;\n            &lt;h1&gt;Cryptocurrency Prices&lt;/h1&gt;\n            &lt;button onClick={fetchPrices} disabled={loading}&gt;\n                {loading ? 'Refreshing...' : 'Refresh Prices'}\n            &lt;/button&gt;\n\n            &lt;div className=\"price-grid\"&gt;\n                {Object.entries(prices).map(([symbol, data]) =&gt; (\n                    &lt;div key={symbol} className=\"price-card\"&gt;\n                        &lt;h3&gt;{symbol.replace('USDT', '')}/USD&lt;/h3&gt;\n                        &lt;div className=\"price\"&gt;${parseFloat(data.price).toLocaleString()}&lt;/div&gt;\n                        &lt;small&gt;Last updated: {new Date(data.timestamp * 1000).toLocaleTimeString()}&lt;/small&gt;\n                    &lt;/div&gt;\n                ))}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default CryptoDashboard;\n</code></pre>"},{"location":"examples/#curl-examples","title":"\ud83d\udcca cURL Examples","text":"<pre><code># Health check\ncurl https://fastapi-stock-data.onrender.com/health\n\n# Get stock price\ncurl \"https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol=RELIANCE.NS\"\n\n# Get crypto price\ncurl \"https://fastapi-stock-data.onrender.com/crypto-price/BTCUSDT\"\n\n# Get multiple crypto prices\ncurl \"https://fastapi-stock-data.onrender.com/crypto-multiple?symbols=BTCUSDT,ETHUSDT,ADAUSDT\"\n\n# Get crypto statistics\ncurl \"https://fastapi-stock-data.onrender.com/crypto-stats/BTCUSDT\"\n\n# Get historical crypto data\ncurl \"https://fastapi-stock-data.onrender.com/crypto-historical/BTCUSDT?interval=1d&amp;limit=30\"\n\n# Get historical stock data\ncurl \"https://fastapi-stock-data.onrender.com/historical/RELIANCE.NS?period=1mo&amp;interval=1d\"\n\n# Get index price\ncurl \"https://fastapi-stock-data.onrender.com/api/v1/market/price/index?index=NIFTY\"\n\n# Pretty print JSON responses\ncurl \"https://fastapi-stock-data.onrender.com/crypto-price/BTCUSDT\" | jq .\n</code></pre>"},{"location":"examples/#shell-script-examples","title":"\ud83d\udc1a Shell Script Examples","text":"<pre><code>#!/bin/bash\n\nBASE_URL=\"https://fastapi-stock-data.onrender.com\"\n\n# Function to get stock price\nget_stock_price() {\n    local symbol=$1\n    echo \"Getting price for $symbol...\"\n    curl -s \"$BASE_URL/api/v1/market/price/stock?symbol=$symbol\" | jq .\n}\n\n# Function to get crypto price\nget_crypto_price() {\n    local symbol=$1\n    echo \"Getting price for $symbol...\"\n    curl -s \"$BASE_URL/crypto-price/$symbol\" | jq .\n}\n\n# Function to monitor prices\nmonitor_prices() {\n    local symbols=(\"$@\")\n    echo \"Monitoring prices for ${symbols[*]}\"\n\n    while true; do\n        echo \"=== $(date '+%H:%M:%S') ===\"\n\n        for symbol in \"${symbols[@]}\"; do\n            if [[ $symbol == *\".NS\" ]]; then\n                # Stock\n                price=$(curl -s \"$BASE_URL/api/v1/market/price/stock?symbol=$symbol\" | jq -r '.lastPrice')\n                echo \"$symbol: \u20b9$price\"\n            else\n                # Crypto\n                price=$(curl -s \"$BASE_URL/crypto-price/$symbol\" | jq -r '.price')\n                echo \"$symbol: $$price\"\n            fi\n        done\n\n        sleep 30\n    done\n}\n\n# Usage examples\nget_stock_price \"RELIANCE.NS\"\nget_crypto_price \"BTCUSDT\"\n\n# Monitor prices (uncomment to use)\n# monitor_prices \"RELIANCE.NS\" \"BTCUSDT\" \"ETHUSDT\"\n</code></pre>"},{"location":"examples/#error-handling-examples","title":"\ud83d\udd27 Error Handling Examples","text":""},{"location":"examples/#python-error-handling","title":"Python Error Handling","text":"<pre><code>import requests\nfrom requests.exceptions import RequestException, Timeout, ConnectionError\n\ndef safe_api_call(url, max_retries=3):\n    \"\"\"Make API call with retry logic and error handling\"\"\"\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n            return response.json()\n\n        except Timeout:\n            print(f\"Timeout on attempt {attempt + 1}\")\n            if attempt &lt; max_retries - 1:\n                time.sleep(2 ** attempt)  # Exponential backoff\n                continue\n\n        except ConnectionError:\n            print(f\"Connection error on attempt {attempt + 1}\")\n            if attempt &lt; max_retries - 1:\n                time.sleep(2 ** attempt)\n                continue\n\n        except requests.exceptions.HTTPError as e:\n            if response.status_code == 429:\n                print(\"Rate limited, waiting...\")\n                time.sleep(60)\n                continue\n            elif response.status_code &gt;= 500:\n                print(f\"Server error: {response.status_code}\")\n                if attempt &lt; max_retries - 1:\n                    time.sleep(5)\n                    continue\n            else:\n                print(f\"HTTP error: {response.status_code}\")\n                return None\n\n        except Exception as e:\n            print(f\"Unexpected error: {e}\")\n            return None\n\n    return None\n\n# Usage\ndata = safe_api_call(\"https://fastapi-stock-data.onrender.com/crypto-price/BTCUSDT\")\nif data:\n    print(f\"BTC: ${data['price']}\")\nelse:\n    print(\"Failed to fetch data after retries\")\n</code></pre>"},{"location":"examples/#javascript-error-handling","title":"JavaScript Error Handling","text":"<pre><code>async function safeApiCall(url, options = {}) {\n    const maxRetries = options.maxRetries || 3;\n    const timeout = options.timeout || 10000;\n\n    for (let attempt = 0; attempt &lt; maxRetries; attempt++) {\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() =&gt; controller.abort(), timeout);\n\n            const response = await fetch(url, {\n                ...options,\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                if (response.status === 429) {\n                    // Rate limited\n                    const retryAfter = response.headers.get('Retry-After') || 60;\n                    console.log(`Rate limited, waiting ${retryAfter} seconds...`);\n                    await new Promise(resolve =&gt; setTimeout(resolve, retryAfter * 1000));\n                    continue;\n                } else if (response.status &gt;= 500) {\n                    // Server error, retry\n                    console.log(`Server error ${response.status}, retrying...`);\n                    await new Promise(resolve =&gt; setTimeout(resolve, 1000 * (2 ** attempt)));\n                    continue;\n                } else {\n                    // Client error, don't retry\n                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n                }\n            }\n\n            return await response.json();\n\n        } catch (error) {\n            if (error.name === 'AbortError') {\n                console.log(`Timeout on attempt ${attempt + 1}`);\n            } else {\n                console.log(`Error on attempt ${attempt + 1}: ${error.message}`);\n            }\n\n            if (attempt &lt; maxRetries - 1) {\n                const delay = 1000 * (2 ** attempt);\n                console.log(`Waiting ${delay}ms before retry...`);\n                await new Promise(resolve =&gt; setTimeout(resolve, delay));\n            }\n        }\n    }\n\n    throw new Error(`Failed after ${maxRetries} attempts`);\n}\n\n// Usage\ntry {\n    const data = await safeApiCall('https://fastapi-stock-data.onrender.com/crypto-price/BTCUSDT');\n    console.log(`BTC: $${data.price}`);\n} catch (error) {\n    console.error('Failed to fetch BTC price:', error.message);\n}\n</code></pre>"},{"location":"examples/#advanced-examples","title":"\ud83d\udcc8 Advanced Examples","text":""},{"location":"examples/#price-alert-system","title":"Price Alert System","text":"<pre><code>import requests\nimport time\nfrom typing import Dict, Callable\n\nclass PriceAlertSystem:\n    def __init__(self, base_url: str = \"https://fastapi-stock-data.onrender.com\"):\n        self.base_url = base_url\n        self.alerts = {}  # symbol -&gt; (target_price, condition, callback)\n\n    def add_alert(self, symbol: str, target_price: float, condition: str, callback: Callable):\n        \"\"\"Add price alert\"\"\"\n        self.alerts[symbol] = (target_price, condition, callback)\n\n    def check_alerts(self):\n        \"\"\"Check all alerts\"\"\"\n        if not self.alerts:\n            return\n\n        symbols = list(self.alerts.keys())\n\n        # Get current prices\n        try:\n            if symbols[0].endswith('.NS'):\n                # Stocks\n                prices = {}\n                for symbol in symbols:\n                    response = requests.get(f\"{self.base_url}/api/v1/market/price/stock?symbol={symbol}\")\n                    if response.status_code == 200:\n                        data = response.json()\n                        prices[symbol] = float(data['lastPrice'])\n            else:\n                # Crypto\n                symbol_str = \",\".join(symbols)\n                response = requests.get(f\"{self.base_url}/crypto-multiple?symbols={symbol_str}\")\n                if response.status_code == 200:\n                    data = response.json()\n                    prices = {symbol: float(info['price']) for symbol, info in data['data'].items()}\n\n            # Check alerts\n            triggered = []\n            for symbol, (target_price, condition, callback) in self.alerts.items():\n                if symbol in prices:\n                    current_price = prices[symbol]\n\n                    if condition == 'above' and current_price &gt;= target_price:\n                        callback(symbol, current_price, 'above', target_price)\n                        triggered.append(symbol)\n                    elif condition == 'below' and current_price &lt;= target_price:\n                        callback(symbol, current_price, 'below', target_price)\n                        triggered.append(symbol)\n\n            # Remove triggered alerts\n            for symbol in triggered:\n                del self.alerts[symbol]\n\n        except Exception as e:\n            print(f\"Error checking alerts: {e}\")\n\n    def monitor_alerts(self, interval_seconds: int = 30):\n        \"\"\"Monitor alerts continuously\"\"\"\n        print(f\"Monitoring {len(self.alerts)} alerts...\")\n\n        try:\n            while self.alerts:\n                self.check_alerts()\n                time.sleep(interval_seconds)\n        except KeyboardInterrupt:\n            print(\"Alert monitoring stopped.\")\n\n# Usage\ndef price_alert_callback(symbol, current_price, condition, target_price):\n    print(f\"\ud83d\udea8 ALERT: {symbol} is {condition} \u20b9{target_price} (current: \u20b9{current_price})\")\n\nalert_system = PriceAlertSystem()\n\n# Add alerts\nalert_system.add_alert(\"RELIANCE.NS\", 2500, \"above\", price_alert_callback)\nalert_system.add_alert(\"BTCUSDT\", 50000, \"below\", price_alert_callback)\n\n# Monitor alerts\nalert_system.monitor_alerts()\n</code></pre> <p>This comprehensive examples page provides code samples for various use cases and programming languages. All examples include proper error handling and best practices for production use.</p>"},{"location":"getting-started/","title":"Getting Started with FastStockAPI","text":"<p>Welcome to FastStockAPI! This comprehensive guide will help you get started with our powerful financial data API that provides real-time and historical data for stocks, cryptocurrencies, options, indices, and forex markets.</p>"},{"location":"getting-started/#what-is-faststockapi","title":"What is FastStockAPI?","text":"<p>FastStockAPI is a high-performance FastAPI-based service that aggregates financial market data from multiple sources:</p> <ul> <li>Indian Stocks: NSE (National Stock Exchange) data</li> <li>Cryptocurrencies: Real-time crypto prices and historical data</li> <li>Options Trading: Complete options chains, analytics, and historical data</li> <li>Market Indices: US and BSE index data</li> <li>Forex: Real-time currency exchange rates</li> <li>Advanced Analytics: PCR, Max Pain, Open Interest analysis</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have:</p> <ul> <li>Python 3.9+ (for local development)</li> <li>cURL or Postman (for API testing)</li> <li>Git (for cloning the repository)</li> <li>Basic knowledge of REST APIs</li> </ul>"},{"location":"getting-started/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"getting-started/#option-1-use-the-live-api-recommended","title":"Option 1: Use the Live API (Recommended)","text":"<p>The easiest way to get started is to use our hosted API:</p> <pre><code>Base URL: http://localhost:8000 (local) or https://your-deployed-url.com (production)\n</code></pre>"},{"location":"getting-started/#option-2-local-development-setup","title":"Option 2: Local Development Setup","text":"<ol> <li> <p>Clone the Repository <pre><code>git clone https://github.com/your-username/fastapi-project.git\ncd fastapi-project\n</code></pre></p> </li> <li> <p>Create Virtual Environment <pre><code># Windows\npython -m venv venv\nvenv\\Scripts\\activate\n\n# Linux/Mac\npython -m venv venv\nsource venv/bin/activate\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Start the Server <pre><code>uvicorn app.main:app --reload\n</code></pre></p> </li> <li> <p>Verify Installation <pre><code>curl http://localhost:8000/health\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#your-first-api-calls","title":"\ud83e\uddea Your First API Calls","text":""},{"location":"getting-started/#1-health-check","title":"1. Health Check","text":"<p>Let's start by checking if the API is running:</p> <pre><code>curl http://localhost:8000/health\n</code></pre> <p>Expected Response: <pre><code>{\n    \"status\": \"ok\"\n}\n</code></pre></p>"},{"location":"getting-started/#2-get-api-information","title":"2. Get API Information","text":"<p>Get a complete overview of all available endpoints:</p> <pre><code>curl http://localhost:8000/\n</code></pre> <p>This will return a comprehensive list of all endpoints with examples.</p>"},{"location":"getting-started/#3-get-stock-price","title":"3. Get Stock Price","text":"<p>Let's get the current price of a popular Indian stock:</p> <pre><code>curl \"http://localhost:8000/stocks/IND/RELIANCE\"\n</code></pre> <p>Response: <pre><code>{\n    \"symbol\": \"RELIANCE\",\n    \"companyName\": \"Reliance Industries Ltd\",\n    \"lastPrice\": 2456.75,\n    \"pChange\": 1.25,\n    \"change\": 30.50,\n    \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre></p>"},{"location":"getting-started/#4-get-us-stock-price","title":"4. Get US Stock Price","text":"<p>Now let's try a US stock:</p> <pre><code>curl \"http://localhost:8000/stocks/US/AAPL\"\n</code></pre> <p>Response: <pre><code>{\n    \"symbol\": \"AAPL\",\n    \"companyName\": \"Apple Inc.\",\n    \"lastPrice\": 192.53,\n    \"pChange\": -0.85,\n    \"change\": -1.65,\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"getting-started/#5-get-cryptocurrency-price","title":"5. Get Cryptocurrency Price","text":"<p>Let's get Bitcoin's current price:</p> <pre><code>curl \"http://localhost:8000/crypto/quote/BTC\"\n</code></pre> <p>Response: <pre><code>{\n    \"symbol\": \"BTC\",\n    \"name\": \"Bitcoin\",\n    \"price\": 45123.45,\n    \"change24h\": 2.5,\n    \"changePercent24h\": 2.5,\n    \"volume24h\": 28500000000,\n    \"marketCap\": 890000000000,\n    \"lastUpdated\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"getting-started/#6-get-options-data","title":"6. Get Options Data","text":"<p>Get current NIFTY index price for options trading:</p> <pre><code>curl \"http://localhost:8000/options/index-price?index=NIFTY\"\n</code></pre> <p>Response: <pre><code>{\n    \"symbol\": \"NIFTY\",\n    \"lastPrice\": 24500.75,\n    \"pChange\": 0.85,\n    \"change\": 207.50,\n    \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre></p>"},{"location":"getting-started/#7-get-options-analytics","title":"7. Get Options Analytics","text":"<p>Get Put-Call Ratio for NIFTY:</p> <pre><code>curl \"http://localhost:8000/analytics/pcr?index=NIFTY&amp;expiry=160925\"\n</code></pre> <p>Response: <pre><code>{\n    \"pcr\": 1.25,\n    \"total_ce_oi\": 125000000,\n    \"total_pe_oi\": 100000000,\n    \"index\": \"NIFTY\",\n    \"expiry\": \"16-Sep-2025\"\n}\n</code></pre></p>"},{"location":"getting-started/#programming-examples","title":"\ud83d\udcbb Programming Examples","text":""},{"location":"getting-started/#python-basic-usage","title":"Python - Basic Usage","text":"<pre><code>import requests\n\n# Base URL\nBASE_URL = \"http://localhost:8000\"\n\n# 1. Health check\nresponse = requests.get(f\"{BASE_URL}/health\")\nprint(\"API Status:\", response.json())\n\n# 2. Get stock price\nresponse = requests.get(f\"{BASE_URL}/stocks/IND/RELIANCE\")\nreliance_data = response.json()\nprint(f\"RELIANCE: \u20b9{reliance_data['lastPrice']}\")\n\n# 3. Get crypto price\nresponse = requests.get(f\"{BASE_URL}/crypto/quote/BTC\")\nbtc_data = response.json()\nprint(f\"BTC: ${btc_data['price']}\")\n\n# 4. Get options analytics\nresponse = requests.get(f\"{BASE_URL}/analytics/pcr?index=NIFTY&amp;expiry=160925\")\npcr_data = response.json()\nprint(f\"NIFTY PCR: {pcr_data['pcr']}\")\n</code></pre>"},{"location":"getting-started/#javascript-web-integration","title":"JavaScript - Web Integration","text":"<pre><code>// Using fetch API\nconst BASE_URL = 'http://localhost:8000';\n\n// Get stock data\nasync function getStockData(symbol) {\n    try {\n        const response = await fetch(`${BASE_URL}/stocks/IND/${symbol}`);\n        const data = await response.json();\n        console.log(`${data.symbol}: \u20b9${data.lastPrice}`);\n        return data;\n    } catch (error) {\n        console.error('Error fetching stock data:', error);\n    }\n}\n\n// Get crypto data\nasync function getCryptoData(symbol) {\n    try {\n        const response = await fetch(`${BASE_URL}/crypto/quote/${symbol}`);\n        const data = await response.json();\n        console.log(`${data.symbol}: $${data.price}`);\n        return data;\n    } catch (error) {\n        console.error('Error fetching crypto data:', error);\n    }\n}\n\n// Usage\ngetStockData('TCS');\ngetCryptoData('ETH');\n</code></pre>"},{"location":"getting-started/#java-enterprise-integration","title":"Java - Enterprise Integration","text":"<pre><code>import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class FastStockAPIClient {\n    private static final String BASE_URL = \"http://localhost:8000\";\n    private final HttpClient httpClient;\n    private final ObjectMapper objectMapper;\n\n    public FastStockAPIClient() {\n        this.httpClient = HttpClient.newHttpClient();\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public void getStockPrice(String symbol) throws Exception {\n        String url = BASE_URL + \"/stocks/IND/\" + symbol;\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build();\n\n        HttpResponse&lt;String&gt; response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n        if (response.statusCode() == 200) {\n            // Parse and use the data\n            System.out.println(\"Stock data: \" + response.body());\n        } else {\n            System.out.println(\"Error: \" + response.statusCode());\n        }\n    }\n\n    public void getCryptoPrice(String symbol) throws Exception {\n        String url = BASE_URL + \"/crypto/quote/\" + symbol;\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build();\n\n        HttpResponse&lt;String&gt; response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n        if (response.statusCode() == 200) {\n            System.out.println(\"Crypto data: \" + response.body());\n        } else {\n            System.out.println(\"Error: \" + response.statusCode());\n        }\n    }\n}\n\n// Usage\npublic class Main {\n    public static void main(String[] args) {\n        FastStockAPIClient client = new FastStockAPIClient();\n\n        try {\n            client.getStockPrice(\"RELIANCE\");\n            client.getCryptoPrice(\"BTC\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#understanding-the-data","title":"Understanding the Data","text":""},{"location":"getting-started/#stock-data-fields","title":"Stock Data Fields","text":"<ul> <li>symbol: Stock ticker symbol</li> <li>companyName: Full company name</li> <li>lastPrice: Current stock price</li> <li>pChange: Percentage change</li> <li>change: Absolute price change</li> <li>timestamp: Data timestamp</li> </ul>"},{"location":"getting-started/#crypto-data-fields","title":"Crypto Data Fields","text":"<ul> <li>symbol: Cryptocurrency symbol</li> <li>name: Full cryptocurrency name</li> <li>price: Current price in USD</li> <li>change24h: 24-hour price change</li> <li>changePercent24h: 24-hour percentage change</li> <li>volume24h: 24-hour trading volume</li> <li>marketCap: Market capitalization</li> <li>lastUpdated: Last update timestamp</li> </ul>"},{"location":"getting-started/#options-data-fields","title":"Options Data Fields","text":"<ul> <li>pcr: Put-Call Ratio</li> <li>total_ce_oi: Total Call Open Interest</li> <li>total_pe_oi: Total Put Open Interest</li> <li>max_pain_strike: Maximum pain strike price</li> <li>underlying_value: Current index value</li> </ul>"},{"location":"getting-started/#advanced-features","title":"\ud83d\udd27 Advanced Features","text":""},{"location":"getting-started/#historical-data","title":"Historical Data","text":"<p>Get historical price data for analysis:</p> <pre><code># Stock historical data\ncurl \"http://localhost:8000/stocks/historical/IND/RELIANCE?period=1mo\"\n\n# Crypto historical data\ncurl \"http://localhost:8000/crypto/historical/BTC?period=1mo\"\n\n# Options historical data\ncurl \"http://localhost:8000/options/historical/NIFTY?strike=24000&amp;expiry=160925&amp;option_type=CE&amp;period=1mo\"\n</code></pre>"},{"location":"getting-started/#bulk-requests","title":"Bulk Requests","text":"<p>Get multiple stocks at once:</p> <pre><code># Multiple stocks (if endpoint available)\ncurl \"http://localhost:8000/stocks/IND/RELIANCE,TCS,HDFC\"\n</code></pre>"},{"location":"getting-started/#options-chain-analysis","title":"Options Chain Analysis","text":"<p>Get complete options data for trading decisions:</p> <pre><code># Get options chain\ncurl \"http://localhost:8000/options/direct-data?index=NIFTY&amp;expiry=160925&amp;num_strikes=10\"\n\n# Get specific strike data\ncurl \"http://localhost:8000/options/strike-data?index=NIFTY&amp;strike=24000&amp;expiry=160925&amp;option_type=BOTH\"\n</code></pre>"},{"location":"getting-started/#common-use-cases","title":"\ud83c\udfaf Common Use Cases","text":""},{"location":"getting-started/#1-portfolio-tracking","title":"1. Portfolio Tracking","text":"<pre><code>def track_portfolio(stocks, cryptos):\n    portfolio = {}\n\n    # Get stock prices\n    for stock in stocks:\n        response = requests.get(f\"{BASE_URL}/stocks/IND/{stock}\")\n        portfolio[stock] = response.json()\n\n    # Get crypto prices\n    for crypto in cryptos:\n        response = requests.get(f\"{BASE_URL}/crypto/quote/{crypto}\")\n        portfolio[crypto] = response.json()\n\n    return portfolio\n</code></pre>"},{"location":"getting-started/#2-options-strategy-analysis","title":"2. Options Strategy Analysis","text":"<pre><code>def analyze_options_strategy(index, expiry, strikes):\n    analysis = {}\n\n    # Get PCR\n    pcr_response = requests.get(f\"{BASE_URL}/analytics/pcr?index={index}&amp;expiry={expiry}\")\n    analysis['pcr'] = pcr_response.json()\n\n    # Get Max Pain\n    max_pain_response = requests.get(f\"{BASE_URL}/analytics/max-pain?index={index}&amp;expiry={expiry}\")\n    analysis['max_pain'] = max_pain_response.json()\n\n    # Get strike data\n    for strike in strikes:\n        strike_response = requests.get(\n            f\"{BASE_URL}/options/strike-data?index={index}&amp;strike={strike}&amp;expiry={expiry}&amp;option_type=BOTH\"\n        )\n        analysis[f'strike_{strike}'] = strike_response.json()\n\n    return analysis\n</code></pre>"},{"location":"getting-started/#3-market-sentiment-analysis","title":"3. Market Sentiment Analysis","text":"<pre><code>def get_market_sentiment():\n    sentiment = {}\n\n    # Get major indices\n    indices = ['NIFTY', 'BANKNIFTY']\n    for index in indices:\n        response = requests.get(f\"{BASE_URL}/options/index-price?index={index}\")\n        sentiment[index] = response.json()\n\n        # Get PCR for sentiment\n        pcr_response = requests.get(f\"{BASE_URL}/analytics/pcr?index={index}&amp;expiry=160925\")\n        sentiment[f'{index}_pcr'] = pcr_response.json()\n\n    return sentiment\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<ol> <li>Connection Refused</li> <li>Make sure the API server is running</li> <li>Check if the port (8000) is available</li> <li> <p>Verify the BASE_URL is correct</p> </li> <li> <p>404 Not Found</p> </li> <li>Check the endpoint URL</li> <li>Verify symbol names are correct</li> <li> <p>Ensure expiry dates are in DDMMYY format</p> </li> <li> <p>500 Internal Server Error</p> </li> <li>The API might be having issues with external data sources</li> <li>Check the server logs for more details</li> <li> <p>Try again in a few minutes</p> </li> <li> <p>Rate Limiting</p> </li> <li>Free tier has request limits</li> <li>Implement delays between requests</li> <li>Consider upgrading to premium plans</li> </ol>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>API Documentation: Visit <code>/docs</code> for interactive documentation</li> <li>Health Check: Use <code>/health</code> to verify API status</li> <li>Logs: Check server logs for detailed error information</li> <li>GitHub Issues: Report bugs and request features</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you know the basics, explore these advanced topics:</p> <ol> <li>API Reference: Complete endpoint documentation</li> <li>Usage Examples: Advanced code examples</li> <li>Deployment Guide: Production deployment</li> <li>Analytics: Advanced trading analytics</li> </ol>"},{"location":"getting-started/#support","title":"Support","text":"<ul> <li>\ud83d\udce7 Email: support@faststockapi.com</li> <li>\ud83d\udcac GitHub: Create an issue</li> <li>\ud83d\udcd6 Docs: Full Documentation</li> </ul> <p>Happy coding with FastStockAPI! \ud83d\udcc8</p>"},{"location":"getting-started/#python-examples","title":"Python Examples","text":""},{"location":"getting-started/#using-requests-library","title":"Using requests library","text":"<pre><code>import requests\n\n# Get stock price\nresponse = requests.get(\"https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol=RELIANCE\")\ndata = response.json()\nprint(f\"RELIANCE: \u20b9{data['lastPrice']}\")\n\n# Get crypto price\nresponse = requests.get(\"https://fastapi-stock-data.onrender.com/crypto-price/BTCUSDT\")\ndata = response.json()\nprint(f\"BTC: ${data['price']}\")\n</code></pre>"},{"location":"getting-started/#using-httpx-async","title":"Using httpx (async)","text":"<pre><code>import httpx\nimport asyncio\n\nasync def get_data():\n    async with httpx.AsyncClient() as client:\n        # Get multiple crypto prices\n        response = await client.get(\n            \"https://fastapi-stock-data.onrender.com/crypto-multiple?symbols=BTCUSDT,ETHUSDT,ADAUSDT\"\n        )\n        data = response.json()\n        print(data)\n\nasyncio.run(get_data())\n</code></pre>"},{"location":"getting-started/#javascript-examples","title":"JavaScript Examples","text":""},{"location":"getting-started/#fetch-api","title":"Fetch API","text":"<pre><code>// Get crypto price\nfetch('https://fastapi-stock-data.onrender.com/crypto-price/BTCUSDT')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        console.log(`BTC Price: $${data.price}`);\n    });\n\n// Get multiple prices\nfetch('https://fastapi-stock-data.onrender.com/crypto-multiple?symbols=BTCUSDT,ETHUSDT')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        console.log(data);\n    });\n</code></pre>"},{"location":"getting-started/#axios","title":"Axios","text":"<pre><code>const axios = require('axios');\n\n// Get stock price\naxios.get('https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol=TCS')\n    .then(response =&gt; {\n        console.log(response.data);\n    });\n</code></pre>"},{"location":"getting-started/#mobile-applications","title":"Mobile Applications","text":""},{"location":"getting-started/#react-native","title":"React Native","text":"<pre><code>import React, { useEffect, useState } from 'react';\n\nfunction CryptoPrice() {\n    const [price, setPrice] = useState(null);\n\n    useEffect(() =&gt; {\n        fetch('https://fastapi-stock-data.onrender.com/crypto-price/BTCUSDT')\n            .then(response =&gt; response.json())\n            .then(data =&gt; setPrice(data.price));\n    }, []);\n\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;BTC Price: ${price}&lt;/h2&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"getting-started/#error-handling","title":"Error Handling","text":""},{"location":"getting-started/#common-http-status-codes","title":"Common HTTP Status Codes","text":"<ul> <li>200: Success</li> <li>404: Symbol not found</li> <li>500: Server error</li> </ul>"},{"location":"getting-started/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"detail\": \"Error message description\"\n}\n</code></pre>"},{"location":"getting-started/#best-practices","title":"Best Practices","text":"<pre><code>def safe_api_call(url):\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"API call failed: {e}\")\n        return None\n</code></pre>"},{"location":"getting-started/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Production: No rate limiting (for now)</li> <li>Development: Test responsibly</li> <li>Best Practice: Implement caching on your end</li> </ul>"},{"location":"getting-started/#testing","title":"Testing","text":"<p>Use our test script to verify all endpoints:</p> <pre><code>python test_api_fixes.py\n</code></pre>"},{"location":"getting-started/#next-steps_1","title":"Next Steps","text":"<ul> <li>API Reference - Complete endpoint documentation</li> <li>Symbol Reference - Available symbols</li> <li>Examples - More code examples</li> <li>Interactive Demo - Try the API live</li> </ul>"},{"location":"usage/","title":"FastStockAPI Usage Guide","text":"<p>This comprehensive guide provides practical examples for using FastStockAPI across different programming languages and use cases.</p>"},{"location":"usage/#quick-start","title":"Quick Start","text":""},{"location":"usage/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000  (local development)\nhttps://your-domain.com  (production)\n</code></pre>"},{"location":"usage/#health-check","title":"Health Check","text":"<pre><code>curl http://localhost:8000/health\n</code></pre>"},{"location":"usage/#stock-market-data","title":"Stock Market Data","text":""},{"location":"usage/#get-indian-stock-price","title":"Get Indian Stock Price","text":"<pre><code># Using cURL\ncurl \"http://localhost:8000/stocks/IND/RELIANCE\"\n\n# Using Python\nimport requests\nresponse = requests.get(\"http://localhost:8000/stocks/IND/RELIANCE\")\nprint(response.json())\n</code></pre>"},{"location":"usage/#get-us-stock-price","title":"Get US Stock Price","text":"<pre><code># Using cURL\ncurl \"http://localhost:8000/stocks/US/AAPL\"\n\n# Using JavaScript\nfetch('http://localhost:8000/stocks/US/AAPL')\n    .then(res =&gt; res.json())\n    .then(data =&gt; console.log(data));\n</code></pre>"},{"location":"usage/#get-historical-stock-data","title":"Get Historical Stock Data","text":"<pre><code># Indian Stock - 1 Month\ncurl \"http://localhost:8000/stocks/historical/IND/RELIANCE?period=1mo\"\n\n# US Stock - 3 Months\ncurl \"http://localhost:8000/stocks/historical/US/AAPL?period=3mo\"\n</code></pre>"},{"location":"usage/#get-market-index-data","title":"Get Market Index Data","text":"<pre><code># US Index\ncurl \"http://localhost:8000/stocks/index/US/DJI\"\n\n# BSE Index\ncurl \"http://localhost:8000/stocks/index/BSE/SENSEX\"\n</code></pre>"},{"location":"usage/#cryptocurrency-data","title":"Cryptocurrency Data","text":""},{"location":"usage/#get-crypto-price","title":"Get Crypto Price","text":"<pre><code># Single cryptocurrency\ncurl \"http://localhost:8000/crypto/quote/BTC\"\n\n# Multiple cryptocurrencies\ncurl \"http://localhost:8000/crypto/list\"\n</code></pre>"},{"location":"usage/#get-historical-crypto-data","title":"Get Historical Crypto Data","text":"<pre><code>curl \"http://localhost:8000/crypto/historical/ETH?period=1mo\"\n</code></pre>"},{"location":"usage/#options-trading-data","title":"Options Trading Data","text":""},{"location":"usage/#get-index-price-for-options","title":"Get Index Price for Options","text":"<pre><code>curl \"http://localhost:8000/options/index-price?index=NIFTY\"\n</code></pre>"},{"location":"usage/#get-available-expiries","title":"Get Available Expiries","text":"<pre><code>curl \"http://localhost:8000/options/expiries?index=NIFTY\"\n</code></pre>"},{"location":"usage/#get-options-chain-data","title":"Get Options Chain Data","text":"<pre><code># Direct data (no CSV saving)\ncurl \"http://localhost:8000/options/direct-data?index=NIFTY&amp;expiry=160925&amp;num_strikes=10\"\n\n# Strike-specific data\ncurl \"http://localhost:8000/options/strike-data?index=NIFTY&amp;strike=24000&amp;expiry=160925&amp;option_type=BOTH\"\n</code></pre>"},{"location":"usage/#get-option-price","title":"Get Option Price","text":"<pre><code>curl \"http://localhost:8000/options/option-price?index=NIFTY&amp;strike=24000&amp;expiry=160925&amp;option_type=CE\"\n</code></pre>"},{"location":"usage/#get-historical-option-data","title":"Get Historical Option Data","text":"<pre><code>curl \"http://localhost:8000/options/historical/NIFTY?strike=24000&amp;expiry=160925&amp;option_type=CE&amp;period=1mo\"\n</code></pre>"},{"location":"usage/#fetch-options-data-json-response","title":"Fetch Options Data (JSON Response)","text":"<pre><code># Fetch nearest expiry options and return JSON directly\ncurl -X POST \"http://localhost:8000/options/fetch/json\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"index\": \"NIFTY\", \"num_strikes\": 25}'\n\n# Fetch specific expiry options and return JSON directly\ncurl -X POST \"http://localhost:8000/options/fetch/expiry/json\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"index\": \"NIFTY\", \"expiry\": \"160925\", \"num_strikes\": 25}'\n</code></pre>"},{"location":"usage/#advanced-analytics","title":"Advanced Analytics","text":""},{"location":"usage/#put-call-ratio-pcr","title":"Put-Call Ratio (PCR)","text":"<pre><code>curl \"http://localhost:8000/analytics/pcr?index=NIFTY&amp;expiry=160925\"\n</code></pre>"},{"location":"usage/#maximum-pain-calculation","title":"Maximum Pain Calculation","text":"<pre><code>curl \"http://localhost:8000/analytics/max-pain?index=NIFTY&amp;expiry=160925\"\n</code></pre>"},{"location":"usage/#top-open-interest","title":"Top Open Interest","text":"<pre><code>curl \"http://localhost:8000/analytics/top-oi?index=NIFTY&amp;expiry=160925&amp;top_n=5\"\n</code></pre>"},{"location":"usage/#complete-analytics-summary","title":"Complete Analytics Summary","text":"<pre><code>curl \"http://localhost:8000/analytics/summary?index=NIFTY&amp;expiry=160925\"\n</code></pre>"},{"location":"usage/#forex-data","title":"Forex Data","text":""},{"location":"usage/#get-exchange-rate","title":"Get Exchange Rate","text":"<pre><code>curl \"http://localhost:8000/forex/quote?from=USD&amp;to=INR\"\n</code></pre>"},{"location":"usage/#get-multiple-exchange-rates","title":"Get Multiple Exchange Rates","text":"<pre><code>curl \"http://localhost:8000/forex/quotes?base=USD&amp;symbols=EUR,GBP,JPY\"\n</code></pre>"},{"location":"usage/#get-historical-forex-data","title":"Get Historical Forex Data","text":"<pre><code>curl \"http://localhost:8000/forex/historical?from=USD&amp;to=INR&amp;period=1mo\"\n</code></pre>"},{"location":"usage/#programming-examples","title":"\ud83d\udcbb Programming Examples","text":""},{"location":"usage/#python-complete-trading-dashboard","title":"Python - Complete Trading Dashboard","text":"<pre><code>import requests\nimport pandas as pd\nfrom datetime import datetime\n\nclass FastStockAPI:\n    def __init__(self, base_url=\"http://localhost:8000\"):\n        self.base_url = base_url\n\n    def get_stock_price(self, symbol, market=\"IND\"):\n        \"\"\"Get stock price for Indian or US market\"\"\"\n        url = f\"{self.base_url}/stocks/{market}/{symbol}\"\n        response = requests.get(url)\n        return response.json()\n\n    def get_options_data(self, index, expiry, num_strikes=10):\n        \"\"\"Get options chain data\"\"\"\n        url = f\"{self.base_url}/options/direct-data\"\n        params = {\n            \"index\": index,\n            \"expiry\": expiry,\n            \"num_strikes\": num_strikes\n        }\n        response = requests.get(url, params=params)\n        return response.json()\n\n    def get_analytics(self, index, expiry):\n        \"\"\"Get complete analytics\"\"\"\n        url = f\"{self.base_url}/analytics/summary\"\n        params = {\"index\": index, \"expiry\": expiry}\n        response = requests.get(url, params=params)\n        return response.json()\n\n    def create_options_dashboard(self, index=\"NIFTY\", expiry=\"160925\"):\n        \"\"\"Create a comprehensive options dashboard\"\"\"\n        print(f\"\ud83d\udcca {index} Options Dashboard - Expiry: {expiry}\")\n        print(\"=\" * 50)\n\n        # Get index price\n        index_data = requests.get(f\"{self.base_url}/options/index-price?index={index}\").json()\n        print(f\"\ud83d\udcc8 Index Price: \u20b9{index_data['lastPrice']}\")\n\n        # Get analytics\n        analytics = self.get_analytics(index, expiry)\n        print(f\"\ud83d\udcca PCR: {analytics['pcr']:.2f}\")\n        print(f\"\ud83c\udfaf Max Pain: \u20b9{analytics['max_pain']['max_pain_strike']}\")\n\n        # Get options data\n        options_data = self.get_options_data(index, expiry, 5)\n        print(f\"\\n\ud83d\udccb Options Chain (Top 5 strikes around ATM):\")\n        for option in options_data['options'][:5]:\n            strike = option['strikePrice']\n            ce_data = option.get('CE', {})\n            pe_data = option.get('PE', {})\n\n            ce_price = ce_data.get('lastPrice', 'N/A')\n            pe_price = pe_data.get('lastPrice', 'N/A')\n\n            print(f\"\u20b9{strike}: CE \u20b9{ce_price}, PE \u20b9{pe_price}\")\n\n# Usage\napi = FastStockAPI()\napi.create_options_dashboard()\n</code></pre>"},{"location":"usage/#javascript-real-time-dashboard","title":"JavaScript - Real-time Dashboard","text":"<pre><code>class FastStockDashboard {\n    constructor(baseUrl = 'http://localhost:8000') {\n        this.baseUrl = baseUrl;\n        this.updateInterval = 30000; // 30 seconds\n    }\n\n    async getStockData(symbol, market = 'IND') {\n        const response = await fetch(`${this.baseUrl}/stocks/${market}/${symbol}`);\n        return await response.json();\n    }\n\n    async getOptionsData(index, expiry, numStrikes = 10) {\n        const params = new URLSearchParams({\n            index,\n            expiry,\n            num_strikes: numStrikes\n        });\n        const response = await fetch(`${this.baseUrl}/options/direct-data?${params}`);\n        return await response.json();\n    }\n\n    async getAnalytics(index, expiry) {\n        const params = new URLSearchParams({ index, expiry });\n        const response = await fetch(`${this.baseUrl}/analytics/summary?${params}`);\n        return await response.json();\n    }\n\n    async updateDashboard() {\n        try {\n            // Update stock prices\n            const [reliance, tcs, aapl] = await Promise.all([\n                this.getStockData('RELIANCE'),\n                this.getStockData('TCS'),\n                this.getStockData('AAPL', 'US')\n            ]);\n\n            this.updateStockDisplay('reliance', reliance);\n            this.updateStockDisplay('tcs', tcs);\n            this.updateStockDisplay('aapl', aapl);\n\n            // Update options analytics\n            const analytics = await this.getAnalytics('NIFTY', '160925');\n            this.updateAnalyticsDisplay(analytics);\n\n            // Update options chain\n            const optionsData = await this.getOptionsData('NIFTY', '160925', 5);\n            this.updateOptionsTable(optionsData);\n\n        } catch (error) {\n            console.error('Dashboard update failed:', error);\n        }\n    }\n\n    updateStockDisplay(elementId, data) {\n        const element = document.getElementById(elementId);\n        if (element) {\n            element.innerHTML = `\n                &lt;div class=\"stock-card\"&gt;\n                    &lt;h3&gt;${data.symbol}&lt;/h3&gt;\n                    &lt;p class=\"price\"&gt;\u20b9${data.lastPrice}&lt;/p&gt;\n                    &lt;p class=\"change ${data.pChange &gt;= 0 ? 'positive' : 'negative'}\"&gt;\n                        ${data.pChange}% (${data.change &gt;= 0 ? '+' : ''}${data.change})\n                    &lt;/p&gt;\n                &lt;/div&gt;\n            `;\n        }\n    }\n\n    updateAnalyticsDisplay(analytics) {\n        document.getElementById('pcr').textContent = analytics.pcr.toFixed(2);\n        document.getElementById('max-pain').textContent = `\u20b9${analytics.max_pain.max_pain_strike}`;\n        document.getElementById('atm-strike').textContent = analytics.meta.atmStrike;\n    }\n\n    updateOptionsTable(optionsData) {\n        const tbody = document.getElementById('options-table-body');\n        tbody.innerHTML = optionsData.options.slice(0, 5).map(option =&gt; `\n            &lt;tr&gt;\n                &lt;td&gt;\u20b9${option.strikePrice}&lt;/td&gt;\n                &lt;td&gt;\u20b9${option.CE?.lastPrice || 'N/A'}&lt;/td&gt;\n                &lt;td&gt;${option.CE?.openInterest || 'N/A'}&lt;/td&gt;\n                &lt;td&gt;\u20b9${option.PE?.lastPrice || 'N/A'}&lt;/td&gt;\n                &lt;td&gt;${option.PE?.openInterest || 'N/A'}&lt;/td&gt;\n            &lt;/tr&gt;\n        `).join('');\n    }\n\n    startRealTimeUpdates() {\n        this.updateDashboard(); // Initial update\n        setInterval(() =&gt; this.updateDashboard(), this.updateInterval);\n    }\n}\n\n// Usage\nconst dashboard = new FastStockDashboard();\ndashboard.startRealTimeUpdates();\n</code></pre>"},{"location":"usage/#java-enterprise-integration","title":"Java - Enterprise Integration","text":"<pre><code>import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class FastStockClient {\n    private final String baseUrl;\n    private final HttpClient httpClient;\n    private final ObjectMapper objectMapper;\n\n    public FastStockClient(String baseUrl) {\n        this.baseUrl = baseUrl;\n        this.httpClient = HttpClient.newHttpClient();\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public StockQuote getIndianStock(String symbol) throws Exception {\n        String url = baseUrl + \"/stocks/IND/\" + symbol;\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build();\n\n        HttpResponse&lt;String&gt; response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n        if (response.statusCode() == 200) {\n            return objectMapper.readValue(response.body(), StockQuote.class);\n        } else {\n            throw new RuntimeException(\"API request failed: \" + response.statusCode());\n        }\n    }\n\n    public OptionsData getOptionsData(String index, String expiry) throws Exception {\n        String url = String.format(\"%s/options/direct-data?index=%s&amp;expiry=%s&amp;num_strikes=10\",\n                                 baseUrl, index, expiry);\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build();\n\n        HttpResponse&lt;String&gt; response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n        if (response.statusCode() == 200) {\n            return objectMapper.readValue(response.body(), OptionsData.class);\n        } else {\n            throw new RuntimeException(\"API request failed: \" + response.statusCode());\n        }\n    }\n\n    public AnalyticsData getAnalytics(String index, String expiry) throws Exception {\n        String url = String.format(\"%s/analytics/summary?index=%s&amp;expiry=%s\",\n                                 baseUrl, index, expiry);\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build();\n\n        HttpResponse&lt;String&gt; response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n        if (response.statusCode() == 200) {\n            return objectMapper.readValue(response.body(), AnalyticsData.class);\n        } else {\n            throw new RuntimeException(\"API request failed: \" + response.statusCode());\n        }\n    }\n}\n\n// Usage\npublic class Main {\n    public static void main(String[] args) {\n        FastStockClient client = new FastStockClient(\"http://localhost:8000\");\n\n        try {\n            // Get stock data\n            StockQuote reliance = client.getIndianStock(\"RELIANCE\");\n            System.out.println(\"RELIANCE Price: \u20b9\" + reliance.getLastPrice());\n\n            // Get options data\n            OptionsData options = client.getOptionsData(\"NIFTY\", \"160925\");\n            System.out.println(\"Options loaded: \" + options.getOptions().size());\n\n            // Get analytics\n            AnalyticsData analytics = client.getAnalytics(\"NIFTY\", \"160925\");\n            System.out.println(\"PCR: \" + analytics.getPcr());\n\n        } catch (Exception e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"usage/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"usage/#algorithmic-trading-bot","title":"Algorithmic Trading Bot","text":"<pre><code>import time\nimport logging\nfrom fastapi_client import FastStockAPI\n\nclass OptionsTradingBot:\n    def __init__(self):\n        self.api = FastStockAPI()\n        self.logger = logging.getLogger(__name__)\n\n    def monitor_pcr_divergence(self, index=\"NIFTY\", threshold=0.3):\n        \"\"\"Monitor PCR divergence for trading signals\"\"\"\n        expiries = self.api.get_expiries(index)\n\n        for expiry in expiries[:2]:  # Check near-term expiries\n            analytics = self.api.get_analytics(index, expiry)\n\n            if analytics['pcr'] &gt; 1.5:  # Extreme bearish sentiment\n                self.logger.info(f\"\ud83d\udc3b Bearish signal: PCR {analytics['pcr']} for {expiry}\")\n                # Implement bearish strategy\n\n            elif analytics['pcr'] &lt; 0.7:  # Extreme bullish sentiment\n                self.logger.info(f\"\ud83d\udc02 Bullish signal: PCR {analytics['pcr']} for {expiry}\")\n                # Implement bullish strategy\n\n    def max_pain_levels(self, index=\"NIFTY\"):\n        \"\"\"Track max pain levels for position management\"\"\"\n        expiries = self.api.get_expiries(index)\n\n        for expiry in expiries[:3]:\n            analytics = self.api.get_analytics(index, expiry)\n            max_pain = analytics['max_pain']['max_pain_strike']\n\n            # Check if current price is near max pain\n            index_price = self.api.get_index_price(index)['lastPrice']\n            distance = abs(index_price - max_pain) / index_price * 100\n\n            if distance &lt; 2:  # Within 2% of max pain\n                self.logger.warning(f\"\u26a0\ufe0f Near max pain: \u20b9{max_pain} for {expiry}\")\n\n    def run(self):\n        \"\"\"Main bot loop\"\"\"\n        while True:\n            try:\n                self.monitor_pcr_divergence()\n                self.max_pain_levels()\n                time.sleep(300)  # Check every 5 minutes\n\n            except Exception as e:\n                self.logger.error(f\"Bot error: {e}\")\n                time.sleep(60)  # Wait before retry\n\n# Usage\nif __name__ == \"__main__\":\n    bot = OptionsTradingBot()\n    bot.run()\n</code></pre>"},{"location":"usage/#portfolio-tracker","title":"Portfolio Tracker","text":"<pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n\nclass PortfolioTracker:\n    def __init__(self, api_client):\n        self.api = api_client\n        self.portfolio = {}\n\n    def add_position(self, symbol, quantity, market=\"IND\"):\n        \"\"\"Add a position to the portfolio\"\"\"\n        self.portfolio[symbol] = {\n            'quantity': quantity,\n            'market': market,\n            'entry_date': datetime.now()\n        }\n\n    def get_portfolio_value(self):\n        \"\"\"Calculate current portfolio value\"\"\"\n        total_value = 0\n        positions_data = []\n\n        for symbol, position in self.portfolio.items():\n            try:\n                if position['market'] == 'IND':\n                    data = self.api.get_stock_price(symbol, 'IND')\n                elif position['market'] == 'US':\n                    data = self.api.get_stock_price(symbol, 'US')\n                else:\n                    continue\n\n                value = data['lastPrice'] * position['quantity']\n                total_value += value\n\n                positions_data.append({\n                    'symbol': symbol,\n                    'quantity': position['quantity'],\n                    'price': data['lastPrice'],\n                    'value': value,\n                    'change': data['pChange']\n                })\n\n            except Exception as e:\n                print(f\"Error getting data for {symbol}: {e}\")\n\n        return {\n            'total_value': total_value,\n            'positions': positions_data,\n            'timestamp': datetime.now()\n        }\n\n    def generate_report(self):\n        \"\"\"Generate portfolio performance report\"\"\"\n        portfolio_data = self.get_portfolio_value()\n\n        print(f\"\ud83d\udcca Portfolio Report - {portfolio_data['timestamp']}\")\n        print(f\"\ud83d\udcb0 Total Value: \u20b9{portfolio_data['total_value']:,.2f}\")\n        print(\"-\" * 50)\n\n        for position in portfolio_data['positions']:\n            change_symbol = \"\ud83d\udcc8\" if position['change'] &gt;= 0 else \"\ud83d\udcc9\"\n            print(f\"{position['symbol']}: {position['quantity']} shares @ \u20b9{position['price']}\")\n            print(f\"  Value: \u20b9{position['value']:,.2f} {change_symbol} {position['change']}%\")\n            print()\n\n# Usage\ntracker = PortfolioTracker(FastStockAPI())\ntracker.add_position('RELIANCE', 100)\ntracker.add_position('TCS', 50)\ntracker.add_position('AAPL', 10, 'US')\n\ntracker.generate_report()\n</code></pre>"},{"location":"usage/#error-handling","title":"Error Handling","text":""},{"location":"usage/#common-error-patterns","title":"Common Error Patterns","text":"<pre><code>def robust_api_call(func, *args, **kwargs):\n    \"\"\"Robust API call with error handling and retries\"\"\"\n    max_retries = 3\n    retry_delay = 1\n\n    for attempt in range(max_retries):\n        try:\n            result = func(*args, **kwargs)\n\n            # Check for API-specific errors\n            if isinstance(result, dict) and 'error' in result:\n                raise ValueError(result['error'])\n\n            return result\n\n        except requests.exceptions.ConnectionError:\n            if attempt &lt; max_retries - 1:\n                time.sleep(retry_delay * (2 ** attempt))  # Exponential backoff\n                continue\n            raise\n\n        except requests.exceptions.Timeout:\n            if attempt &lt; max_retries - 1:\n                time.sleep(retry_delay)\n                continue\n            raise\n\n        except ValueError as e:\n            # API returned an error\n            print(f\"API Error: {e}\")\n            raise\n\n# Usage\n@robust_api_call\ndef get_stock_with_retry(symbol):\n    return requests.get(f\"http://localhost:8000/stocks/IND/{symbol}\").json()\n</code></pre>"},{"location":"usage/#best-practices","title":"Best Practices","text":""},{"location":"usage/#1-rate-limiting","title":"1. Rate Limiting","text":"<pre><code>import time\n\nclass RateLimiter:\n    def __init__(self, calls_per_minute=50):\n        self.calls_per_minute = calls_per_minute\n        self.calls = []\n\n    def can_make_call(self):\n        now = time.time()\n        # Remove calls older than 1 minute\n        self.calls = [call for call in self.calls if now - call &lt; 60]\n\n        return len(self.calls) &lt; self.calls_per_minute\n\n    def record_call(self):\n        self.calls.append(time.time())\n\n# Usage\nlimiter = RateLimiter()\n\nif limiter.can_make_call():\n    # Make API call\n    limiter.record_call()\nelse:\n    time.sleep(1)  # Wait before retry\n</code></pre>"},{"location":"usage/#2-data-caching","title":"2. Data Caching","text":"<pre><code>from cachetools import TTLCache\n\nclass DataCache:\n    def __init__(self, ttl_seconds=300):  # 5 minutes default\n        self.cache = TTLCache(maxsize=100, ttl=ttl_seconds)\n\n    def get(self, key):\n        return self.cache.get(key)\n\n    def set(self, key, value):\n        self.cache[key] = value\n\n    def get_or_fetch(self, key, fetch_func):\n        \"\"\"Get from cache or fetch and cache\"\"\"\n        if key in self.cache:\n            return self.cache[key]\n\n        value = fetch_func()\n        self.cache[key] = value\n        return value\n\n# Usage\ncache = DataCache()\n\ndef get_cached_stock_price(symbol):\n    return cache.get_or_fetch(\n        f\"stock_{symbol}\",\n        lambda: requests.get(f\"http://localhost:8000/stocks/IND/{symbol}\").json()\n    )\n</code></pre>"},{"location":"usage/#3-logging-and-monitoring","title":"3. Logging and Monitoring","text":"<pre><code>import logging\nimport json\n\nclass APIMonitor:\n    def __init__(self):\n        self.logger = logging.getLogger(__name__)\n        self.request_count = 0\n        self.error_count = 0\n\n    def log_request(self, endpoint, params=None, response_time=None):\n        self.request_count += 1\n        log_data = {\n            'endpoint': endpoint,\n            'params': params,\n            'response_time': response_time,\n            'timestamp': datetime.now().isoformat()\n        }\n        self.logger.info(f\"API Request: {json.dumps(log_data)}\")\n\n    def log_error(self, endpoint, error):\n        self.error_count += 1\n        self.logger.error(f\"API Error - {endpoint}: {error}\")\n\n    def get_stats(self):\n        return {\n            'total_requests': self.request_count,\n            'total_errors': self.error_count,\n            'error_rate': self.error_count / max(self.request_count, 1)\n        }\n\n# Usage\nmonitor = APIMonitor()\n\ndef monitored_api_call(endpoint, **kwargs):\n    start_time = time.time()\n\n    try:\n        response = requests.get(f\"http://localhost:8000{endpoint}\", **kwargs)\n        response_time = time.time() - start_time\n\n        monitor.log_request(endpoint, kwargs, response_time)\n        return response.json()\n\n    except Exception as e:\n        monitor.log_error(endpoint, str(e))\n        raise\n</code></pre>"},{"location":"usage/#production-deployment","title":"Production Deployment","text":""},{"location":"usage/#docker-deployment","title":"Docker Deployment","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nEXPOSE 8000\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"usage/#docker-compose-for-full-stack","title":"Docker Compose for Full Stack","text":"<pre><code>version: '3.8'\nservices:\n  fastapi:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - redis\n\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379:6379\"\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n</code></pre> <p>This comprehensive guide covers everything from basic API calls to advanced trading strategies and production deployment. Use the examples as starting points and adapt them to your specific use cases. <pre><code>Example response:\n\n```json\n{\n  \"symbol\": \"NIFTY\",\n  \"lastPrice\": 23456.75,\n  \"pChange\": 0.85,\n  \"change\": 198.50,\n  \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre></p> <p>Errors - 400 Bad Request: missing or malformed query parameter - 404 Not Found: index not found or no data returned from source - 500 Server Error: unexpected internal error (rare \u2014 please check logs and upstream data source)</p> <p>2) Get Stock Price</p> <p>Description: Returns the latest price data for an NSE stock.</p> <p>Endpoint (path):</p> <pre><code>GET /api/v1/market/price/stock/{symbol}\n</code></pre> <p>Example (path form):</p> <pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/market/price/stock/RELIANCE.NS\"\n</code></pre> <p>Endpoint (query):</p> <pre><code>GET /api/v1/market/price/stock?symbol={symbol}\n</code></pre> <p>Example (query form). The API will try the exact symbol and then fall back to appending <code>.NS</code> if needed:</p> <pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol=RELIANCE\"\n</code></pre> <p>Example response:</p> <pre><code>{\n  \"symbol\": \"RELIANCE.NS\",\n  \"companyName\": \"Reliance Industries Ltd\",\n  \"lastPrice\": 2456.75,\n  \"pChange\": 1.25,\n  \"change\": 30.5,\n  \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre> <p>Errors - 400 Bad Request: missing required parameter <code>symbol</code> - 404 Not Found: symbol not supported or delisted - 500 Server Error: unexpected internal error</p> <p>Client examples</p> <p>Python (requests)</p> <pre><code>import requests\n\nBASE = \"https://fastapi-stock-data.onrender.com\"\n\n# Index\nr = requests.get(f\"{BASE}/api/v1/market/price/index/NIFTY\")\nif r.ok:\n    print(r.json())\nelse:\n    print(\"Error\", r.status_code, r.text)\n\n# Stock (query form)\nr = requests.get(f\"{BASE}/api/v1/market/price/stock\", params={\"symbol\": \"RELIANCE\"})\nif r.ok:\n    print(r.json())\nelse:\n    print(\"Error\", r.status_code, r.text)\n</code></pre> <p>JavaScript (fetch)</p> <pre><code>const base = 'https://fastapi-stock-data.onrender.com';\n\n// Index\nfetch(`${base}/api/v1/market/price/index?index=NIFTY`)\n  .then(r =&gt; r.json())\n  .then(console.log)\n  .catch(console.error);\n\n// Stock\nfetch(`${base}/api/v1/market/price/stock?symbol=RELIANCE`)\n  .then(r =&gt; r.json())\n  .then(console.log)\n  .catch(console.error);\n</code></pre> <p>Tips &amp; Troubleshooting</p> <ul> <li>If you get <code>404</code> with message like \"No lastPrice found... Available keys: [...]\", the upstream NSE response shape changed for that symbol or the symbol is not available. Try:</li> <li>Verify the symbol on the NSE website</li> <li>Use the alternative form (path vs query)</li> <li>Try the <code>.NS</code> suffix for stocks</li> <li>For indices use the simple names (<code>NIFTY</code>, <code>BANKNIFTY</code>). Historical endpoints require Yahoo-style symbols like <code>^NSENIFTY</code>.</li> <li>For crypto and other parts of the API, refer to the corresponding API docs pages under <code>docs/api</code>.</li> </ul> <p>Best practices</p> <ul> <li>Cache responses where suitable (indices do not change every millisecond for most use cases).</li> <li>Respect upstream rate limits (NSE, Binance). Add client-side throttling.</li> <li>Prefer the path form in server-to-server calls (stable, easier to log), use the query form if your client framework builds query params more conveniently.</li> </ul> <p>Further reading</p> <ul> <li>Full API reference: <code>docs/api/market.md</code></li> <li>Symbol reference: <code>docs/symbols/nse-stocks.md</code></li> </ul> <p>If you want, I can add this file to the navigation (<code>mkdocs.yml</code>) and update examples across the docs so both URL styles are shown consistently.</p>"},{"location":"api/analytics/","title":"Analytics API","text":"<p>This section documents the advanced analytics endpoints in FastStockAPI, providing sophisticated options trading analytics including PCR, Max Pain, and Open Interest analysis.</p>"},{"location":"api/analytics/#overview","title":"Overview","text":"<p>The analytics API provides powerful trading analytics tools for options data, helping traders make informed decisions with data-driven insights.</p>"},{"location":"api/analytics/#base-url","title":"\ud83d\udd17 Base URL","text":"<pre><code>http://localhost:8000  (local development)\nhttps://your-domain.com  (production)\n</code></pre>"},{"location":"api/analytics/#endpoints","title":"Endpoints","text":""},{"location":"api/analytics/#1-get-put-call-ratio-pcr","title":"1. Get Put-Call Ratio (PCR)","text":"<p>Calculate the Put-Call Ratio for options data.</p> <p>Endpoint: <code>GET /analytics/pcr</code></p> <p>Parameters: - <code>index</code> (query): Index symbol (e.g., <code>NIFTY</code>, <code>BANKNIFTY</code>) - <code>expiry</code> (query, optional): Expiry date in DDMMYY format</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/analytics/pcr?index=NIFTY&amp;expiry=160925\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"pcr\": 1.25,\n    \"total_ce_oi\": 125000000,\n    \"total_pe_oi\": 100000000,\n    \"index\": \"NIFTY\",\n    \"expiry\": \"16-Sep-2025\"\n}\n</code></pre></p>"},{"location":"api/analytics/#2-calculate-max-pain","title":"2. Calculate Max Pain","text":"<p>Find the maximum pain strike price for options.</p> <p>Endpoint: <code>GET /analytics/max-pain</code></p> <p>Parameters: - <code>index</code> (query): Index symbol - <code>expiry</code> (query, optional): Expiry date in DDMMYY format</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/analytics/max-pain?index=NIFTY&amp;expiry=160925\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"max_pain_strike\": 24500,\n    \"total_ce_oi\": 125000000,\n    \"total_pe_oi\": 100000000,\n    \"total_oi\": 225000000,\n    \"index\": \"NIFTY\",\n    \"expiry\": \"16-Sep-2025\"\n}\n</code></pre></p>"},{"location":"api/analytics/#3-get-top-open-interest","title":"3. Get Top Open Interest","text":"<p>Find strikes with highest open interest.</p> <p>Endpoint: <code>GET /analytics/top-oi</code></p> <p>Parameters: - <code>index</code> (query): Index symbol - <code>expiry</code> (query, optional): Expiry date in DDMMYY format - <code>top_n</code> (query, optional): Number of top strikes to return (default: 5)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/analytics/top-oi?index=NIFTY&amp;expiry=160925&amp;top_n=5\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"top_strikes\": [\n        {\n            \"strike\": 24000,\n            \"oi_ce\": 2450000,\n            \"oi_pe\": 1850000,\n            \"total_oi\": 4300000,\n            \"oi_ce_percentage\": 12.5,\n            \"oi_pe_percentage\": 9.2\n        },\n        {\n            \"strike\": 24500,\n            \"oi_ce\": 2100000,\n            \"oi_pe\": 1950000,\n            \"total_oi\": 4050000,\n            \"oi_ce_percentage\": 10.7,\n            \"oi_pe_percentage\": 9.8\n        }\n    ],\n    \"index\": \"NIFTY\",\n    \"expiry\": \"16-Sep-2025\"\n}\n</code></pre></p>"},{"location":"api/analytics/#4-get-complete-analytics-summary","title":"4. Get Complete Analytics Summary","text":"<p>Get comprehensive analytics for options data.</p> <p>Endpoint: <code>GET /analytics/summary</code></p> <p>Parameters: - <code>index</code> (query): Index symbol - <code>expiry</code> (query, optional): Expiry date in DDMMYY format - <code>limit</code> (query, optional): Number of records to analyze</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/analytics/summary?index=NIFTY&amp;expiry=160925&amp;limit=500\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"meta\": {\n        \"createdAtUTC\": \"2024-12-09T15:30:00Z\",\n        \"indexName\": \"NIFTY\",\n        \"nearestExpiry\": \"16-Sep-2025\",\n        \"underlyingValue\": 24500.75,\n        \"atmStrike\": 24500,\n        \"selectedStrikesRange\": [23500, 25500],\n        \"totalStrikesFetched\": 41\n    },\n    \"pcr\": 1.25,\n    \"max_pain\": {\n        \"max_pain_strike\": 24500,\n        \"total_ce_oi\": 125000000,\n        \"total_pe_oi\": 100000000,\n        \"total_oi\": 225000000\n    },\n    \"top_oi\": [\n        {\n            \"strike\": 24000,\n            \"oi_ce\": 2450000,\n            \"oi_pe\": 1850000,\n            \"total_oi\": 4300000\n        }\n    ],\n    \"atm_analysis\": {\n        \"atm_strike\": 24500,\n        \"atm_ce_price\": 125.50,\n        \"atm_pe_price\": 95.25,\n        \"atm_ce_oi\": 2100000,\n        \"atm_pe_oi\": 1950000\n    }\n}\n</code></pre></p>"},{"location":"api/analytics/#analytics-explained","title":"Analytics Explained","text":""},{"location":"api/analytics/#put-call-ratio-pcr","title":"Put-Call Ratio (PCR)","text":"<ul> <li>Formula: Total PE Open Interest / Total CE Open Interest</li> <li>Interpretation:</li> <li>PCR &gt; 1: Bearish sentiment (more puts)</li> <li>PCR &lt; 1: Bullish sentiment (more calls)</li> <li>PCR = 1: Neutral sentiment</li> </ul>"},{"location":"api/analytics/#maximum-pain","title":"Maximum Pain","text":"<ul> <li>Definition: Strike price where the total value of expiring options is minimized</li> <li>Calculation: Sums open interest for calls above and puts below each strike</li> <li>Significance: Price level where option writers (market makers) suffer least loss</li> </ul>"},{"location":"api/analytics/#open-interest-analysis","title":"Open Interest Analysis","text":"<ul> <li>Top OI Strikes: Most actively traded strike prices</li> <li>OI Distribution: Shows where market participants have positioned</li> <li>Volume vs OI: Fresh positions vs existing positions</li> </ul>"},{"location":"api/analytics/#usage-examples","title":"\ud83d\udca1 Usage Examples","text":""},{"location":"api/analytics/#python-example-complete-analysis","title":"Python Example - Complete Analysis","text":"<pre><code>import requests\n\ndef analyze_options(index, expiry):\n    # Get PCR\n    pcr_response = requests.get(\n        \"http://localhost:8000/analytics/pcr\",\n        params={\"index\": index, \"expiry\": expiry}\n    )\n    pcr_data = pcr_response.json()\n\n    # Get Max Pain\n    max_pain_response = requests.get(\n        \"http://localhost:8000/analytics/max-pain\",\n        params={\"index\": index, \"expiry\": expiry}\n    )\n    max_pain_data = max_pain_response.json()\n\n    # Get Top OI\n    top_oi_response = requests.get(\n        \"http://localhost:8000/analytics/top-oi\",\n        params={\"index\": index, \"expiry\": expiry, \"top_n\": 3}\n    )\n    top_oi_data = top_oi_response.json()\n\n    print(f\"\ud83d\udcca {index} Analysis for {expiry}\")\n    print(f\"PCR: {pcr_data['pcr']:.2f}\")\n    print(f\"Max Pain: \u20b9{max_pain_data['max_pain_strike']}\")\n\n    print(\"\\n\ud83c\udfc6 Top OI Strikes:\")\n    for strike in top_oi_data['top_strikes']:\n        print(f\"\u20b9{strike['strike']}: {strike['total_oi']:,} contracts\")\n\n# Usage\nanalyze_options(\"NIFTY\", \"160925\")\n</code></pre>"},{"location":"api/analytics/#javascript-example-real-time-dashboard","title":"JavaScript Example - Real-time Dashboard","text":"<pre><code>async function updateAnalytics(index, expiry) {\n    try {\n        // Get all analytics in parallel\n        const [pcrRes, maxPainRes, topOiRes] = await Promise.all([\n            fetch(`/analytics/pcr?index=${index}&amp;expiry=${expiry}`),\n            fetch(`/analytics/max-pain?index=${index}&amp;expiry=${expiry}`),\n            fetch(`/analytics/top-oi?index=${index}&amp;expiry=${expiry}&amp;top_n=5`)\n        ]);\n\n        const [pcr, maxPain, topOi] = await Promise.all([\n            pcrRes.json(),\n            maxPainRes.json(),\n            topOiRes.json()\n        ]);\n\n        // Update UI\n        document.getElementById('pcr-value').textContent = pcr.pcr.toFixed(2);\n        document.getElementById('max-pain').textContent = `\u20b9${maxPain.max_pain_strike}`;\n\n        // Update top OI table\n        const tableBody = document.getElementById('top-oi-table');\n        tableBody.innerHTML = topOi.top_strikes.map(strike =&gt; `\n            &lt;tr&gt;\n                &lt;td&gt;\u20b9${strike.strike}&lt;/td&gt;\n                &lt;td&gt;${strike.total_oi.toLocaleString()}&lt;/td&gt;\n                &lt;td&gt;${strike.oi_ce_percentage.toFixed(1)}%&lt;/td&gt;\n                &lt;td&gt;${strike.oi_pe_percentage.toFixed(1)}%&lt;/td&gt;\n            &lt;/tr&gt;\n        `).join('');\n\n    } catch (error) {\n        console.error('Error updating analytics:', error);\n    }\n}\n\n// Update every 30 seconds\nsetInterval(() =&gt; updateAnalytics('NIFTY', '160925'), 30000);\n</code></pre>"},{"location":"api/analytics/#trading-insights","title":"Trading Insights","text":""},{"location":"api/analytics/#pcr-interpretation","title":"PCR Interpretation","text":"<pre><code>function interpretPCR(pcr) {\n    if (pcr &gt; 1.5) return \"\ud83d\udd34 Extremely Bearish\";\n    if (pcr &gt; 1.2) return \"\ud83d\udfe0 Bearish\";\n    if (pcr &gt; 0.8) return \"\ud83d\udfe1 Neutral\";\n    if (pcr &gt; 0.5) return \"\ud83d\udfe2 Bullish\";\n    return \"\ud83d\udfe2 Extremely Bullish\";\n}\n</code></pre>"},{"location":"api/analytics/#max-pain-strategy","title":"Max Pain Strategy","text":"<pre><code>function maxPainStrategy(currentPrice, maxPain) {\n    const diff = Math.abs(currentPrice - maxPain) / currentPrice * 100;\n\n    if (diff &lt; 1) return \"\ud83c\udfaf At Max Pain - High manipulation risk\";\n    if (diff &lt; 3) return \"\u26a0\ufe0f Near Max Pain - Watch closely\";\n    return \"\u2705 Away from Max Pain - Natural movement\";\n}\n</code></pre>"},{"location":"api/analytics/#important-notes","title":"\u26a0\ufe0f Important Notes","text":"<ul> <li>Data Freshness: Analytics are based on last fetched options data</li> <li>Market Hours: NSE options data available during market hours</li> <li>Expiry Effects: Analytics most relevant close to expiry</li> <li>Liquidity: Higher OI strikes provide better liquidity</li> <li>Volatility: PCR and OI patterns change with market volatility</li> </ul>"},{"location":"api/analytics/#rate-limits","title":"\ud83d\udd04 Rate Limits","text":"<ul> <li>PCR requests: 50 per minute</li> <li>Max Pain requests: 50 per minute</li> <li>Top OI requests: 30 per minute</li> <li>Summary requests: 20 per minute</li> </ul>"},{"location":"api/analytics/#supported-indices","title":"Supported Indices","text":"<ul> <li>NIFTY: Primary index analytics</li> <li>BANKNIFTY: Banking sector</li> <li>NIFTYIT: Information Technology</li> <li>NIFTYPHARMA: Pharmaceuticals</li> <li>NIFTYAUTO: Automobile sector</li> </ul>"},{"location":"api/analytics/#best-practices","title":"Best Practices","text":"<ol> <li>Use Recent Data: Fetch fresh options data before analytics</li> <li>Compare Timeframes: Analyze PCR trends over time</li> <li>Combine Metrics: Use PCR + Max Pain + OI together</li> <li>Context Matters: Consider overall market sentiment</li> <li>Risk Management: Don't rely solely on technical indicators</li> <li>Multiple Expiries: Compare near-term vs far-term analytics</li> </ol>"},{"location":"api/analytics/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/analytics/#custom-pcr-calculation","title":"Custom PCR Calculation","text":"<pre><code>def custom_pcr(ce_oi, pe_oi, min_strike=None, max_strike=None):\n    \"\"\"Calculate PCR for specific strike range\"\"\"\n    if min_strike and max_strike:\n        # Filter strikes within range\n        filtered_ce = sum(oi for strike, oi in ce_oi.items()\n                         if min_strike &lt;= strike &lt;= max_strike)\n        filtered_pe = sum(oi for strike, oi in pe_oi.items()\n                         if min_strike &lt;= strike &lt;= max_strike)\n        return filtered_pe / filtered_ce if filtered_ce &gt; 0 else 0\n    return sum(pe_oi.values()) / sum(ce_oi.values()) if sum(ce_oi.values()) &gt; 0 else 0\n</code></pre>"},{"location":"api/analytics/#oi-concentration-analysis","title":"OI Concentration Analysis","text":"<pre><code>def oi_concentration(top_oi_strikes, total_oi):\n    \"\"\"Calculate OI concentration in top strikes\"\"\"\n    top_total = sum(strike['total_oi'] for strike in top_oi_strikes)\n    return (top_total / total_oi) * 100 if total_oi &gt; 0 else 0\n</code></pre> <p>Parameters: - <code>index</code> (query, optional): Index name (default: <code>NIFTY</code>) - <code>limit</code> (query, optional): Number of strikes to return (default: 10)</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/analytics/top-oi?index=NIFTY&amp;limit=5\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"top_strikes\": [\n        {\n            \"strike_price\": 23500,\n            \"total_oi\": 2500000,\n            \"put_oi\": 1500000,\n            \"call_oi\": 1000000,\n            \"oi_change\": 125000\n        },\n        {\n            \"strike_price\": 24000,\n            \"total_oi\": 2200000,\n            \"put_oi\": 1200000,\n            \"call_oi\": 1000000,\n            \"oi_change\": 98000\n        }\n    ],\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/analytics/#3-max-pain-calculation","title":"3. Max Pain Calculation","text":"<p>Get the Max Pain strike price for options expiry.</p> <p>Endpoint: <code>GET /api/v1/analytics/max-pain?index=NIFTY</code></p> <p>Parameters: - <code>index</code> (query, optional): Index name (default: <code>NIFTY</code>)</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/analytics/max-pain?index=NIFTY\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"max_pain_strike\": 23800,\n    \"total_oi_at_max_pain\": 3500000,\n    \"put_oi_at_max_pain\": 1800000,\n    \"call_oi_at_max_pain\": 1700000,\n    \"calculation_method\": \"Total OI at strike price\",\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/analytics/#4-analytics-summary","title":"4. Analytics Summary","text":"<p>Get comprehensive analytics summary for an index.</p> <p>Endpoint: <code>GET /api/v1/analytics/summary?index=NIFTY</code></p> <p>Parameters: - <code>index</code> (query, optional): Index name (default: <code>NIFTY</code>)</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/analytics/summary?index=NIFTY\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"current_price\": 23456.75,\n    \"pcr\": 1.25,\n    \"max_pain\": 23800,\n    \"top_strikes\": [\n        {\n            \"strike_price\": 23500,\n            \"total_oi\": 2500000\n        }\n    ],\n    \"market_sentiment\": \"Bullish\",\n    \"volatility_indicator\": \"Moderate\",\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/analytics/#5-options-expiries","title":"5. Options Expiries","text":"<p>Get available expiry dates for options.</p> <p>Endpoint: <code>GET /api/v1/options/expiries?index=NIFTY</code></p> <p>Parameters: - <code>index</code> (query, optional): Index name (default: <code>NIFTY</code>)</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/options/expiries?index=NIFTY\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"expiries\": [\n        \"14-Dec-2024\",\n        \"21-Dec-2024\",\n        \"28-Dec-2024\",\n        \"25-Jan-2025\"\n    ],\n    \"current_expiry\": \"14-Dec-2024\",\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/analytics/#6-latest-options-chain","title":"6. Latest Options Chain","text":"<p>Get the latest options chain data.</p> <p>Endpoint: <code>GET /api/v1/options/latest?index=NIFTY</code></p> <p>Parameters: - <code>index</code> (query, optional): Index name (default: <code>NIFTY</code>) - <code>limit</code> (query, optional): Number of strikes to return (default: 20)</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/options/latest?index=NIFTY&amp;limit=10\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"spot_price\": 23456.75,\n    \"expiry\": \"14-Dec-2024\",\n    \"options_chain\": [\n        {\n            \"strike_price\": 23000,\n            \"put\": {\n                \"oi\": 1250000,\n                \"change_in_oi\": 25000,\n                \"volume\": 50000,\n                \"iv\": 15.5,\n                \"ltp\": 45.25,\n                \"net_change\": 2.15\n            },\n            \"call\": {\n                \"oi\": 980000,\n                \"change_in_oi\": 15000,\n                \"volume\": 35000,\n                \"iv\": 14.2,\n                \"ltp\": 456.75,\n                \"net_change\": 25.50\n            }\n        }\n    ],\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/analytics/#7-fetch-options-chain-background","title":"7. Fetch Options Chain (Background)","text":"<p>Fetch and cache options chain data asynchronously.</p> <p>Endpoint: <code>POST /api/v1/options/fetch</code></p> <p>Parameters: - <code>index</code> (body): Index name - <code>expiry</code> (body, optional): Specific expiry date</p> <p>Example Request: <pre><code>curl -X POST \"https://fastapi-stock-data.onrender.com/api/v1/options/fetch\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"index\": \"NIFTY\"}'\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"job_id\": \"abc123-def456-ghi789\",\n    \"status\": \"processing\",\n    \"message\": \"Options data fetch initiated\",\n    \"estimated_time\": \"30-60 seconds\"\n}\n</code></pre></p>"},{"location":"api/analytics/#8-fetch-specific-expiry-options","title":"8. Fetch Specific Expiry Options","text":"<p>Fetch options data for a specific expiry date.</p> <p>Endpoint: <code>POST /api/v1/options/fetch-expiry</code></p> <p>Parameters: - <code>index</code> (body): Index name - <code>expiry</code> (body): Expiry date</p> <p>Example Request: <pre><code>curl -X POST \"https://fastapi-stock-data.onrender.com/api/v1/options/fetch-expiry\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"index\": \"NIFTY\", \"expiry\": \"14-Dec-2024\"}'\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"job_id\": \"def456-ghi789-jkl012\",\n    \"status\": \"processing\",\n    \"message\": \"Expiry-specific options data fetch initiated\",\n    \"expiry_date\": \"14-Dec-2024\"\n}\n</code></pre></p>"},{"location":"api/analytics/#response-formats","title":"Response Formats","text":""},{"location":"api/analytics/#pcr-response","title":"PCR Response","text":"<pre><code>{\n    \"index\": \"string\",\n    \"pcr\": \"number\",\n    \"put_oi\": \"number\",\n    \"call_oi\": \"number\",\n    \"timestamp\": \"string\",\n    \"interpretation\": \"string\"\n}\n</code></pre>"},{"location":"api/analytics/#top-oi-response","title":"Top OI Response","text":"<pre><code>{\n    \"index\": \"string\",\n    \"top_strikes\": [\n        {\n            \"strike_price\": \"number\",\n            \"total_oi\": \"number\",\n            \"put_oi\": \"number\",\n            \"call_oi\": \"number\",\n            \"oi_change\": \"number\"\n        }\n    ],\n    \"timestamp\": \"string\"\n}\n</code></pre>"},{"location":"api/analytics/#max-pain-response","title":"Max Pain Response","text":"<pre><code>{\n    \"index\": \"string\",\n    \"max_pain_strike\": \"number\",\n    \"total_oi_at_max_pain\": \"number\",\n    \"put_oi_at_max_pain\": \"number\",\n    \"call_oi_at_max_pain\": \"number\",\n    \"calculation_method\": \"string\",\n    \"timestamp\": \"string\"\n}\n</code></pre>"},{"location":"api/analytics/#important-notes_1","title":"\u26a0\ufe0f Important Notes","text":""},{"location":"api/analytics/#data-availability","title":"Data Availability","text":"<ul> <li>Options data is updated during market hours</li> <li>Historical options data may be limited</li> <li>Some calculations require sufficient market data</li> </ul>"},{"location":"api/analytics/#calculation-methods","title":"Calculation Methods","text":"<p>PCR Calculation: - PCR = Total Put OI / Total Call OI - Values &gt; 1.0 indicate bullish sentiment - Values &lt; 1.0 indicate bearish sentiment</p> <p>Max Pain Calculation: - Strike price with maximum total open interest - Used to predict market movement at expiry - Based on current open interest distribution</p>"},{"location":"api/analytics/#background-processing","title":"Background Processing","text":"<ul> <li>Large options data fetches run in background</li> <li>Use job IDs to track progress</li> <li>Results are cached for faster subsequent access</li> </ul>"},{"location":"api/analytics/#integration-examples","title":"Integration Examples","text":""},{"location":"api/analytics/#python","title":"Python","text":"<pre><code>import requests\n\ndef get_pcr(index=\"NIFTY\"):\n    url = f\"https://fastapi-stock-data.onrender.com/api/v1/analytics/pcr?index={index}\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    else:\n        print(f\"Error: {response.status_code}\")\n        return None\n\ndef get_max_pain(index=\"NIFTY\"):\n    url = f\"https://fastapi-stock-data.onrender.com/api/v1/analytics/max-pain?index={index}\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    else:\n        print(f\"Error: {response.status_code}\")\n        return None\n\n# Usage\npcr_data = get_pcr(\"NIFTY\")\nif pcr_data:\n    print(f\"NIFTY PCR: {pcr_data['pcr']} ({pcr_data['interpretation']})\")\n\nmax_pain = get_max_pain(\"NIFTY\")\nif max_pain:\n    print(f\"Max Pain Strike: {max_pain['max_pain_strike']}\")\n</code></pre>"},{"location":"api/analytics/#javascript","title":"JavaScript","text":"<pre><code>async function getAnalytics(index = 'NIFTY') {\n    const baseURL = 'https://fastapi-stock-data.onrender.com';\n\n    try {\n        // Get PCR\n        const pcrResponse = await fetch(`${baseURL}/api/v1/analytics/pcr?index=${index}`);\n        const pcrData = await pcrResponse.json();\n\n        // Get Max Pain\n        const maxPainResponse = await fetch(`${baseURL}/api/v1/analytics/max-pain?index=${index}`);\n        const maxPainData = await maxPainResponse.json();\n\n        // Get Top OI\n        const topOIResponse = await fetch(`${baseURL}/api/v1/analytics/top-oi?index=${index}&amp;limit=5`);\n        const topOIData = await topOIResponse.json();\n\n        return {\n            pcr: pcrData,\n            maxPain: maxPainData,\n            topOI: topOIData\n        };\n    } catch (error) {\n        console.error('Error fetching analytics:', error);\n        return null;\n    }\n}\n\n// Usage\ngetAnalytics('NIFTY').then(data =&gt; {\n    if (data) {\n        console.log(`PCR: ${data.pcr.pcr}`);\n        console.log(`Max Pain: ${data.maxPain.max_pain_strike}`);\n        console.log(`Top OI Strikes: ${data.topOI.top_strikes.length}`);\n    }\n});\n</code></pre>"},{"location":"api/analytics/#error-handling","title":"\ud83d\udd0d Error Handling","text":""},{"location":"api/analytics/#common-http-status-codes","title":"Common HTTP Status Codes","text":"<ul> <li>200: Success</li> <li>404: Index not found or no data available</li> <li>500: Server error or calculation error</li> </ul>"},{"location":"api/analytics/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"detail\": \"Error description message\"\n}\n</code></pre>"},{"location":"api/analytics/#analytics-interpretation","title":"Analytics Interpretation","text":""},{"location":"api/analytics/#pcr-values","title":"PCR Values","text":"<ul> <li>&gt; 1.0: Bullish sentiment (more puts being bought)</li> <li>&lt; 1.0: Bearish sentiment (more calls being bought)</li> <li>= 1.0: Neutral sentiment</li> </ul>"},{"location":"api/analytics/#max-pain","title":"Max Pain","text":"<ul> <li>The strike price where maximum options would expire worthless</li> <li>Market makers may hedge around this level</li> <li>Not a guaranteed prediction but a useful indicator</li> </ul>"},{"location":"api/analytics/#open-interest","title":"Open Interest","text":"<ul> <li>High OI indicates strong interest at that strike</li> <li>Increasing OI suggests new positions being opened</li> <li>Decreasing OI suggests positions being closed</li> </ul>"},{"location":"api/analytics/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"api/analytics/#common-issues","title":"Common Issues","text":"<p>No Data Available - Check during market hours - Options data may not be available for all indices</p> <p>Calculation Errors - Insufficient data for calculations - Try different time periods or indices</p> <p>Background Job Issues - Large datasets take time to process - Check job status after some time</p>"},{"location":"api/analytics/#getting-help","title":"Getting Help","text":"<ul> <li>Check the API Reference for basic endpoints</li> <li>Report issues on GitHub</li> <li>Visit NSE website for official options data</li> </ul>"},{"location":"api/crypto/","title":"Cryptocurrency API","text":"<p>This section documents the cryptocurrency data endpoints in FastStockAPI, providing real-time and historical crypto market data.</p>"},{"location":"api/crypto/#overview","title":"Overview","text":"<p>The crypto API provides comprehensive cryptocurrency data including real-time prices, historical data, and market statistics from multiple exchanges.</p>"},{"location":"api/crypto/#base-url","title":"\ud83d\udd17 Base URL","text":"<pre><code>http://localhost:8000  (local development)\nhttps://your-domain.com  (production)\n</code></pre>"},{"location":"api/crypto/#endpoints","title":"Endpoints","text":""},{"location":"api/crypto/#1-get-cryptocurrency-quote","title":"1. Get Cryptocurrency Quote","text":"<p>Get current price and market data for a specific cryptocurrency.</p> <p>Endpoint: <code>GET /crypto/quote/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): Cryptocurrency symbol (e.g., <code>BTC</code>, <code>ETH</code>, <code>ADA</code>)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/crypto/quote/BTC\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"BTC\",\n    \"name\": \"Bitcoin\",\n    \"price\": 45123.45,\n    \"change24h\": 2.5,\n    \"changePercent24h\": 2.5,\n    \"volume24h\": 28500000000,\n    \"marketCap\": 890000000000,\n    \"lastUpdated\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/crypto/#2-get-historical-cryptocurrency-data","title":"2. Get Historical Cryptocurrency Data","text":"<p>Get historical price data for cryptocurrencies.</p> <p>Endpoint: <code>GET /crypto/historical/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): Cryptocurrency symbol - <code>period</code> (query, optional): Time period (1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/crypto/historical/BTC?period=1mo\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"BTC\",\n    \"period\": \"1mo\",\n    \"data\": [\n        {\n            \"date\": \"2024-11-09\",\n            \"open\": 45000.00,\n            \"high\": 46000.00,\n            \"low\": 44500.00,\n            \"close\": 45500.00,\n            \"volume\": 28500000000\n        }\n    ]\n}\n</code></pre></p>"},{"location":"api/crypto/#3-get-available-cryptocurrencies","title":"3. Get Available Cryptocurrencies","text":"<p>Get list of available cryptocurrency symbols.</p> <p>Endpoint: <code>GET /crypto/list</code></p> <p>Example Request: <pre><code>curl \"http://localhost:8000/crypto/list\"\n</code></pre></p> <p>Example Response: <pre><code>[\n    \"BTC\",\n    \"ETH\",\n    \"ADA\",\n    \"SOL\",\n    \"DOT\",\n    \"LINK\",\n    \"UNI\",\n    \"AAVE\"\n]\n</code></pre></p>"},{"location":"api/crypto/#response-formats","title":"Response Formats","text":""},{"location":"api/crypto/#crypto-quote-response","title":"Crypto Quote Response","text":"<pre><code>{\n    \"symbol\": \"string\",\n    \"name\": \"string\",\n    \"price\": \"number\",\n    \"change24h\": \"number\",\n    \"changePercent24h\": \"number\",\n    \"volume24h\": \"number\",\n    \"marketCap\": \"number\",\n    \"lastUpdated\": \"string\"\n}\n</code></pre>"},{"location":"api/crypto/#historical-data-response","title":"Historical Data Response","text":"<pre><code>{\n    \"symbol\": \"string\",\n    \"period\": \"string\",\n    \"data\": [\n        {\n            \"date\": \"string\",\n            \"open\": \"number\",\n            \"high\": \"number\",\n            \"low\": \"number\",\n            \"close\": \"number\",\n            \"volume\": \"number\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api/crypto/#usage-examples","title":"\ud83d\udca1 Usage Examples","text":""},{"location":"api/crypto/#python-example-get-crypto-prices","title":"Python Example - Get Crypto Prices","text":"<pre><code>import requests\n\n# Get single crypto price\nresponse = requests.get(\"http://localhost:8000/crypto/quote/BTC\")\nbtc_data = response.json()\nprint(f\"BTC Price: ${btc_data['price']}\")\n\n# Get historical data\nresponse = requests.get(\"http://localhost:8000/crypto/historical/ETH?period=1mo\")\neth_history = response.json()\nprint(f\"ETH Historical Data Points: {len(eth_history['data'])}\")\n\n# Get available symbols\nresponse = requests.get(\"http://localhost:8000/crypto/list\")\nsymbols = response.json()\nprint(f\"Available Symbols: {symbols[:5]}\")\n</code></pre>"},{"location":"api/crypto/#javascript-example-crypto-dashboard","title":"JavaScript Example - Crypto Dashboard","text":"<pre><code>async function getCryptoData() {\n    try {\n        // Get multiple crypto prices\n        const symbols = ['BTC', 'ETH', 'ADA'];\n        const promises = symbols.map(symbol =&gt;\n            fetch(`http://localhost:8000/crypto/quote/${symbol}`)\n                .then(res =&gt; res.json())\n        );\n\n        const results = await Promise.all(promises);\n\n        results.forEach(crypto =&gt; {\n            console.log(`${crypto.symbol}: $${crypto.price} (${crypto.changePercent24h}%)`);\n        });\n\n    } catch (error) {\n        console.error('Error fetching crypto data:', error);\n    }\n}\n\n// Get historical data for chart\nasync function getCryptoHistory(symbol, period = '1mo') {\n    try {\n        const response = await fetch(`http://localhost:8000/crypto/historical/${symbol}?period=${period}`);\n        const data = await response.json();\n\n        // Process data for charting\n        const chartData = data.data.map(item =&gt; ({\n            x: new Date(item.date),\n            y: item.close\n        }));\n\n        return chartData;\n    } catch (error) {\n        console.error('Error fetching historical data:', error);\n        return [];\n    }\n}\n</code></pre>"},{"location":"api/crypto/#supported-cryptocurrencies","title":"Supported Cryptocurrencies","text":""},{"location":"api/crypto/#major-cryptocurrencies","title":"Major Cryptocurrencies","text":"<ul> <li>BTC: Bitcoin</li> <li>ETH: Ethereum</li> <li>ADA: Cardano</li> <li>SOL: Solana</li> <li>DOT: Polkadot</li> <li>LINK: Chainlink</li> <li>UNI: Uniswap</li> <li>AAVE: Aave</li> </ul>"},{"location":"api/crypto/#defi-tokens","title":"DeFi Tokens","text":"<ul> <li>COMP: Compound</li> <li>MKR: MakerDAO</li> <li>SUSHI: SushiSwap</li> <li>YFI: Yearn Finance</li> </ul>"},{"location":"api/crypto/#layer-1-blockchains","title":"Layer 1 Blockchains","text":"<ul> <li>AVAX: Avalanche</li> <li>MATIC: Polygon</li> <li>FTM: Fantom</li> <li>NEAR: Near Protocol</li> </ul>"},{"location":"api/crypto/#error-responses","title":"\u26a0\ufe0f Error Responses","text":"<ul> <li><code>404</code>: Cryptocurrency symbol not found</li> <li><code>422</code>: Invalid parameters</li> <li><code>500</code>: Server error or exchange API unavailable</li> </ul>"},{"location":"api/crypto/#rate-limits","title":"\ud83d\udd04 Rate Limits","text":"<ul> <li>Individual crypto requests: 100 per minute</li> <li>Historical data requests: 50 per minute</li> <li>Bulk requests: 30 per minute</li> </ul>"},{"location":"api/crypto/#data-sources","title":"Data Sources","text":"<ul> <li>Primary: Binance API</li> <li>Secondary: CoinGecko, CoinMarketCap</li> <li>Real-time: WebSocket connections for live updates</li> </ul>"},{"location":"api/crypto/#best-practices","title":"Best Practices","text":"<ol> <li>Use appropriate time periods for historical data</li> <li>Cache frequently requested data to reduce API calls</li> <li>Handle rate limits gracefully with exponential backoff</li> <li>Validate symbols before making requests</li> <li>Use bulk endpoints when fetching multiple cryptocurrencies</li> <li>Monitor API health with the health endpoint</li> </ol>"},{"location":"api/crypto/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/crypto/#price-change-analysis","title":"Price Change Analysis","text":"<pre><code>def analyze_price_changes(symbol, period='1mo'):\n    \"\"\"Analyze price changes over a period\"\"\"\n    response = requests.get(f\"http://localhost:8000/crypto/historical/{symbol}?period={period}\")\n    data = response.json()\n\n    if data['data']:\n        first_price = data['data'][0]['close']\n        last_price = data['data'][-1]['close']\n        change_percent = ((last_price - first_price) / first_price) * 100\n\n        return {\n            'symbol': symbol,\n            'period': period,\n            'start_price': first_price,\n            'end_price': last_price,\n            'change_percent': change_percent,\n            'trend': 'bullish' if change_percent &gt; 0 else 'bearish'\n        }\n    return None\n</code></pre>"},{"location":"api/crypto/#volume-analysis","title":"Volume Analysis","text":"<pre><code>def analyze_volume(symbol, period='1mo'):\n    \"\"\"Analyze trading volume patterns\"\"\"\n    response = requests.get(f\"http://localhost:8000/crypto/historical/{symbol}?period={period}\")\n    data = response.json()\n\n    volumes = [item['volume'] for item in data['data']]\n    avg_volume = sum(volumes) / len(volumes)\n    max_volume = max(volumes)\n    min_volume = min(volumes)\n\n    return {\n        'symbol': symbol,\n        'avg_volume': avg_volume,\n        'max_volume': max_volume,\n        'min_volume': min_volume,\n        'volume_variability': (max_volume - min_volume) / avg_volume\n    }\n</code></pre>"},{"location":"api/crypto/#multi-asset-portfolio-tracking","title":"Multi-Asset Portfolio Tracking","text":"<pre><code>def track_portfolio(holdings):\n    \"\"\"Track portfolio value across multiple cryptocurrencies\"\"\"\n    total_value = 0\n    portfolio_data = []\n\n    for symbol, amount in holdings.items():\n        response = requests.get(f\"http://localhost:8000/crypto/quote/{symbol}\")\n        if response.status_code == 200:\n            data = response.json()\n            value = data['price'] * amount\n            total_value += value\n\n            portfolio_data.append({\n                'symbol': symbol,\n                'amount': amount,\n                'price': data['price'],\n                'value': value,\n                'change_24h': data['changePercent24h']\n            })\n\n    return {\n        'total_value': total_value,\n        'holdings': portfolio_data,\n        'timestamp': datetime.now().isoformat()\n    }\n</code></pre>"},{"location":"api/crypto/#market-insights","title":"Market Insights","text":""},{"location":"api/crypto/#volatility-analysis","title":"Volatility Analysis","text":"<pre><code>function calculateVolatility(prices) {\n    const returns = [];\n    for (let i = 1; i &lt; prices.length; i++) {\n        returns.push((prices[i] - prices[i-1]) / prices[i-1]);\n    }\n\n    const mean = returns.reduce((a, b) =&gt; a + b, 0) / returns.length;\n    const variance = returns.reduce((a, b) =&gt; a + Math.pow(b - mean, 2), 0) / returns.length;\n    const volatility = Math.sqrt(variance) * Math.sqrt(252); // Annualized\n\n    return volatility;\n}\n</code></pre>"},{"location":"api/crypto/#support-and-resistance-levels","title":"Support and Resistance Levels","text":"<pre><code>function findSupportResistance(prices, window = 20) {\n    const highs = prices.map(p =&gt; p.high);\n    const lows = prices.map(p =&gt; p.low);\n\n    const resistance = Math.max(...highs.slice(-window));\n    const support = Math.min(...lows.slice(-window));\n\n    return { support, resistance };\n}\n</code></pre>"},{"location":"api/crypto/#real-time-updates","title":"Real-time Updates","text":"<p>For real-time price updates, consider implementing WebSocket connections:</p> <pre><code>// WebSocket connection for real-time updates\nconst ws = new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@ticker');\n\nws.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log(`BTC Price: ${data.c}`);\n};\n</code></pre>"},{"location":"api/crypto/#api-limits-and-quotas","title":"API Limits and Quotas","text":"<ul> <li>Free Tier: 1000 requests per day</li> <li>Premium Tier: 100,000 requests per day</li> <li>Enterprise: Unlimited requests</li> </ul> <p>Contact support for premium access and higher rate limits.</p> <p>Parameters: - <code>symbols</code> (query): Comma-separated list of symbols (max 100)</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-multiple?symbols=BTCUSDT,ETHUSDT,ADAUSDT\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbols_requested\": [\"BTCUSDT\", \"ETHUSDT\", \"ADAUSDT\"],\n    \"symbols_found\": 3,\n    \"data\": {\n        \"BTCUSDT\": {\n            \"symbol\": \"BTCUSDT\",\n            \"price\": \"45123.45\",\n            \"timestamp\": \"1733779200.123\"\n        },\n        \"ETHUSDT\": {\n            \"symbol\": \"ETHUSDT\",\n            \"price\": \"2456.78\",\n            \"timestamp\": \"1733779200.123\"\n        },\n        \"ADAUSDT\": {\n            \"symbol\": \"ADAUSDT\",\n            \"price\": \"0.5678\",\n            \"timestamp\": \"1733779200.123\"\n        }\n    }\n}\n</code></pre></p>"},{"location":"api/crypto/#3-get-24h-crypto-statistics","title":"3. Get 24h Crypto Statistics","text":"<p>Get 24-hour statistics for a cryptocurrency including price change, volume, etc.</p> <p>Endpoint: <code>GET /crypto-stats/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): Cryptocurrency symbol</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-stats/BTCUSDT\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"BTCUSDT\",\n    \"price_change\": 1234.56,\n    \"price_change_percent\": 2.85,\n    \"weighted_avg_price\": 44567.89,\n    \"prev_close_price\": 43889.12,\n    \"last_price\": 45123.68,\n    \"bid_price\": 45120.00,\n    \"ask_price\": 45125.00,\n    \"open_price\": 43889.12,\n    \"high_price\": 45678.90,\n    \"low_price\": 43500.00,\n    \"volume\": 123456.78,\n    \"quote_asset_volume\": 5678901234.56,\n    \"open_time\": 1733692800.0,\n    \"close_time\": 1733779200.0,\n    \"count\": 1234567\n}\n</code></pre></p>"},{"location":"api/crypto/#4-get-crypto-historical-data","title":"4. Get Crypto Historical Data","text":"<p>Get historical price data for a cryptocurrency.</p> <p>Endpoint: <code>GET /crypto-historical/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): Cryptocurrency symbol - <code>interval</code> (query, optional): Time interval (default: <code>1d</code>) - <code>limit</code> (query, optional): Number of data points (default: 100, max: 1000)</p> <p>Supported Intervals: - <code>1m</code>, <code>3m</code>, <code>5m</code>, <code>15m</code>, <code>30m</code> - Minutes - <code>1h</code>, <code>2h</code>, <code>4h</code>, <code>6h</code>, <code>8h</code>, <code>12h</code> - Hours - <code>1d</code>, <code>3d</code> - Days - <code>1w</code> - Weeks - <code>1M</code> - Months</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-historical/BTCUSDT?interval=1d&amp;limit=30\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"BTCUSDT\",\n    \"interval\": \"1d\",\n    \"data\": [\n        {\n            \"timestamp\": 1733692800000,\n            \"open\": 43889.12,\n            \"high\": 45678.90,\n            \"low\": 43500.00,\n            \"close\": 45123.68,\n            \"volume\": 123456.78\n        },\n        {\n            \"timestamp\": 1733606400000,\n            \"open\": 43200.00,\n            \"high\": 44123.45,\n            \"low\": 42800.00,\n            \"close\": 43889.12,\n            \"volume\": 98765.43\n        }\n    ]\n}\n</code></pre></p>"},{"location":"api/crypto/#5-get-comprehensive-crypto-data","title":"5. Get Comprehensive Crypto Data","text":"<p>Get both current price and 24h statistics in a single request.</p> <p>Endpoint: <code>GET /crypto-comprehensive/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): Cryptocurrency symbol</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-comprehensive/BTCUSDT\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"BTCUSDT\",\n    \"current_price\": {\n        \"symbol\": \"BTCUSDT\",\n        \"price\": \"45123.45\",\n        \"timestamp\": \"1733779200.123\"\n    },\n    \"statistics_24h\": {\n        \"symbol\": \"BTCUSDT\",\n        \"price_change\": 1234.56,\n        \"price_change_percent\": 2.85,\n        \"last_price\": 45123.68,\n        \"volume\": 123456.78,\n        \"high_price\": 45678.90,\n        \"low_price\": 43500.00\n    },\n    \"timestamp\": \"1733779200.123\"\n}\n</code></pre></p>"},{"location":"api/crypto/#6-get-extended-historical-data","title":"6. Get Extended Historical Data","text":"<p>Get historical data with pagination support.</p> <p>Endpoint: <code>GET /crypto-historical-extended/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): Cryptocurrency symbol - <code>interval</code> (query, optional): Time interval (default: <code>1d</code>) - <code>start_date</code> (query, optional): Start date (YYYY-MM-DD) - <code>end_date</code> (query, optional): End date (YYYY-MM-DD) - <code>limit</code> (query, optional): Number of data points (default: 100)</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-historical-extended/BTCUSDT?interval=1d&amp;start_date=2024-01-01&amp;end_date=2024-01-31\"\n</code></pre></p>"},{"location":"api/crypto/#response-formats_1","title":"\ud83d\udcca Response Formats","text":""},{"location":"api/crypto/#success-response-structure","title":"Success Response Structure","text":"<p>All successful responses follow this general structure:</p> <pre><code>{\n    \"status\": \"success\",\n    \"data\": { ... },\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre>"},{"location":"api/crypto/#error-response-structure","title":"Error Response Structure","text":"<pre><code>{\n    \"detail\": \"Error description\",\n    \"status_code\": 404,\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre>"},{"location":"api/crypto/#rate-limiting","title":"\u26a0\ufe0f Rate Limiting","text":"<ul> <li>Production: No rate limiting currently</li> <li>Best Practice: Implement client-side caching</li> <li>Fair Use: Please don't abuse the API</li> </ul>"},{"location":"api/crypto/#error-codes","title":"Error Codes","text":"Status Code Description 200 Success 400 Bad Request (invalid parameters) 404 Symbol not found 429 Too Many Requests 500 Internal Server Error 502 Bad Gateway (Binance API issues) 503 Service Unavailable"},{"location":"api/crypto/#sdks-and-libraries","title":"SDKs and Libraries","text":""},{"location":"api/crypto/#python","title":"Python","text":"<pre><code>import requests\n\nclass CryptoAPI:\n    def __init__(self, base_url=\"https://fastapi-stock-data.onrender.com\"):\n        self.base_url = base_url\n\n    def get_price(self, symbol):\n        response = requests.get(f\"{self.base_url}/crypto-price/{symbol}\")\n        return response.json()\n\n    def get_multiple_prices(self, symbols):\n        symbol_str = \",\".join(symbols)\n        response = requests.get(f\"{self.base_url}/crypto-multiple?symbols={symbol_str}\")\n        return response.json()\n\n    def get_stats(self, symbol):\n        response = requests.get(f\"{self.base_url}/crypto-stats/{symbol}\")\n        return response.json()\n\n# Usage\napi = CryptoAPI()\nbtc_price = api.get_price(\"BTCUSDT\")\nprint(f\"BTC: ${btc_price['price']}\")\n</code></pre>"},{"location":"api/crypto/#javascriptnodejs","title":"JavaScript/Node.js","text":"<pre><code>class CryptoAPI {\n    constructor(baseURL = 'https://fastapi-stock-data.onrender.com') {\n        this.baseURL = baseURL;\n    }\n\n    async getPrice(symbol) {\n        const response = await fetch(`${this.baseURL}/crypto-price/${symbol}`);\n        return await response.json();\n    }\n\n    async getMultiplePrices(symbols) {\n        const symbolStr = symbols.join(',');\n        const response = await fetch(`${this.baseURL}/crypto-multiple?symbols=${symbolStr}`);\n        return await response.json();\n    }\n\n    async getStats(symbol) {\n        const response = await fetch(`${this.baseURL}/crypto-stats/${symbol}`);\n        return await response.json();\n    }\n}\n\n// Usage\nconst api = new CryptoAPI();\nconst btcPrice = await api.getPrice('BTCUSDT');\nconsole.log(`BTC: $${btcPrice.price}`);\n</code></pre>"},{"location":"api/crypto/#testing","title":"\ud83d\udd0d Testing","text":"<p>Use our test script to verify all endpoints:</p> <pre><code>python test_api_fixes.py\n</code></pre>"},{"location":"api/crypto/#related-documentation","title":"Related Documentation","text":"<ul> <li>Cryptocurrency Symbols - List of supported symbols</li> <li>Getting Started - Quick start guide</li> <li>Examples - Code examples</li> <li>Interactive Demo - Live testing</li> </ul>"},{"location":"api/market/","title":"Market Data API","text":"<p>This section documents market and index data endpoints in the FastAPI Stock &amp; Crypto Data API.</p>"},{"location":"api/market/#overview","title":"\ud83d\udcca Overview","text":"<p>The market data API provides real-time and historical data for NSE indices and broader market information.</p>"},{"location":"api/market/#base-url","title":"\ud83d\udd17 Base URL","text":"<pre><code>https://fastapi-stock-data.onrender.com\n</code></pre>"},{"location":"api/market/#endpoints","title":"\ud83d\udccb Endpoints","text":""},{"location":"api/market/#1-get-index-price","title":"1. Get Index Price","text":"<p>Get current price information for NSE market indices.</p> <p>Endpoint: <code>GET /api/v1/market/price/index?index={index_name}</code></p> <p>Parameters: - <code>index</code> (query): NSE index name (e.g., <code>NIFTY</code>, <code>BANKNIFTY</code>)</p> <p>Supported Indices: - <code>NIFTY</code> - NIFTY 50 - <code>BANKNIFTY</code> - NIFTY Bank - <code>FINNIFTY</code> - NIFTY Financial Services - <code>MIDCPNIFTY</code> - NIFTY Midcap Select</p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/market/price/index?index=NIFTY\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"NIFTY\",\n    \"lastPrice\": 23456.75,\n    \"pChange\": 0.85,\n    \"change\": 198.50,\n    \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre></p> <p>Error Responses: - <code>404</code>: Index not found - <code>500</code>: Server error</p>"},{"location":"api/market/#2-get-historical-index-data","title":"2. Get Historical Index Data","text":"<p>Get historical price data for market indices.</p> <p>Endpoint: <code>GET /historical/{index_symbol}</code></p> <p>Parameters: - <code>index_symbol</code> (path): Index symbol with Yahoo Finance format (e.g., <code>^NSENIFTY</code>) - <code>period</code> (query, optional): Time period (default: <code>1d</code>) - <code>interval</code> (query, optional): Data interval (default: <code>1d</code>)</p> <p>Supported Index Symbols: - <code>^NSENIFTY</code> - NIFTY 50 - <code>^NSEBANK</code> - NIFTY Bank - <code>^NSENEXT50</code> - NIFTY Next 50 - <code>^NSEMIDCAP</code> - NIFTY Midcap 150</p> <p>Supported Periods: - <code>1d</code>, <code>5d</code>, <code>1mo</code>, <code>3mo</code>, <code>6mo</code>, <code>1y</code>, <code>2y</code>, <code>5y</code>, <code>10y</code>, <code>ytd</code>, <code>max</code></p> <p>Supported Intervals: - <code>1m</code>, <code>2m</code>, <code>5m</code>, <code>15m</code>, <code>30m</code>, <code>60m</code>, <code>90m</code>, <code>1h</code>, <code>1d</code>, <code>5d</code>, <code>1wk</code>, <code>1mo</code>, <code>3mo</code></p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/historical/^NSENIFTY?period=1mo&amp;interval=1d\"\n</code></pre></p> <p>Example Response: <pre><code>[\n    {\n        \"Date\": \"2024-11-09\",\n        \"Open\": 23400.0,\n        \"High\": 23500.0,\n        \"Low\": 23350.0,\n        \"Close\": 23456.75,\n        \"Volume\": 234567890\n    },\n    {\n        \"Date\": \"2024-11-10\",\n        \"Open\": 23456.75,\n        \"High\": 23600.0,\n        \"Low\": 23400.0,\n        \"Close\": 23567.25,\n        \"Volume\": 245678901\n    }\n]\n</code></pre></p>"},{"location":"api/market/#response-formats","title":"\ud83d\udcca Response Formats","text":""},{"location":"api/market/#index-price-response","title":"Index Price Response","text":"<pre><code>{\n    \"symbol\": \"string\",\n    \"lastPrice\": \"number\",\n    \"pChange\": \"number\",\n    \"change\": \"number\",\n    \"timestamp\": \"string\"\n}\n</code></pre>"},{"location":"api/market/#historical-index-data-response","title":"Historical Index Data Response","text":"<pre><code>[\n    {\n        \"Date\": \"string\",\n        \"Open\": \"number\",\n        \"High\": \"number\",\n        \"Low\": \"number\",\n        \"Close\": \"number\",\n        \"Volume\": \"number\"\n    }\n]\n</code></pre>"},{"location":"api/market/#important-notes","title":"\u26a0\ufe0f Important Notes","text":""},{"location":"api/market/#index-symbol-formats","title":"Index Symbol Formats","text":"<p>For Index Price Endpoint: - Use simple names: <code>NIFTY</code>, <code>BANKNIFTY</code> - No special characters or prefixes needed</p> <p>For Historical Data Endpoint: - Use Yahoo Finance format: <code>^NSENIFTY</code>, <code>^NSEBANK</code> - Must include <code>^</code> prefix and <code>NSE</code> in the name</p>"},{"location":"api/market/#market-hours","title":"Market Hours","text":"<ul> <li>Pre-market: 9:00 AM - 9:15 AM IST</li> <li>Regular session: 9:15 AM - 3:30 PM IST</li> <li>Post-market: 3:30 PM - 4:00 PM IST</li> </ul>"},{"location":"api/market/#index-calculation","title":"Index Calculation","text":"<ul> <li>NIFTY indices use free-float market capitalization method</li> <li>Base value: 1000 for NIFTY 50</li> <li>Updated every 6 seconds during market hours</li> </ul>"},{"location":"api/market/#data-sources","title":"Data Sources","text":"<ul> <li>Primary: NSE direct APIs</li> <li>Fallback: Yahoo Finance for historical data</li> </ul>"},{"location":"api/market/#integration-examples","title":"\ud83d\udcf1 Integration Examples","text":""},{"location":"api/market/#python","title":"Python","text":"<pre><code>import requests\n\ndef get_index_price(index_name):\n    url = f\"https://fastapi-stock-data.onrender.com/api/v1/market/price/index?index={index_name}\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    else:\n        print(f\"Error: {response.status_code}\")\n        return None\n\ndef get_index_history(index_symbol, period=\"1mo\", interval=\"1d\"):\n    url = f\"https://fastapi-stock-data.onrender.com/historical/{index_symbol}?period={period}&amp;interval={interval}\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    else:\n        print(f\"Error: {response.status_code}\")\n        return None\n\n# Usage\nnifty_price = get_index_price(\"NIFTY\")\nif nifty_price:\n    print(f\"NIFTY: {nifty_price['lastPrice']} ({nifty_price['pChange']}%)\")\n\nnifty_history = get_index_history(\"^NSENIFTY\", \"1mo\", \"1d\")\nif nifty_history:\n    print(f\"Historical data points: {len(nifty_history)}\")\n</code></pre>"},{"location":"api/market/#javascript","title":"JavaScript","text":"<pre><code>async function getIndexPrice(indexName) {\n    const response = await fetch(\n        `https://fastapi-stock-data.onrender.com/api/v1/market/price/index?index=${indexName}`\n    );\n\n    if (response.ok) {\n        const data = await response.json();\n        return data;\n    } else {\n        console.error(`Error: ${response.status}`);\n        return null;\n    }\n}\n\nasync function getIndexHistory(indexSymbol, period = \"1mo\", interval = \"1d\") {\n    const response = await fetch(\n        `https://fastapi-stock-data.onrender.com/historical/${indexSymbol}?period=${period}&amp;interval=${interval}`\n    );\n\n    if (response.ok) {\n        const data = await response.json();\n        return data;\n    } else {\n        console.error(`Error: ${response.status}`);\n        return null;\n    }\n}\n\n// Usage\ngetIndexPrice('NIFTY').then(data =&gt; {\n    if (data) {\n        console.log(`NIFTY: ${data.lastPrice} (${data.pChange}%)`);\n    }\n});\n\ngetIndexHistory('^NSENIFTY').then(data =&gt; {\n    if (data) {\n        console.log(`Historical data points: ${data.length}`);\n    }\n});\n</code></pre>"},{"location":"api/market/#index-components","title":"\ud83d\udcca Index Components","text":""},{"location":"api/market/#nifty-50-components","title":"NIFTY 50 Components","text":"<p>The NIFTY 50 index consists of 50 large-cap companies representing various sectors:</p> <p>Banking &amp; Financial Services (12 companies) - HDFC Bank, ICICI Bank, Kotak Mahindra Bank, Axis Bank, IndusInd Bank, etc.</p> <p>IT &amp; Technology (9 companies) - TCS, Infosys, Wipro, HCL Technologies, Tech Mahindra, etc.</p> <p>Oil &amp; Gas (3 companies) - Reliance Industries, ONGC, Coal India</p> <p>Automobiles (4 companies) - Maruti Suzuki, Mahindra &amp; Mahindra, Tata Motors, Bajaj Auto</p> <p>And other sectors...</p>"},{"location":"api/market/#banknifty-components","title":"BANKNIFTY Components","text":"<p>BANKNIFTY consists of the most liquid and large-cap banking stocks: - HDFC Bank, ICICI Bank, Kotak Mahindra Bank, Axis Bank - State Bank of India, Bank of Baroda, Punjab National Bank - And other major banking stocks</p>"},{"location":"api/market/#error-handling","title":"\ud83d\udd0d Error Handling","text":""},{"location":"api/market/#common-http-status-codes","title":"Common HTTP Status Codes","text":"<ul> <li>200: Success</li> <li>404: Index not found</li> <li>500: Server error or data source unavailable</li> </ul>"},{"location":"api/market/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"detail\": \"Error description message\"\n}\n</code></pre>"},{"location":"api/market/#data-fields-explanation","title":"\ud83d\udcca Data Fields Explanation","text":"Field Description Type <code>symbol</code> Index symbol string <code>lastPrice</code> Last traded value number <code>pChange</code> Percentage change from previous close number <code>change</code> Absolute change from previous close number <code>timestamp</code> Data timestamp string"},{"location":"api/market/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"api/market/#common-issues","title":"Common Issues","text":"<p>404 Not Found - Check index name spelling - Verify index exists on NSE</p> <p>No Data Available - Check during market hours - Some indices may be under maintenance</p> <p>Historical Data Issues - Try shorter time periods - Some indices have limited historical data</p>"},{"location":"api/market/#getting-help","title":"Getting Help","text":"<ul> <li>Check the Indices page for supported indices</li> <li>Report issues on GitHub</li> <li>Visit NSE website for official index information</li> </ul>"},{"location":"api/options/","title":"Options Data API","text":"<p>This section documents the options trading data endpoints in FastStockAPI, providing comprehensive access to NSE options chains, analytics, and historical data.</p>"},{"location":"api/options/#overview","title":"Overview","text":"<p>The options API provides complete options trading data including option chains, strike prices, expiry dates, analytics (PCR, Max Pain), and historical option prices for Indian market indices.</p>"},{"location":"api/options/#base-url","title":"\ud83d\udd17 Base URL","text":"<pre><code>http://localhost:8000  (local development)\nhttps://your-domain.com  (production)\n</code></pre>"},{"location":"api/options/#endpoints","title":"Endpoints","text":""},{"location":"api/options/#1-get-index-price","title":"1. Get Index Price","text":"<p>Get current price for Indian market indices.</p> <p>Endpoint: <code>GET /options/index-price</code></p> <p>Parameters: - <code>index</code> (query): Index symbol (<code>NIFTY</code>, <code>BANKNIFTY</code>, <code>NIFTYIT</code>, etc.)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/options/index-price?index=NIFTY\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"NIFTY\",\n    \"lastPrice\": 24500.75,\n    \"pChange\": 0.85,\n    \"change\": 207.50,\n    \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre></p>"},{"location":"api/options/#2-get-stock-price","title":"2. Get Stock Price","text":"<p>Get current price for individual NSE stocks.</p> <p>Endpoint: <code>GET /options/stock-price</code></p> <p>Parameters: - <code>symbol</code> (query): NSE stock symbol (e.g., <code>RELIANCE</code>, <code>TCS</code>)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/options/stock-price?symbol=RELIANCE\"\n</code></pre></p>"},{"location":"api/options/#3-get-available-expiries","title":"3. Get Available Expiries","text":"<p>Get list of available option expiry dates for an index.</p> <p>Endpoint: <code>GET /options/expiries</code></p> <p>Parameters: - <code>index</code> (query): Index symbol</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/options/expiries?index=NIFTY\"\n</code></pre></p> <p>Example Response: <pre><code>[\n    \"26-Dec-2024\",\n    \"30-Jan-2025\",\n    \"27-Feb-2025\",\n    \"27-Mar-2025\"\n]\n</code></pre></p>"},{"location":"api/options/#4-get-option-price","title":"4. Get Option Price","text":"<p>Get price for a specific option contract.</p> <p>Endpoint: <code>GET /options/option-price</code></p> <p>Parameters: - <code>index</code> (query): Index symbol - <code>strike</code> (query): Strike price (e.g., 24000) - <code>expiry</code> (query): Expiry date in DDMMYY format (e.g., <code>160925</code> for 16-Sep-2025) - <code>option_type</code> (query): <code>CE</code> or <code>PE</code></p> <p>Example Request: <pre><code>curl \"http://localhost:8000/options/option-price?index=NIFTY&amp;strike=24000&amp;expiry=160925&amp;option_type=CE\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"NIFTY24000CE\",\n    \"strike\": 24000,\n    \"expiry\": \"16-Sep-2025\",\n    \"option_type\": \"CE\",\n    \"lastPrice\": 125.50,\n    \"openInterest\": 2450000,\n    \"volume\": 125000,\n    \"bid\": 125.25,\n    \"ask\": 125.75,\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/options/#5-get-direct-options-data","title":"5. Get Direct Options Data","text":"<p>Get complete options chain data without saving to CSV.</p> <p>Endpoint: <code>GET /options/direct-data</code></p> <p>Parameters: - <code>index</code> (query): Index symbol - <code>expiry</code> (query): Expiry date in DDMMYY format - <code>num_strikes</code> (query, optional): Number of strikes around ATM (default: 25)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/options/direct-data?index=NIFTY&amp;expiry=160925&amp;num_strikes=10\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"expiry\": \"16-Sep-2025\",\n    \"underlying_value\": 24500.75,\n    \"options\": [\n        {\n            \"strikePrice\": 23800,\n            \"expiryDate\": \"16-Sep-2025\",\n            \"CE\": {\n                \"lastPrice\": 725.50,\n                \"openInterest\": 1250000,\n                \"totalTradedVolume\": 75000\n            },\n            \"PE\": {\n                \"lastPrice\": 25.75,\n                \"openInterest\": 2450000,\n                \"totalTradedVolume\": 125000\n            }\n        }\n    ],\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/options/#6-get-strike-specific-data","title":"6. Get Strike-Specific Data","text":"<p>Get option data for a specific strike price.</p> <p>Endpoint: <code>GET /options/strike-data</code></p> <p>Parameters: - <code>index</code> (query): Index symbol - <code>strike</code> (query): Strike price - <code>expiry</code> (query): Expiry date in DDMMYY format - <code>option_type</code> (query): <code>CE</code>, <code>PE</code>, or <code>BOTH</code></p> <p>Example Request: <pre><code>curl \"http://localhost:8000/options/strike-data?index=NIFTY&amp;strike=24000&amp;expiry=160925&amp;option_type=BOTH\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"strike\": 24000,\n    \"expiry\": \"16-Sep-2025\",\n    \"option_type\": \"BOTH\",\n    \"ce_data\": {\n        \"lastPrice\": 125.50,\n        \"openInterest\": 2450000,\n        \"volume\": 125000\n    },\n    \"pe_data\": {\n        \"lastPrice\": 95.25,\n        \"openInterest\": 1850000,\n        \"volume\": 95000\n    },\n    \"underlying_value\": 24500.75,\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/options/#7-get-historical-option-data","title":"7. Get Historical Option Data","text":"<p>Get historical price data for specific option contracts.</p> <p>Endpoint: <code>GET /options/historical/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): Index symbol - <code>strike</code> (query): Strike price - <code>expiry</code> (query): Expiry date in DDMMYY format - <code>option_type</code> (query): <code>CE</code> or <code>PE</code> - <code>period</code> (query, optional): Time period (1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/options/historical/NIFTY?strike=24000&amp;expiry=160925&amp;option_type=CE&amp;period=1mo\"\n</code></pre></p>"},{"location":"api/options/#8-fetch-and-save-options-data","title":"8. Fetch and Save Options Data","text":"<p>Fetch options data and save to CSV file.</p> <p>Endpoint: <code>POST /options/fetch</code></p> <p>Request Body: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"num_strikes\": 25\n}\n</code></pre></p> <p>Example Request: <pre><code>curl -X POST \"http://localhost:8000/options/fetch\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"index\": \"NIFTY\", \"num_strikes\": 25}'\n</code></pre></p>"},{"location":"api/options/#9-fetch-specific-expiry-options","title":"9. Fetch Specific Expiry Options","text":"<p>Fetch options data for a specific expiry date.</p> <p>Endpoint: <code>POST /options/fetch/expiry</code></p> <p>Request Body: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"expiry\": \"16-Sep-2025\",\n    \"num_strikes\": 25\n}\n</code></pre></p>"},{"location":"api/options/#10-fetch-options-data-json-response","title":"10. Fetch Options Data (JSON Response)","text":"<p>Fetch options data and return JSON directly without saving to CSV.</p> <p>Endpoint: <code>POST /options/fetch/json</code></p> <p>Request Body: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"num_strikes\": 25\n}\n</code></pre></p> <p>Example Request: <pre><code>curl -X POST \"http://localhost:8000/options/fetch/json\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"index\": \"NIFTY\", \"num_strikes\": 25}'\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"expiry\": \"16-Sep-2025\",\n    \"underlying_value\": 24500.75,\n    \"options\": [\n        {\n            \"strikePrice\": 24000,\n            \"expiryDate\": \"16-Sep-2025\",\n            \"CE\": {\n                \"strikePrice\": 24000,\n                \"expiryDate\": \"16-Sep-2025\",\n                \"underlying\": \"NIFTY\",\n                \"identifier\": \"NIFTY16SEP202424000CE\",\n                \"openInterest\": 125000,\n                \"changeinOpenInterest\": 15000,\n                \"pchangeinOpenInterest\": 13.64,\n                \"totalTradedVolume\": 250000,\n                \"impliedVolatility\": 15.25,\n                \"lastPrice\": 525.50,\n                \"change\": 25.75,\n                \"pChange\": 5.15,\n                \"totalBuyQuantity\": 50000,\n                \"totalSellQuantity\": 75000,\n                \"bidQty\": 50,\n                \"bidprice\": 525.00,\n                \"askQty\": 75,\n                \"askPrice\": 526.00,\n                \"underlyingValue\": 24500.75\n            },\n            \"PE\": {\n                \"strikePrice\": 24000,\n                \"expiryDate\": \"16-Sep-2025\",\n                \"underlying\": \"NIFTY\",\n                \"identifier\": \"NIFTY16SEP202424000PE\",\n                \"openInterest\": 98000,\n                \"changeinOpenInterest\": -5000,\n                \"pchangeinOpenInterest\": -4.85,\n                \"totalTradedVolume\": 180000,\n                \"impliedVolatility\": 14.85,\n                \"lastPrice\": 125.25,\n                \"change\": -5.50,\n                \"pChange\": -4.20,\n                \"totalBuyQuantity\": 35000,\n                \"totalSellQuantity\": 45000,\n                \"bidQty\": 40,\n                \"bidprice\": 125.00,\n                \"askQty\": 60,\n                \"askPrice\": 125.50,\n                \"underlyingValue\": 24500.75\n            }\n        }\n    ],\n    \"timestamp\": \"2024-12-09T15:30:00.123456\"\n}\n</code></pre></p>"},{"location":"api/options/#11-fetch-specific-expiry-options-json-response","title":"11. Fetch Specific Expiry Options (JSON Response)","text":"<p>Fetch options data for a specific expiry date and return JSON directly.</p> <p>Endpoint: <code>POST /options/fetch/expiry/json</code></p> <p>Request Body: <pre><code>{\n    \"index\": \"NIFTY\",\n    \"expiry\": \"160925\",\n    \"num_strikes\": 25\n}\n</code></pre></p> <p>Example Request: <pre><code>curl -X POST \"http://localhost:8000/options/fetch/expiry/json\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"index\": \"NIFTY\", \"expiry\": \"160925\", \"num_strikes\": 25}'\n</code></pre></p> <p>Note: The expiry date can be provided in DDMMYY format (e.g., \"160925\" for 16-Sep-2025) or DD-MMM-YYYY format.</p>"},{"location":"api/options/#12-get-options-analytics","title":"12. Get Options Analytics","text":"<p>Get analytics for saved options data.</p> <p>Endpoint: <code>GET /options/analytics</code></p> <p>Parameters: - <code>index</code> (query): Index symbol - <code>limit</code> (query, optional): Number of records to analyze</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/options/analytics?index=NIFTY&amp;limit=500\"\n</code></pre></p>"},{"location":"api/options/#response-formats","title":"Response Formats","text":""},{"location":"api/options/#fetch-result-metadata","title":"Fetch Result Metadata","text":"<pre><code>{\n    \"createdAtUTC\": \"2024-12-09T15:30:00Z\",\n    \"indexName\": \"NIFTY\",\n    \"nearestExpiry\": \"16-Sep-2025\",\n    \"underlyingValue\": 24500.75,\n    \"atmStrike\": 24500,\n    \"selectedStrikesRange\": [23500, 25500],\n    \"totalStrikesFetched\": 41\n}\n</code></pre>"},{"location":"api/options/#analytics-response","title":"Analytics Response","text":"<pre><code>{\n    \"meta\": {\n        \"createdAtUTC\": \"2024-12-09T15:30:00Z\",\n        \"indexName\": \"NIFTY\",\n        \"underlyingValue\": 24500.75\n    },\n    \"pcr\": 1.25,\n    \"top_oi\": [\n        {\n            \"strike\": 24000,\n            \"oi_ce\": 2450000,\n            \"oi_pe\": 1850000,\n            \"total_oi\": 4300000\n        }\n    ],\n    \"max_pain\": {\n        \"max_pain_strike\": 24500,\n        \"total_ce_oi\": 125000000,\n        \"total_pe_oi\": 100000000\n    }\n}\n</code></pre>"},{"location":"api/options/#error-responses","title":"\u26a0\ufe0f Error Responses","text":"<ul> <li><code>400</code>: Invalid parameters or expiry date format</li> <li><code>404</code>: Index not found or no data available</li> <li><code>422</code>: Invalid expiry date or strike price</li> <li><code>500</code>: Server error or NSE data unavailable</li> </ul>"},{"location":"api/options/#usage-examples","title":"\ud83d\udca1 Usage Examples","text":""},{"location":"api/options/#python-example-get-options-chain","title":"Python Example - Get Options Chain","text":"<pre><code>import requests\n\n# Get options data\nresponse = requests.get(\n    \"http://localhost:8000/options/direct-data\",\n    params={\n        \"index\": \"NIFTY\",\n        \"expiry\": \"160925\",\n        \"num_strikes\": 10\n    }\n)\ndata = response.json()\n\nprint(f\"Underlying: {data['underlying_value']}\")\nfor option in data['options'][:5]:\n    print(f\"Strike: {option['strikePrice']}\")\n    if 'CE' in option:\n        print(f\"  CE: \u20b9{option['CE']['lastPrice']}\")\n    if 'PE' in option:\n        print(f\"  PE: \u20b9{option['PE']['lastPrice']}\")\n</code></pre>"},{"location":"api/options/#javascript-example-get-option-price","title":"JavaScript Example - Get Option Price","text":"<pre><code>// Get specific option price\nconst params = new URLSearchParams({\n    index: 'NIFTY',\n    strike: 24000,\n    expiry: '160925',\n    option_type: 'CE'\n});\n\nfetch(`http://localhost:8000/options/option-price?${params}`)\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        console.log(`NIFTY 24000 CE: \u20b9${data.lastPrice}`);\n        console.log(`Open Interest: ${data.openInterest}`);\n    });\n</code></pre>"},{"location":"api/options/#rate-limits","title":"\ud83d\udd04 Rate Limits","text":"<ul> <li>Index price requests: 100 per minute</li> <li>Options data requests: 50 per minute</li> <li>Historical data: 30 per minute</li> <li>Analytics requests: 20 per minute</li> </ul>"},{"location":"api/options/#data-sources","title":"Data Sources","text":"<ul> <li>Options Data: NSE (National Stock Exchange of India)</li> <li>Historical Options: Yahoo Finance</li> <li>Index Prices: NSE real-time data</li> </ul>"},{"location":"api/options/#best-practices","title":"Best Practices","text":"<ol> <li>Use DDMMYY format for expiry dates (e.g., <code>160925</code> for 16-Sep-2025)</li> <li>Validate expiry dates before making requests</li> <li>Use appropriate strike ranges for your analysis</li> <li>Cache frequently requested data</li> <li>Handle NSE data unavailability gracefully</li> <li>Use the direct-data endpoint for real-time analysis</li> <li>Use fetch endpoints for bulk data processing</li> </ol>"},{"location":"api/options/#supported-indices","title":"Supported Indices","text":"<ul> <li>NIFTY: Primary Indian index</li> <li>BANKNIFTY: Banking sector index</li> <li>NIFTYIT: IT sector index</li> <li>NIFTYPHARMA: Pharma sector index</li> <li>NIFTYAUTO: Auto sector index</li> <li>NIFTYFINANCE: Finance sector index</li> </ul>"},{"location":"api/options/#date-format-conversion","title":"Date Format Conversion","text":"<p>The API accepts expiry dates in DDMMYY format for user convenience: - <code>160925</code> \u2192 <code>16-Sep-2025</code> - <code>301225</code> \u2192 <code>30-Dec-2025</code> - <code>280225</code> \u2192 <code>28-Feb-2025</code></p>"},{"location":"api/stock/","title":"Stock Data API","text":"<p>This section documents the stock market data endpoints in FastStockAPI, providing comprehensive access to Indian and US stock markets.</p>"},{"location":"api/stock/#overview","title":"Overview","text":"<p>The stock data API provides real-time and historical stock price information for NSE (National Stock Exchange of India) and US markets, with support for individual stocks, bulk quotes, and market indices.</p>"},{"location":"api/stock/#base-url","title":"\ud83d\udd17 Base URL","text":"<pre><code>http://localhost:8000  (local development)\nhttps://your-domain.com  (production)\n</code></pre>"},{"location":"api/stock/#endpoints","title":"Endpoints","text":""},{"location":"api/stock/#1-get-indian-stock-quote","title":"1. Get Indian Stock Quote","text":"<p>Get current price information for a specific NSE stock.</p> <p>Endpoint: <code>GET /stocks/IND/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): NSE stock symbol (e.g., <code>RELIANCE</code>, <code>TCS</code>, <code>HDFC</code>)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/IND/RELIANCE\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"RELIANCE\",\n    \"companyName\": \"Reliance Industries Ltd\",\n    \"lastPrice\": 2456.75,\n    \"pChange\": 1.25,\n    \"change\": 30.50,\n    \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre></p>"},{"location":"api/stock/#2-get-us-stock-quote","title":"2. Get US Stock Quote","text":"<p>Get current price information for a specific US stock.</p> <p>Endpoint: <code>GET /stocks/US/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): US stock symbol (e.g., <code>AAPL</code>, <code>GOOGL</code>, <code>MSFT</code>)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/US/AAPL\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"symbol\": \"AAPL\",\n    \"companyName\": \"Apple Inc.\",\n    \"lastPrice\": 192.53,\n    \"pChange\": -0.85,\n    \"change\": -1.65,\n    \"timestamp\": \"2024-12-09T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/stock/#3-get-historical-indian-stock-data","title":"3. Get Historical Indian Stock Data","text":"<p>Get historical price data for NSE stocks.</p> <p>Endpoint: <code>GET /stocks/historical/IND/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): NSE stock symbol - <code>period</code> (query, optional): Time period (1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/historical/IND/RELIANCE?period=1mo\"\n</code></pre></p>"},{"location":"api/stock/#4-get-historical-us-stock-data","title":"4. Get Historical US Stock Data","text":"<p>Get historical price data for US stocks.</p> <p>Endpoint: <code>GET /stocks/historical/US/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): US stock symbol - <code>period</code> (query, optional): Time period (1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/historical/US/AAPL?period=1mo\"\n</code></pre></p>"},{"location":"api/stock/#5-get-us-market-index","title":"5. Get US Market Index","text":"<p>Get current data for US market indices.</p> <p>Endpoint: <code>GET /stocks/index/US/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): US index symbol (<code>DJI</code>, <code>SPX</code>, <code>IXIC</code>)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/index/US/DJI\"\n</code></pre></p>"},{"location":"api/stock/#6-get-bse-market-index","title":"6. Get BSE Market Index","text":"<p>Get current data for BSE market indices.</p> <p>Endpoint: <code>GET /stocks/index/BSE/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): BSE index symbol (<code>SENSEX</code>, <code>BSE100</code>)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/index/BSE/SENSEX\"\n</code></pre></p>"},{"location":"api/stock/#7-get-historical-us-index-data","title":"7. Get Historical US Index Data","text":"<p>Get historical data for US market indices.</p> <p>Endpoint: <code>GET /stocks/index/US/{symbol}/historical</code></p> <p>Parameters: - <code>symbol</code> (path): US index symbol - <code>period</code> (query, optional): Time period</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/index/US/SPX/historical?period=1mo\"\n</code></pre></p>"},{"location":"api/stock/#8-get-historical-bse-index-data","title":"8. Get Historical BSE Index Data","text":"<p>Get historical data for BSE market indices.</p> <p>Endpoint: <code>GET /stocks/index/BSE/{symbol}/historical</code></p> <p>Parameters: - <code>symbol</code> (path): BSE index symbol - <code>period</code> (query, optional): Time period</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/index/BSE/SENSEX/historical?period=1mo\"\n</code></pre></p>"},{"location":"api/stock/#9-get-available-indian-stocks","title":"9. Get Available Indian Stocks","text":"<p>Get list of available Indian stock symbols.</p> <p>Endpoint: <code>GET /stocks/indian/list</code></p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/indian/list\"\n</code></pre></p>"},{"location":"api/stock/#10-get-available-us-stocks","title":"10. Get Available US Stocks","text":"<p>Get list of available US stock symbols.</p> <p>Endpoint: <code>GET /stocks/us/list</code></p> <p>Example Request: <pre><code>curl \"http://localhost:8000/stocks/us/list\"\n</code></pre></p>"},{"location":"api/stock/#response-formats","title":"Response Formats","text":""},{"location":"api/stock/#stock-quote-response","title":"Stock Quote Response","text":"<pre><code>{\n    \"symbol\": \"RELIANCE\",\n    \"companyName\": \"Reliance Industries Ltd\",\n    \"lastPrice\": 2456.75,\n    \"pChange\": 1.25,\n    \"change\": 30.50,\n    \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre>"},{"location":"api/stock/#historical-data-response","title":"Historical Data Response","text":"<pre><code>{\n    \"symbol\": \"RELIANCE\",\n    \"period\": \"1mo\",\n    \"data\": [\n        {\n            \"date\": \"2024-11-09\",\n            \"open\": 2450.00,\n            \"high\": 2470.00,\n            \"low\": 2440.00,\n            \"close\": 2465.50,\n            \"volume\": 1524000\n        }\n    ]\n}\n</code></pre>"},{"location":"api/stock/#error-responses","title":"\u26a0\ufe0f Error Responses","text":"<ul> <li><code>404</code>: Stock symbol not found</li> <li><code>422</code>: Invalid parameters</li> <li><code>500</code>: Server error or data source unavailable</li> </ul>"},{"location":"api/stock/#usage-examples","title":"\ud83d\udca1 Usage Examples","text":""},{"location":"api/stock/#python-example","title":"Python Example","text":"<pre><code>import requests\n\n# Get Indian stock price\nresponse = requests.get(\"http://localhost:8000/stocks/IND/RELIANCE\")\ndata = response.json()\nprint(f\"RELIANCE: \u20b9{data['lastPrice']}\")\n\n# Get US stock price\nresponse = requests.get(\"http://localhost:8000/stocks/US/AAPL\")\ndata = response.json()\nprint(f\"AAPL: ${data['lastPrice']}\")\n</code></pre>"},{"location":"api/stock/#javascript-example","title":"JavaScript Example","text":"<pre><code>// Get stock data\nfetch('http://localhost:8000/stocks/IND/TCS')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        console.log(`TCS Price: \u20b9${data.lastPrice}`);\n    });\n</code></pre>"},{"location":"api/stock/#rate-limits","title":"\ud83d\udd04 Rate Limits","text":"<ul> <li>Individual stock requests: 100 per minute</li> <li>Bulk requests: 50 per minute</li> <li>Historical data: 30 per minute</li> </ul>"},{"location":"api/stock/#data-sources","title":"Data Sources","text":"<ul> <li>Indian Stocks: NSE (National Stock Exchange)</li> <li>US Stocks: Yahoo Finance</li> <li>Indices: Yahoo Finance and NSE</li> </ul>"},{"location":"api/stock/#best-practices","title":"Best Practices","text":"<ol> <li>Use appropriate time periods for historical data</li> <li>Cache frequently requested data</li> <li>Handle rate limits gracefully</li> <li>Validate stock symbols before requests</li> <li>Use bulk endpoints for multiple symbols when possible</li> </ol> <p>Get historical price data for a stock.</p> <p>Endpoint: <code>GET /historical/{symbol}</code></p> <p>Parameters: - <code>symbol</code> (path): Stock symbol with <code>.NS</code> suffix - <code>period</code> (query, optional): Time period (default: <code>1d</code>) - <code>interval</code> (query, optional): Data interval (default: <code>1d</code>)</p> <p>Supported Periods: - <code>1d</code>, <code>5d</code>, <code>1mo</code>, <code>3mo</code>, <code>6mo</code>, <code>1y</code>, <code>2y</code>, <code>5y</code>, <code>10y</code>, <code>ytd</code>, <code>max</code></p> <p>Supported Intervals: - <code>1m</code>, <code>2m</code>, <code>5m</code>, <code>15m</code>, <code>30m</code>, <code>60m</code>, <code>90m</code>, <code>1h</code>, <code>1d</code>, <code>5d</code>, <code>1wk</code>, <code>1mo</code>, <code>3mo</code></p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/historical/RELIANCE.NS?period=1mo&amp;interval=1d\"\n</code></pre></p> <p>Example Response: <pre><code>[\n    {\n        \"Date\": \"2024-11-09\",\n        \"Open\": 2450.0,\n        \"High\": 2470.0,\n        \"Low\": 2440.0,\n        \"Close\": 2456.75,\n        \"Volume\": 1234567\n    },\n    {\n        \"Date\": \"2024-11-10\",\n        \"Open\": 2456.75,\n        \"High\": 2480.0,\n        \"Low\": 2450.0,\n        \"Close\": 2465.25,\n        \"Volume\": 1456789\n    }\n]\n</code></pre></p>"},{"location":"api/stock/#3-legacy-stock-endpoints","title":"3. Legacy Stock Endpoints","text":"<p>Get Quote: <code>GET /quote/{symbol}</code> Fetch Quote: <code>GET /fetch/{symbol}</code></p> <p>These endpoints provide basic stock information and are maintained for backward compatibility.</p> <p>Example: <pre><code>curl \"https://fastapi-stock-data.onrender.com/quote/RELIANCE.NS\"\n</code></pre></p>"},{"location":"api/stock/#4-get-all-quotes","title":"4. Get All Quotes","text":"<p>Get all cached stock quotes.</p> <p>Endpoint: <code>GET /quotes</code></p> <p>Example Request: <pre><code>curl \"https://fastapi-stock-data.onrender.com/quotes\"\n</code></pre></p> <p>Example Response: <pre><code>{\n    \"RELIANCE.NS\": {\n        \"symbol\": \"RELIANCE.NS\",\n        \"price\": 2456.75,\n        \"timestamp\": \"2024-12-09T15:30:00Z\"\n    },\n    \"TCS.NS\": {\n        \"symbol\": \"TCS.NS\",\n        \"price\": 3456.25,\n        \"timestamp\": \"2024-12-09T15:30:00Z\"\n    }\n}\n</code></pre></p>"},{"location":"api/stock/#response-formats_1","title":"\ud83d\udcca Response Formats","text":""},{"location":"api/stock/#stock-price-response","title":"Stock Price Response","text":"<pre><code>{\n    \"symbol\": \"string\",\n    \"companyName\": \"string\",\n    \"lastPrice\": \"number\",\n    \"pChange\": \"number\",\n    \"change\": \"number\",\n    \"timestamp\": \"string\"\n}\n</code></pre>"},{"location":"api/stock/#historical-data-response_1","title":"Historical Data Response","text":"<pre><code>[\n    {\n        \"Date\": \"string\",\n        \"Open\": \"number\",\n        \"High\": \"number\",\n        \"Low\": \"number\",\n        \"Close\": \"number\",\n        \"Volume\": \"number\"\n    }\n]\n</code></pre>"},{"location":"api/stock/#important-notes","title":"\u26a0\ufe0f Important Notes","text":""},{"location":"api/stock/#symbol-format","title":"Symbol Format","text":"<ul> <li>All NSE stock symbols must include the <code>.NS</code> suffix</li> <li>Example: <code>RELIANCE.NS</code>, <code>TCS.NS</code>, <code>HDFCBANK.NS</code></li> </ul>"},{"location":"api/stock/#market-hours","title":"Market Hours","text":"<ul> <li>Pre-market: 9:00 AM - 9:15 AM IST</li> <li>Regular session: 9:15 AM - 3:30 PM IST</li> <li>Post-market: 3:30 PM - 4:00 PM IST</li> </ul>"},{"location":"api/stock/#data-sources_1","title":"Data Sources","text":"<ul> <li>Primary: Yahoo Finance (yfinance library)</li> <li>Fallback: NSE direct APIs when available</li> </ul>"},{"location":"api/stock/#rate-limits_1","title":"Rate Limits","text":"<ul> <li>No explicit rate limits for stock endpoints</li> <li>Respectful usage recommended</li> <li>Consider implementing client-side caching</li> </ul>"},{"location":"api/stock/#integration-examples","title":"Integration Examples","text":""},{"location":"api/stock/#python","title":"Python","text":"<pre><code>import requests\n\ndef get_stock_price(symbol):\n    url = f\"https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol={symbol}\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    else:\n        print(f\"Error: {response.status_code}\")\n        return None\n\n# Usage\nstock_data = get_stock_price(\"RELIANCE.NS\")\nif stock_data:\n    print(f\"{stock_data['companyName']}: \u20b9{stock_data['lastPrice']}\")\n</code></pre>"},{"location":"api/stock/#javascript","title":"JavaScript","text":"<pre><code>async function getStockPrice(symbol) {\n    const response = await fetch(\n        `https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol=${symbol}`\n    );\n\n    if (response.ok) {\n        const data = await response.json();\n        return data;\n    } else {\n        console.error(`Error: ${response.status}`);\n        return null;\n    }\n}\n\n// Usage\ngetStockPrice('RELIANCE.NS').then(data =&gt; {\n    if (data) {\n        console.log(`${data.companyName}: \u20b9${data.lastPrice}`);\n    }\n});\n</code></pre>"},{"location":"api/stock/#error-handling","title":"\ud83d\udd0d Error Handling","text":""},{"location":"api/stock/#common-http-status-codes","title":"Common HTTP Status Codes","text":"<ul> <li>200: Success</li> <li>404: Stock symbol not found or delisted</li> <li>500: Server error or data source unavailable</li> </ul>"},{"location":"api/stock/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"detail\": \"Error description message\"\n}\n</code></pre>"},{"location":"api/stock/#data-fields-explanation","title":"Data Fields Explanation","text":"Field Description Type <code>symbol</code> Stock symbol with exchange suffix string <code>companyName</code> Full company name string <code>lastPrice</code> Last traded price number <code>pChange</code> Percentage change from previous close number <code>change</code> Absolute change from previous close number <code>timestamp</code> Data timestamp string"},{"location":"api/stock/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"api/stock/#common-issues","title":"Common Issues","text":"<p>404 Not Found - Check symbol format (must include <code>.NS</code>) - Verify symbol exists on NSE - Stock may be delisted or suspended</p> <p>No Data Available - Check during market hours - Some stocks may have limited historical data</p> <p>Slow Response - Historical data requests may take longer - Consider using shorter time periods</p>"},{"location":"api/stock/#getting-help","title":"Getting Help","text":"<ul> <li>Check the NSE Stocks page for supported symbols</li> <li>Report issues on GitHub</li> <li>Visit NSE website for official symbol verification</li> </ul>"},{"location":"symbols/cryptocurrencies/","title":"Cryptocurrency Symbols","text":"<p>This page lists all supported cryptocurrency symbols available through our API.</p>"},{"location":"symbols/cryptocurrencies/#supported-cryptocurrencies","title":"Supported Cryptocurrencies","text":"<p>Our API supports the following cryptocurrency pairs traded on Binance:</p>"},{"location":"symbols/cryptocurrencies/#major-cryptocurrencies","title":"Major Cryptocurrencies","text":"Symbol Name Description <code>BTCUSDT</code> Bitcoin World's largest cryptocurrency <code>ETHUSDT</code> Ethereum Smart contract platform <code>ADAUSDT</code> Cardano Proof-of-stake blockchain <code>SOLUSDT</code> Solana High-performance blockchain <code>DOTUSDT</code> Polkadot Interoperability protocol <code>AVAXUSDT</code> Avalanche Platform for decentralized apps <code>MATICUSDT</code> Polygon Ethereum scaling solution <code>LINKUSDT</code> Chainlink Oracle network <code>UNIUSDT</code> Uniswap Decentralized exchange <code>BNBUSDT</code> Binance Coin Binance ecosystem token"},{"location":"symbols/cryptocurrencies/#defi-tokens","title":"DeFi Tokens","text":"Symbol Name Description <code>AAVEUSDT</code> Aave Decentralized lending protocol <code>SUSHIUSDT</code> SushiSwap DEX and yield farming <code>COMPUSDT</code> Compound Lending protocol <code>MKRUSDT</code> Maker Stablecoin protocol <code>YFIUSDT</code> Yearn Finance Yield aggregator <code>BALUSDT</code> Balancer Automated portfolio manager <code>CRVUSDT</code> Curve Stablecoin exchange"},{"location":"symbols/cryptocurrencies/#other-popular-tokens","title":"Other Popular Tokens","text":"Symbol Name Description <code>XRPUSDT</code> Ripple Payment protocol <code>LTCUSDT</code> Litecoin Peer-to-peer cryptocurrency <code>BCHUSDT</code> Bitcoin Cash Bitcoin fork <code>ETCUSDT</code> Ethereum Classic Ethereum fork <code>DOGEUSDT</code> Dogecoin Meme cryptocurrency <code>SHIBUSDT</code> Shiba Inu Meme token <code>CAKEUSDT</code> PancakeSwap DEX on Binance Smart Chain <code>SXPUSDT</code> Swipe Payment protocol <code>ALICEUSDT</code> My Neighbor Alice Gaming metaverse"},{"location":"symbols/cryptocurrencies/#symbol-format","title":"Symbol Format","text":"<p>All cryptocurrency symbols follow the format: <code>{BASE}{QUOTE}</code></p> <ul> <li>BASE: The cryptocurrency (e.g., BTC, ETH, ADA)</li> <li>QUOTE: The quote currency (always USDT for our API)</li> </ul> <p>Examples</p> <ul> <li><code>BTCUSDT</code> = Bitcoin priced in USDT</li> <li><code>ETHUSDT</code> = Ethereum priced in USDT</li> <li><code>ADAUSDT</code> = Cardano priced in USDT</li> </ul>"},{"location":"symbols/cryptocurrencies/#available-endpoints","title":"Available Endpoints","text":""},{"location":"symbols/cryptocurrencies/#price-endpoints","title":"Price Endpoints","text":"<pre><code># Single cryptocurrency price\nGET /crypto-price/{symbol}\n\n# Multiple cryptocurrency prices\nGET /crypto-multiple?symbols=BTCUSDT,ETHUSDT,ADAUSDT\n\n# 24-hour statistics\nGET /crypto-stats/{symbol}\n\n# Historical data\nGET /crypto-historical/{symbol}?interval=1d&amp;limit=100\n</code></pre>"},{"location":"symbols/cryptocurrencies/#examples","title":"Examples","text":""},{"location":"symbols/cryptocurrencies/#get-bitcoin-price","title":"Get Bitcoin Price","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-price/BTCUSDT\"\n</code></pre>"},{"location":"symbols/cryptocurrencies/#get-multiple-prices","title":"Get Multiple Prices","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-multiple?symbols=BTCUSDT,ETHUSDT,SOLUSDT\"\n</code></pre>"},{"location":"symbols/cryptocurrencies/#get-24h-statistics","title":"Get 24h Statistics","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-stats/BTCUSDT\"\n</code></pre>"},{"location":"symbols/cryptocurrencies/#get-historical-data","title":"Get Historical Data","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/crypto-historical/BTCUSDT?interval=1d&amp;limit=30\"\n</code></pre>"},{"location":"symbols/cryptocurrencies/#historical-data-intervals","title":"Historical Data Intervals","text":"<p>Supported intervals for historical data:</p> <ul> <li><code>1m</code> - 1 minute</li> <li><code>3m</code> - 3 minutes</li> <li><code>5m</code> - 5 minutes</li> <li><code>15m</code> - 15 minutes</li> <li><code>30m</code> - 30 minutes</li> <li><code>1h</code> - 1 hour</li> <li><code>2h</code> - 2 hours</li> <li><code>4h</code> - 4 hours</li> <li><code>6h</code> - 6 hours</li> <li><code>8h</code> - 8 hours</li> <li><code>12h</code> - 12 hours</li> <li><code>1d</code> - 1 day</li> <li><code>3d</code> - 3 days</li> <li><code>1w</code> - 1 week</li> <li><code>1M</code> - 1 month</li> </ul>"},{"location":"symbols/cryptocurrencies/#important-notes","title":"Important Notes","text":""},{"location":"symbols/cryptocurrencies/#symbol-availability","title":"Symbol Availability","text":"<ul> <li>All symbols are subject to Binance's availability</li> <li>Some symbols may be delisted or suspended</li> <li>Check the API response for current availability</li> </ul>"},{"location":"symbols/cryptocurrencies/#rate-limits","title":"Rate Limits","text":"<ul> <li>Binance API has rate limits</li> <li>Our API may implement additional rate limiting</li> <li>Consider implementing caching for frequent requests</li> </ul>"},{"location":"symbols/cryptocurrencies/#data-accuracy","title":"Data Accuracy","text":"<ul> <li>Prices are real-time from Binance</li> <li>Historical data may have slight delays</li> <li>Always verify critical data from multiple sources</li> </ul>"},{"location":"symbols/cryptocurrencies/#real-time-updates","title":"Real-time Updates","text":"<p>For real-time price updates, consider:</p> <ol> <li>Polling: Call endpoints every 30 seconds</li> <li>WebSocket: Use Binance WebSocket API directly</li> <li>Caching: Implement client-side caching</li> </ol>"},{"location":"symbols/cryptocurrencies/#mobile-integration","title":"Mobile Integration","text":"<p>When using in mobile apps:</p> <pre><code>// React Native example\nconst getCryptoPrice = async (symbol) =&gt; {\n    try {\n        const response = await fetch(\n            `https://fastapi-stock-data.onrender.com/crypto-price/${symbol}`\n        );\n        const data = await response.json();\n        return data.price;\n    } catch (error) {\n        console.error('Error fetching crypto price:', error);\n        return null;\n    }\n};\n</code></pre>"},{"location":"symbols/cryptocurrencies/#troubleshooting","title":"Troubleshooting","text":""},{"location":"symbols/cryptocurrencies/#common-issues","title":"Common Issues","text":"<p>404 Not Found - Verify the symbol format (e.g., <code>BTCUSDT</code>, not <code>BTC</code>) - Check if the symbol is supported</p> <p>500 Internal Server Error - Binance API may be temporarily unavailable - Try again in a few minutes</p> <p>Empty Response - Symbol may not exist or be delisted - Check Binance website for symbol status</p>"},{"location":"symbols/cryptocurrencies/#getting-help","title":"Getting Help","text":"<ul> <li>Check the API Reference for detailed documentation</li> <li>Visit the Interactive Demo to test endpoints</li> <li>Report issues on GitHub</li> </ul>"},{"location":"symbols/indices/","title":"NSE Indices","text":"<p>This page lists all supported NSE (National Stock Exchange of India) indices available through our API.</p>"},{"location":"symbols/indices/#supported-nse-indices","title":"\ud83c\udfdb\ufe0f Supported NSE Indices","text":""},{"location":"symbols/indices/#major-broad-market-indices","title":"Major Broad Market Indices","text":"Symbol Index Name Description <code>NIFTY</code> NIFTY 50 India's benchmark stock market index <code>BANKNIFTY</code> NIFTY Bank Banking sector index <code>FINNIFTY</code> NIFTY Financial Services Financial services sector index <code>MIDCPNIFTY</code> NIFTY Midcap Select Mid-cap companies index"},{"location":"symbols/indices/#sectoral-indices","title":"Sectoral Indices","text":"Symbol Index Name Description <code>NIFTYAUTO</code> NIFTY Auto Automobile sector index <code>NIFTYIT</code> NIFTY IT Information Technology sector index <code>NIFTYPHARMA</code> NIFTY Pharma Pharmaceutical sector index <code>NIFTYFMCG</code> NIFTY FMCG Fast Moving Consumer Goods sector index <code>NIFTYMEDIA</code> NIFTY Media Media &amp; Entertainment sector index <code>NIFTYMETAL</code> NIFTY Metal Metal sector index <code>NIFTYREALTY</code> NIFTY Realty Real Estate sector index <code>NIFTYENERGY</code> NIFTY Energy Energy sector index <code>NIFTYPSE</code> NIFTY PSE Public Sector Enterprises index"},{"location":"symbols/indices/#thematic-indices","title":"Thematic Indices","text":"Symbol Index Name Description <code>NIFTYNEXT50</code> NIFTY Next 50 Next 50 companies after NIFTY 50 <code>NIFTYSMALLCAP</code> NIFTY Smallcap 250 Small-cap companies index <code>NIFTYMIDCAP</code> NIFTY Midcap 150 Mid-cap companies index <code>NIFTYMICROCAP</code> NIFTY Microcap 250 Micro-cap companies index"},{"location":"symbols/indices/#symbol-formats","title":"\ud83d\udd0d Symbol Formats","text":""},{"location":"symbols/indices/#for-index-price-endpoint","title":"For Index Price Endpoint","text":"<p>Use the simple format without any prefix/suffix:</p> <p>Index Price Format</p> <ul> <li><code>NIFTY</code> \u2705</li> <li><code>BANKNIFTY</code> \u2705</li> <li><code>FINNIFTY</code> \u2705</li> </ul>"},{"location":"symbols/indices/#for-historical-data-endpoint","title":"For Historical Data Endpoint","text":"<p>Use the Yahoo Finance format with <code>^</code> prefix:</p> <p>Historical Data Format</p> <ul> <li><code>^NSENIFTY</code> \u2705</li> <li><code>^NSEBANK</code> \u2705</li> <li><code>^NSENEXT50</code> \u2705</li> </ul>"},{"location":"symbols/indices/#available-endpoints","title":"\ud83d\udcc8 Available Endpoints","text":""},{"location":"symbols/indices/#index-data-endpoints","title":"Index Data Endpoints","text":"<pre><code># Get current index price\nGET /api/v1/market/price/index?index=NIFTY\n\n# Get historical index data\nGET /historical/^NSENIFTY?period=1d&amp;interval=1d\n</code></pre>"},{"location":"symbols/indices/#examples","title":"Examples","text":""},{"location":"symbols/indices/#get-nifty-index-price","title":"Get NIFTY Index Price","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/market/price/index?index=NIFTY\"\n</code></pre> <p>Response: <pre><code>{\n    \"symbol\": \"NIFTY\",\n    \"lastPrice\": 23456.75,\n    \"pChange\": 0.85,\n    \"change\": 198.50,\n    \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre></p>"},{"location":"symbols/indices/#get-historical-nifty-data","title":"Get Historical NIFTY Data","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/historical/^NSENIFTY?period=5d&amp;interval=1d\"\n</code></pre>"},{"location":"symbols/indices/#get-banknifty-price","title":"Get BANKNIFTY Price","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/market/price/index?index=BANKNIFTY\"\n</code></pre>"},{"location":"symbols/indices/#historical-data-parameters","title":"\ud83d\udcca Historical Data Parameters","text":""},{"location":"symbols/indices/#periods","title":"Periods","text":"<ul> <li><code>1d</code> - 1 day</li> <li><code>5d</code> - 5 days</li> <li><code>1mo</code> - 1 month</li> <li><code>3mo</code> - 3 months</li> <li><code>6mo</code> - 6 months</li> <li><code>1y</code> - 1 year</li> <li><code>2y</code> - 2 years</li> <li><code>5y</code> - 5 years</li> <li><code>10y</code> - 10 years</li> <li><code>ytd</code> - Year to date</li> <li><code>max</code> - Maximum available</li> </ul>"},{"location":"symbols/indices/#intervals","title":"Intervals","text":"<ul> <li><code>1m</code> - 1 minute</li> <li><code>2m</code> - 2 minutes</li> <li><code>5m</code> - 5 minutes</li> <li><code>15m</code> - 15 minutes</li> <li><code>30m</code> - 30 minutes</li> <li><code>60m</code> - 60 minutes</li> <li><code>1h</code> - 1 hour</li> <li><code>1d</code> - 1 day</li> <li><code>5d</code> - 5 days</li> <li><code>1wk</code> - 1 week</li> <li><code>1mo</code> - 1 month</li> </ul>"},{"location":"symbols/indices/#integration-examples","title":"\ud83d\udcf1 Integration Examples","text":""},{"location":"symbols/indices/#python","title":"Python","text":"<pre><code>import requests\n\ndef get_index_price(index_name):\n    url = f\"https://fastapi-stock-data.onrender.com/api/v1/market/price/index?index={index_name}\"\n    response = requests.get(url)\n    return response.json()\n\ndef get_index_history(index_symbol, period=\"1mo\", interval=\"1d\"):\n    url = f\"https://fastapi-stock-data.onrender.com/historical/{index_symbol}?period={period}&amp;interval={interval}\"\n    response = requests.get(url)\n    return response.json()\n\n# Usage\nnifty_price = get_index_price(\"NIFTY\")\nprint(f\"NIFTY: {nifty_price['lastPrice']}\")\n\nnifty_history = get_index_history(\"^NSENIFTY\", \"1mo\", \"1d\")\nprint(f\"Historical data points: {len(nifty_history)}\")\n</code></pre>"},{"location":"symbols/indices/#javascript","title":"JavaScript","text":"<pre><code>async function getIndexPrice(indexName) {\n    const response = await fetch(\n        `https://fastapi-stock-data.onrender.com/api/v1/market/price/index?index=${indexName}`\n    );\n    const data = await response.json();\n    return data;\n}\n\nasync function getIndexHistory(indexSymbol, period = \"1mo\", interval = \"1d\") {\n    const response = await fetch(\n        `https://fastapi-stock-data.onrender.com/historical/${indexSymbol}?period=${period}&amp;interval=${interval}`\n    );\n    const data = await response.json();\n    return data;\n}\n\n// Usage\ngetIndexPrice(\"NIFTY\").then(data =&gt; {\n    console.log(`NIFTY: ${data.lastPrice}`);\n});\n\ngetIndexHistory(\"^NSENIFTY\").then(data =&gt; {\n    console.log(`Data points: ${data.length}`);\n});\n</code></pre>"},{"location":"symbols/indices/#index-components","title":"\ud83d\udcca Index Components","text":""},{"location":"symbols/indices/#nifty-50-components","title":"NIFTY 50 Components","text":"<p>The NIFTY 50 index consists of 50 large-cap companies:</p> <p>Banking &amp; Financial Services (12) - HDFC Bank, ICICI Bank, Kotak Mahindra Bank, Axis Bank, IndusInd Bank, etc.</p> <p>IT &amp; Technology (9) - TCS, Infosys, Wipro, HCL Technologies, Tech Mahindra, etc.</p> <p>Oil &amp; Gas (3) - Reliance Industries, ONGC, Coal India</p> <p>Automobiles (4) - Maruti Suzuki, Mahindra &amp; Mahindra, Tata Motors, Bajaj Auto</p> <p>And many more sectors...</p>"},{"location":"symbols/indices/#banknifty-components","title":"BANKNIFTY Components","text":"<p>BANKNIFTY consists of the most liquid and large-cap banking stocks: - HDFC Bank, ICICI Bank, Kotak Mahindra Bank, Axis Bank - State Bank of India, Bank of Baroda, Punjab National Bank - And other major banking stocks</p>"},{"location":"symbols/indices/#important-notes","title":"\u26a0\ufe0f Important Notes","text":""},{"location":"symbols/indices/#market-hours","title":"Market Hours","text":"<ul> <li>Pre-open: 9:00 AM - 9:15 AM IST</li> <li>Regular session: 9:15 AM - 3:30 PM IST</li> <li>Closing: 3:30 PM - 3:32 PM IST</li> <li>Post-close: 3:32 PM - 4:00 PM IST</li> </ul>"},{"location":"symbols/indices/#index-calculation","title":"Index Calculation","text":"<ul> <li>NIFTY indices are calculated using the free-float market capitalization method</li> <li>Base value: 1000 (NIFTY 50)</li> <li>Updated every 6 seconds during market hours</li> </ul>"},{"location":"symbols/indices/#data-availability","title":"Data Availability","text":"<ul> <li>Real-time data during market hours</li> <li>Historical data available from index inception</li> <li>Some indices have limited historical data</li> </ul>"},{"location":"symbols/indices/#real-time-updates","title":"\ud83d\udd04 Real-time Updates","text":"<p>For real-time index updates:</p> <ol> <li>Polling: Call endpoints every 30 seconds during market hours</li> <li>WebSocket: Use NSE WebSocket API directly</li> <li>Caching: Implement client-side caching</li> </ol>"},{"location":"symbols/indices/#index-performance","title":"\ud83d\udcc8 Index Performance","text":""},{"location":"symbols/indices/#nifty-50-historical-performance","title":"NIFTY 50 Historical Performance","text":"<ul> <li>2024: ~25-30% growth expected</li> <li>2023: ~18% growth</li> <li>2022: ~4% growth</li> <li>2021: ~24% growth</li> </ul>"},{"location":"symbols/indices/#volatility-measures","title":"Volatility Measures","text":"<ul> <li>VIX: India VIX measures market volatility</li> <li>Beta: Measures stock/index volatility relative to market</li> </ul>"},{"location":"symbols/indices/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"symbols/indices/#common-issues","title":"Common Issues","text":"<p>404 Not Found - Check index name spelling - Verify index exists on NSE</p> <p>No Data Available - Check during market hours - Some indices may be under maintenance</p> <p>Historical Data Issues - Try shorter time periods - Some indices have limited historical data</p>"},{"location":"symbols/indices/#getting-help","title":"Getting Help","text":"<ul> <li>Check the API Reference for detailed documentation</li> <li>Visit NSE website for official index information</li> <li>Report issues on GitHub</li> </ul>"},{"location":"symbols/nse-stocks/","title":"NSE Stocks","text":"<p>This page lists all supported NSE (National Stock Exchange of India) stock symbols available through our API.</p>"},{"location":"symbols/nse-stocks/#supported-nse-stocks","title":"Supported NSE Stocks","text":"<p>Our API supports 200+ NSE stocks. Here are the major categories:</p>"},{"location":"symbols/nse-stocks/#banking-financial-services","title":"Banking &amp; Financial Services","text":"Symbol Company Name <code>HDFCBANK.NS</code> HDFC Bank Ltd <code>ICICIBANK.NS</code> ICICI Bank Ltd <code>KOTAKBANK.NS</code> Kotak Mahindra Bank Ltd <code>AXISBANK.NS</code> Axis Bank Ltd <code>INDUSINDBK.NS</code> IndusInd Bank Ltd <code>BANDHANBNK.NS</code> Bandhan Bank Ltd <code>IDFCFIRSTB.NS</code> IDFC First Bank Ltd <code>FEDERALBNK.NS</code> Federal Bank Ltd"},{"location":"symbols/nse-stocks/#it-technology","title":"IT &amp; Technology","text":"Symbol Company Name <code>TCS.NS</code> Tata Consultancy Services Ltd <code>INFY.NS</code> Infosys Ltd <code>WIPRO.NS</code> Wipro Ltd <code>HCLTECH.NS</code> HCL Technologies Ltd <code>TECHM.NS</code> Tech Mahindra Ltd <code>LTIMINDTREE.NS</code> LTIMindtree Ltd <code>MINDTREE.NS</code> Mindtree Ltd <code>COFORGE.NS</code> Coforge Ltd"},{"location":"symbols/nse-stocks/#oil-gas","title":"Oil &amp; Gas","text":"Symbol Company Name <code>RELIANCE.NS</code> Reliance Industries Ltd <code>ONGC.NS</code> Oil &amp; Natural Gas Corporation Ltd <code>GAIL.NS</code> GAIL (India) Ltd <code>BPCL.NS</code> Bharat Petroleum Corporation Ltd <code>IOC.NS</code> Indian Oil Corporation Ltd <code>HINDPETRO.NS</code> Hindustan Petroleum Corporation Ltd <code>NTPC.NS</code> NTPC Ltd <code>POWERGRID.NS</code> Power Grid Corporation of India Ltd"},{"location":"symbols/nse-stocks/#metals-mining","title":"Metals &amp; Mining","text":"Symbol Company Name <code>HINDALCO.NS</code> Hindalco Industries Ltd <code>JSWSTEEL.NS</code> JSW Steel Ltd <code>TATASTEEL.NS</code> Tata Steel Ltd <code>VEDL.NS</code> Vedanta Ltd <code>NMDC.NS</code> NMDC Ltd <code>COALINDIA.NS</code> Coal India Ltd"},{"location":"symbols/nse-stocks/#cement","title":"Cement","text":"Symbol Company Name <code>ULTRACEMCO.NS</code> UltraTech Cement Ltd <code>GRASIM.NS</code> Grasim Industries Ltd <code>SHREECEM.NS</code> Shree Cement Ltd <code>AMBUJACEM.NS</code> Ambuja Cements Ltd <code>ACC.NS</code> ACC Ltd <code>DALBHARAT.NS</code> Dalmia Bharat Ltd"},{"location":"symbols/nse-stocks/#pharmaceuticals","title":"Pharmaceuticals","text":"Symbol Company Name <code>DRREDDY.NS</code> Dr. Reddy's Laboratories Ltd <code>SUNPHARMA.NS</code> Sun Pharmaceutical Industries Ltd <code>CIPLA.NS</code> Cipla Ltd <code>DIVISLAB.NS</code> Divi's Laboratories Ltd <code>LUPIN.NS</code> Lupin Ltd <code>AUROPHARMA.NS</code> Aurobindo Pharma Ltd <code>BIOCON.NS</code> Biocon Ltd <code>ZYDUSLIFE.NS</code> Zydus Lifesciences Ltd"},{"location":"symbols/nse-stocks/#healthcare","title":"Healthcare","text":"Symbol Company Name <code>APOLLOHOSP.NS</code> Apollo Hospitals Enterprise Ltd <code>MAXHEALTH.NS</code> Max Healthcare Institute Ltd <code>FORTIS.NS</code> Fortis Healthcare Ltd <code>NH.NS</code> Narayana Hrudayalaya Ltd"},{"location":"symbols/nse-stocks/#symbol-format","title":"Symbol Format","text":"<p>All NSE stock symbols must include the <code>.NS</code> suffix:</p> <p>Correct Format</p> <ul> <li><code>RELIANCE.NS</code> \u2705</li> <li><code>TCS.NS</code> \u2705</li> <li><code>HDFCBANK.NS</code> \u2705</li> </ul> <p>Incorrect Format</p> <ul> <li><code>RELIANCE</code> \u274c</li> <li><code>TCS</code> \u274c</li> <li><code>HDFCBANK</code> \u274c</li> </ul>"},{"location":"symbols/nse-stocks/#available-endpoints","title":"Available Endpoints","text":""},{"location":"symbols/nse-stocks/#stock-data-endpoints","title":"Stock Data Endpoints","text":"<pre><code># Get stock price\nGET /api/v1/market/price/stock?symbol=RELIANCE.NS\n\n# Get historical data\nGET /historical/RELIANCE.NS?period=1d&amp;interval=1d\n\n# Legacy endpoints\nGET /quote/RELIANCE.NS\nGET /fetch/RELIANCE.NS\n</code></pre>"},{"location":"symbols/nse-stocks/#examples","title":"Examples","text":""},{"location":"symbols/nse-stocks/#get-stock-price","title":"Get Stock Price","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol=RELIANCE.NS\"\n</code></pre> <p>Response: <pre><code>{\n    \"symbol\": \"RELIANCE.NS\",\n    \"companyName\": \"Reliance Industries Ltd\",\n    \"lastPrice\": 2456.75,\n    \"pChange\": 1.25,\n    \"change\": 30.50,\n    \"timestamp\": \"09-Dec-2024 15:30:00\"\n}\n</code></pre></p>"},{"location":"symbols/nse-stocks/#get-historical-data","title":"Get Historical Data","text":"<pre><code>curl \"https://fastapi-stock-data.onrender.com/historical/RELIANCE.NS?period=5d&amp;interval=1d\"\n</code></pre>"},{"location":"symbols/nse-stocks/#historical-data-parameters","title":"Historical Data Parameters","text":""},{"location":"symbols/nse-stocks/#periods","title":"Periods","text":"<ul> <li><code>1d</code> - 1 day</li> <li><code>5d</code> - 5 days</li> <li><code>1mo</code> - 1 month</li> <li><code>3mo</code> - 3 months</li> <li><code>6mo</code> - 6 months</li> <li><code>1y</code> - 1 year</li> <li><code>2y</code> - 2 years</li> <li><code>5y</code> - 5 years</li> <li><code>10y</code> - 10 years</li> <li><code>ytd</code> - Year to date</li> <li><code>max</code> - Maximum available</li> </ul>"},{"location":"symbols/nse-stocks/#intervals","title":"Intervals","text":"<ul> <li><code>1m</code> - 1 minute</li> <li><code>2m</code> - 2 minutes</li> <li><code>5m</code> - 5 minutes</li> <li><code>15m</code> - 15 minutes</li> <li><code>30m</code> - 30 minutes</li> <li><code>60m</code> - 60 minutes</li> <li><code>90m</code> - 90 minutes</li> <li><code>1h</code> - 1 hour</li> <li><code>1d</code> - 1 day</li> <li><code>5d</code> - 5 days</li> <li><code>1wk</code> - 1 week</li> <li><code>1mo</code> - 1 month</li> <li><code>3mo</code> - 3 months</li> </ul>"},{"location":"symbols/nse-stocks/#market-indices","title":"Market Indices","text":"<p>In addition to individual stocks, we support major NSE indices:</p> Symbol Index Name <code>NIFTY</code> NIFTY 50 <code>BANKNIFTY</code> NIFTY Bank <code>FINNIFTY</code> NIFTY Financial Services <code>MIDCPNIFTY</code> NIFTY Midcap Select"},{"location":"symbols/nse-stocks/#index-endpoints","title":"Index Endpoints","text":"<pre><code># Get index price\nGET /api/v1/market/price/index?index=NIFTY\n\n# Get historical index data\nGET /historical/^NSENIFTY?period=1d&amp;interval=1d\n</code></pre> <p>Index Symbols</p> <p>For historical data, use the Yahoo Finance format: <code>^NSENIFTY</code>, <code>^NSEBANK</code></p>"},{"location":"symbols/nse-stocks/#integration-examples","title":"Integration Examples","text":""},{"location":"symbols/nse-stocks/#python","title":"Python","text":"<pre><code>import requests\n\ndef get_stock_price(symbol):\n    url = f\"https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol={symbol}\"\n    response = requests.get(url)\n    return response.json()\n\n# Usage\nprice_data = get_stock_price(\"RELIANCE.NS\")\nprint(f\"{price_data['companyName']}: \u20b9{price_data['lastPrice']}\")\n</code></pre>"},{"location":"symbols/nse-stocks/#javascript","title":"JavaScript","text":"<pre><code>async function getStockPrice(symbol) {\n    const response = await fetch(\n        `https://fastapi-stock-data.onrender.com/api/v1/market/price/stock?symbol=${symbol}`\n    );\n    const data = await response.json();\n    return data;\n}\n\n// Usage\ngetStockPrice(\"TCS.NS\").then(data =&gt; {\n    console.log(`${data.companyName}: \u20b9${data.lastPrice}`);\n});\n</code></pre>"},{"location":"symbols/nse-stocks/#important-notes","title":"Important Notes","text":""},{"location":"symbols/nse-stocks/#market-hours","title":"Market Hours","text":"<ul> <li>Pre-market: 9:00 AM - 9:15 AM IST</li> <li>Regular session: 9:15 AM - 3:30 PM IST</li> <li>Post-market: 3:30 PM - 4:00 PM IST</li> </ul>"},{"location":"symbols/nse-stocks/#data-availability","title":"Data Availability","text":"<ul> <li>Real-time data during market hours</li> <li>Historical data available for past periods</li> <li>Some stocks may have limited historical data</li> </ul>"},{"location":"symbols/nse-stocks/#symbol-changes","title":"Symbol Changes","text":"<ul> <li>Company symbols may change due to mergers, acquisitions, etc.</li> <li>Always verify the current symbol on NSE website</li> <li>Our API may not reflect real-time symbol changes</li> </ul>"},{"location":"symbols/nse-stocks/#real-time-updates","title":"Real-time Updates","text":"<p>For real-time stock updates:</p> <ol> <li>Polling: Call endpoints every 30-60 seconds during market hours</li> <li>WebSocket: Use NSE WebSocket API directly</li> <li>Caching: Implement client-side caching</li> </ol>"},{"location":"symbols/nse-stocks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"symbols/nse-stocks/#common-issues","title":"Common Issues","text":"<p>404 Not Found - Check symbol format (must include <code>.NS</code>) - Verify symbol exists on NSE</p> <p>No Data Available - Stock may be suspended or delisted - Check during market hours</p> <p>Historical Data Issues - Some stocks have limited historical data - Try shorter time periods</p>"},{"location":"symbols/nse-stocks/#getting-help","title":"Getting Help","text":"<ul> <li>Check the API Reference for detailed documentation</li> <li>Report issues on GitHub</li> <li>Visit NSE website for official symbol verification</li> </ul>"}]}